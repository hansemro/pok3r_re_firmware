.syntax unified
.cpu cortex-m3
.text
.thumb


            vectors:
/*0x3400*/  .word 0x20002748
/*0x3404*/  .word reset
/*0x3408*/  .word nmi
/*0x340c*/  .word hard_fault
/*0x3410*/  .word mpu_fault
/*0x3414*/  .word bus_fault
/*0x3418*/  .word usage_fault

/*0x341c*/  .byte 0x00
/*0x341d*/  .byte 0x00
/*0x341e*/  .byte 0x00
/*0x341f*/  .byte 0x00
/*0x3420*/  .byte 0x00
/*0x3421*/  .byte 0x00
/*0x3422*/  .byte 0x00
/*0x3423*/  .byte 0x00
/*0x3424*/  .byte 0x00
/*0x3425*/  .byte 0x00
/*0x3426*/  .byte 0x00
/*0x3427*/  .byte 0x00
/*0x3428*/  .byte 0x00
/*0x3429*/  .byte 0x00
/*0x342a*/  .byte 0x00
/*0x342b*/  .byte 0x00

/*0x342c*/  .word svccall_intr
/*0x3430*/  .word debug_intr

/*0x3434*/  .byte 0x00
/*0x3435*/  .byte 0x00
/*0x3436*/  .byte 0x00
/*0x3437*/  .byte 0x00

/*0x3438*/  .word pendsv_intr
/*0x343c*/  .word systick_intr
/*0x3440*/  .word generic_intr
/*0x3444*/  .word generic_intr
/*0x3448*/  .word generic_intr
/*0x344c*/  .word generic_intr
/*0x3450*/  .word generic_intr
/*0x3454*/  .word generic_intr
/*0x3458*/  .word generic_intr
/*0x345c*/  .word generic_intr
/*0x3460*/  .word generic_intr
/*0x3464*/  .word generic_intr
/*0x3468*/  .word generic_intr
/*0x346c*/  .word generic_intr
/*0x3470*/  .word generic_intr
/*0x3474*/  .word generic_intr
/*0x3478*/  .word generic_intr
/*0x347c*/  .word generic_intr
/*0x3480*/  .word generic_intr
/*0x3484*/  .word generic_intr
/*0x3488*/  .word generic_intr
/*0x348c*/  .word generic_intr
/*0x3490*/  .word generic_intr
/*0x3494*/  .word generic_intr
/*0x3498*/  .word generic_intr
/*0x349c*/  .word generic_intr
/*0x34a0*/  .word generic_intr
/*0x34a4*/  .word generic_intr

/*0x34a8*/  .byte 0x00
/*0x34a9*/  .byte 0x00
/*0x34aa*/  .byte 0x00
/*0x34ab*/  .byte 0x00

/*0x34ac*/  .word generic_intr
/*0x34b0*/  .word generic_intr
/*0x34b4*/  .word generic_intr
/*0x34b8*/  .word generic_intr
/*0x34bc*/  .word generic_intr
/*0x34c0*/  .word generic_intr
/*0x34c4*/  .word generic_intr
/*0x34c8*/  .word generic_intr
/*0x34cc*/  .word generic_intr
/*0x34d0*/  .word generic_intr

/*0x34d4*/  .byte 0x00
/*0x34d5*/  .byte 0x00
/*0x34d6*/  .byte 0x00
/*0x34d7*/  .byte 0x00
/*0x34d8*/  .byte 0x00
/*0x34d9*/  .byte 0x00
/*0x34da*/  .byte 0x00
/*0x34db*/  .byte 0x00
/*0x34dc*/  .byte 0x00
/*0x34dd*/  .byte 0x00
/*0x34de*/  .byte 0x00
/*0x34df*/  .byte 0x00
/*0x34e0*/  .byte 0x00
/*0x34e1*/  .byte 0x00
/*0x34e2*/  .byte 0x00
/*0x34e3*/  .byte 0x00

/*0x34e4*/  .word bftm0_intr
/*0x34e8*/  .word bftm1_intr
/*0x34ec*/  .word generic_intr
/*0x34f0*/  .word generic_intr
/*0x34f4*/  .word generic_intr
/*0x34f8*/  .word generic_intr
/*0x34fc*/  .word generic_intr
/*0x3500*/  .word generic_intr
/*0x3504*/  .word generic_intr
/*0x3508*/  .word generic_intr
/*0x350c*/  .word generic_intr
/*0x3510*/  .word generic_intr
/*0x3514*/  .word usb_intr

/*0x3518*/  .byte 0x00
/*0x3519*/  .byte 0x00
/*0x351a*/  .byte 0x00
/*0x351b*/  .byte 0x00

/*0x351c*/  .word generic_intr
/*0x3520*/  .word generic_intr
/*0x3524*/  .word generic_intr
/*0x3528*/  .word generic_intr
/*0x352c*/  .word generic_intr
/*0x3530*/  .word generic_intr
/*0x3534*/  .word generic_intr
/*0x3538*/  .word generic_intr

/*0x353c*/  .byte 0x00
/*0x353d*/  .byte 0x00
/*0x353e*/  .byte 0x00
/*0x353f*/  .byte 0x00
/*0x3540*/  .byte 0x00
/*0x3541*/  .byte 0x00
/*0x3542*/  .byte 0x00
/*0x3543*/  .byte 0x00
/*0x3544*/  .byte 0x00
/*0x3545*/  .byte 0x00
/*0x3546*/  .byte 0x00
/*0x3547*/  .byte 0x00
/*0x3548*/  .byte 0x00
/*0x3549*/  .byte 0x00
/*0x354a*/  .byte 0x00
/*0x354b*/  .byte 0x00
/*0x354c*/  .byte 0x00
/*0x354d*/  .byte 0x00
/*0x354e*/  .byte 0x00
/*0x354f*/  .byte 0x00

/*0x3550*/  .word generic_intr


            .thumb_func
            reset:
/*0x3554*/      ldr r0, [pc, #0x1c] /* data_3574 */
/*0x3556*/      blx r0 /* do_nothing_2 */
/*0x3558*/      ldr r0, [pc, #0x1c] /* data_3578 */
/*0x355a*/      blx r0 /* ckcu_config_sys_clk */
/*0x355c*/      ldr r0, [pc, #0x1c] /* data_357c */
/*0x355e*/      bx r0 /* entry */

            .thumb_func
            nmi:
/*0x3560*/      b nmi

            .thumb_func
            hard_fault:
/*0x3562*/      b hard_fault

            .thumb_func
            mpu_fault:
/*0x3564*/      b mpu_fault

            .thumb_func
            bus_fault:
/*0x3566*/      b bus_fault

            .thumb_func
            usage_fault:
/*0x3568*/      b usage_fault

            .thumb_func
            svccall_intr:
/*0x356a*/      b svccall_intr

            .thumb_func
            debug_intr:
/*0x356c*/      b debug_intr

            .thumb_func
            pendsv_intr:
/*0x356e*/      b pendsv_intr

            .thumb_func
            systick_intr:
/*0x3570*/      b systick_intr

            .thumb_func
            generic_intr:
/*0x3572*/      b generic_intr

            data_3574:
/*0x3574*/  .word do_nothing_2
            data_3578:
/*0x3578*/  .word ckcu_config_sys_clk
            data_357c:
/*0x357c*/  .word entry


            .thumb_func
            entry:
/*0x3580*/      ldr.w sp, [pc, #0xc] /* sp = 0x20002748 */
/*0x3584*/      bl sram_init

            .thumb_func
            start_main:
/*0x3588*/      ldr r0, [pc, #0] /* r0 = main */
/*0x358a*/      bx r0 /* main */

            data_358c:
/*0x358c*/  .word main
            data_3590:
/*0x3590*/  .word 0x20002748


            .thumb_func
            rand:
/*0x3594*/      ldr r1, [pc, #0x18] /* data_35b0 */
/*0x3596*/      ldr r2, [pc, #0x1c] /* data_35b4 */
/*0x3598*/      ldr r0, [r1]
/*0x359a*/      muls r0, r2, r0
/*0x359c*/      movw r2, #0x3039
/*0x35a0*/      add r0, r2
/*0x35a2*/      str r0, [r1]
/*0x35a4*/      lsrs r0, r0, #1
/*0x35a6*/      bx lr

            .thumb_func
            srand:
/*0x35a8*/      ldr r1, [pc, #4] /* data_35b0 */
/*0x35aa*/      str r0, [r1]
/*0x35ac*/      bx lr

/*0x35ae*/  .byte 0x00
/*0x35af*/  .byte 0x00

            data_35b0:
/*0x35b0*/  .word 0x20000090
            data_35b4:
/*0x35b4*/  .word 0x41c64e6d


            .thumb_func
            memcpy:
/*0x35b8*/      orr.w r3, r0, r1
/*0x35bc*/      lsls r3, r3, #0x1e
/*0x35be*/      beq jump_35c8
/*0x35c0*/      b jump_35d6
            jump_35c2:
/*0x35c2*/      ldm r1!, {r3}
/*0x35c4*/      .short 0x1f12 /* subs r2, r2, #4 */
/*0x35c6*/      stm r0!, {r3}
            jump_35c8:
/*0x35c8*/      cmp r2, #4
/*0x35ca*/      bhs jump_35c2
/*0x35cc*/      b jump_35d6
            jump_35ce:
/*0x35ce*/      ldrb r3, [r1], #1
/*0x35d2*/      strb r3, [r0], #1
            jump_35d6:
/*0x35d6*/      .short 0x1e52 /* subs r2, r2, #1 */
/*0x35d8*/      bhs jump_35ce
/*0x35da*/      bx lr

            .thumb_func
            _memset:
/*0x35dc*/      uxtb r2, r2     ; r2 = arg3
/*0x35de*/      b jump_35e4
            jump_35e0:
/*0x35e0*/      strb r2, [r0], #1   ; *(arg1++) = r2
            jump_35e4:
/*0x35e4*/      .short 0x1e49 /* subs r1, r1, #1 */
/*0x35e6*/      bhs jump_35e0       ; r1 >= 0 ? jump_35e0 : return
/*0x35e8*/      bx lr

            .thumb_func
            _memzero:
/*0x35ea*/      movs r2, #0
/*0x35ec*/      b _memset

            .thumb_func
            memset:
/*0x35ee*/      push {r4, lr}
/*0x35f0*/      mov r3, r2      ; r3 = arg3 (len)
/*0x35f2*/      mov r2, r1      ; r2 = arg2 (value)
/*0x35f4*/      mov r4, r0      ; r4 = arg1 (dst)
/*0x35f6*/      mov r1, r3      ; r1 = arg3
/*0x35f8*/      bl _memset
/*0x35fc*/      mov r0, r4
/*0x35fe*/      pop {r4, pc}

            .thumb_func
            sram_init:
/*0x3600*/      ldr r4, [pc, #0x18] /* r4 = 0x0000a194 */
/*0x3602*/      ldr r5, [pc, #0x1c] /* r5 = 0x0000a1b4 */
/*0x3604*/      b jump_3614
            jump_3606:
/*0x3606*/      ldr r0, [r4, #0xc]  ; r0 = *(r4+c)
/*0x3608*/      orr r3, r0, #1      ; r3 = r0 | 1
/*0x360c*/      ldm.w r4, {r0, r1, r2} ; r0=*r4; r1=*(r4+4); r2=*(r4+8)
/*0x3610*/      blx r3              ; branch to r3
/*0x3612*/      adds r4, #0x10      ; r4 = r4 + 0x10
            jump_3614:
/*0x3614*/      cmp r4, r5
/*0x3616*/      blo jump_3606       ; r4 < r5 ? jump_3606 : continue
/*0x3618*/      bl start_main

            0x0000a194:
/*0x361c*/  .word 0x0000a194 /* possible pointer */
            0x0000a1b4:
/*0x3620*/  .word 0x0000a1b4 /* possible pointer */

/*0x3624*/      push {r4, r5, r6, lr}
/*0x3626*/      adds r4, r1, r2
            jump_3628:
/*0x3628*/      ldrb r5, [r0], #1
/*0x362c*/      ands r3, r5, #7
/*0x3630*/      bne jump_3636
/*0x3632*/      ldrb r3, [r0], #1
            jump_3636:
/*0x3636*/      asrs r2, r5, #4
/*0x3638*/      bne jump_3648
/*0x363a*/      ldrb r2, [r0], #1
/*0x363e*/      b jump_3648
            jump_3640:
/*0x3640*/      ldrb r6, [r0], #1
/*0x3644*/      strb r6, [r1], #1
            jump_3648:
/*0x3648*/      .short 0x1e5b /* subs r3, r3, #1 */
/*0x364a*/      bne jump_3640
/*0x364c*/      lsls r3, r5, #0x1c
/*0x364e*/      bmi jump_365c
/*0x3650*/      movs r3, #0
            jump_3652:
/*0x3652*/      .short 0x1e52 /* subs r2, r2, #1 */
/*0x3654*/      bmi jump_3672
/*0x3656*/      strb r3, [r1], #1
/*0x365a*/      b jump_3652
            jump_365c:
/*0x365c*/      ldrb r3, [r0], #1
/*0x3660*/      subs r3, r1, r3
/*0x3662*/      .short 0x1c92 /* adds r2, r2, #2 */
/*0x3664*/      b jump_366e
            jump_3666:
/*0x3666*/      ldrb r5, [r3], #1
/*0x366a*/      strb r5, [r1], #1
            jump_366e:
/*0x366e*/      .short 0x1e52 /* subs r2, r2, #1 */
/*0x3670*/      bpl jump_3666
            jump_3672:
/*0x3672*/      cmp r1, r4
/*0x3674*/      blo jump_3628
/*0x3676*/      movs r0, #0
/*0x3678*/      pop {r4, r5, r6, pc}

/*0x367a*/  .byte 0x00
/*0x367b*/  .byte 0x00


            .thumb_func
            afio_set_exti_pin_mux:
/*0x367c*/      push {r4, lr}
/*0x367e*/      movs r2, #0     ; r2 = 0 (assume ESSR0)
/*0x3680*/      cmp r0, #7
/*0x3682*/      bls jump_368a   ; arg1 (exti_num) <= 7 ? jump_368a : continue
/*0x3684*/      movs r2, #1     ; r2 = 1 (ESSR1)
/*0x3686*/      subs r0, #8     ; r0 = arg1 - 8 (number between 0-7)
/*0x3688*/      uxtb r0, r0
            jump_368a:
/*0x368a*/      lsls r3, r2, #2 ; r3 = r2 * 4
/*0x368c*/      ldr r2, [pc, #0x14] /* r2 = AFIO_BASE_36a4 */
/*0x368e*/      add r2, r3      ; r2 = AFIO_BASE + r3
/*0x3690*/      ldr r3, [r2]    ; r3 = *(AFIO_BASE+r3)
/*0x3692*/      lsls r0, r0, #2 ; r0 = r0 * 4
/*0x3694*/      movs r4, #0xf   ; r4 = 0xf
/*0x3696*/      lsls r4, r0     ; r4 = r4 << r0
/*0x3698*/      bics r3, r4     ; r3 = r3 & ~r4
/*0x369a*/      lsls r1, r0     ; r1 = arg2 (value) << r0
/*0x369c*/      orrs r1, r3     ; r1 = r1 | r3
/*0x369e*/      str r1, [r2]
/*0x36a0*/      pop {r4, pc}

/*0x36a2*/  .byte 0x00
/*0x36a3*/  .byte 0x00

            AFIO_BASE_36a4:
/*0x36a4*/  .word 0x40022000


            .thumb_func
            loc_36a8:
/*0x36a8*/      push {r4, lr}
/*0x36aa*/      cmp r0, #2
/*0x36ac*/      bne jump_36c6
/*0x36ae*/      movs r2, #0x40
/*0x36b0*/      movs r1, #0
/*0x36b2*/      ldr r0, [pc, #0x18] /* data_36cc */
/*0x36b4*/      bl call_68e4
/*0x36b8*/      ldr r0, [pc, #0x14] /* data_36d0 */
/*0x36ba*/      movs r1, #0x10
/*0x36bc*/      str r1, [r0, #0x58]
/*0x36be*/      movs r1, #0x40
/*0x36c0*/      str r1, [r0, #0x5c]
/*0x36c2*/      movs r1, #2
/*0x36c4*/      str r1, [r0, #0x50]
            jump_36c6:
/*0x36c6*/      movs r0, #0x4f
/*0x36c8*/      pop {r4, pc}

/*0x36ca*/  .byte 0x00
/*0x36cb*/  .byte 0x00

            data_36cc:
/*0x36cc*/  .word 0x400aa0d0
            data_36d0:
/*0x36d0*/  .word 0x400a8000


            .thumb_func
            loc_36d4:
/*0x36d4*/      push {r0, r1, r2, r3, r4, r5, r6, lr}
/*0x36d6*/      mov r1, sp          ; r1 = sp
/*0x36d8*/      ldr r0, [pc, #0xc0] /* r0 = 0x20000558 */
/*0x36da*/      bl call_3a44
/*0x36de*/      ldrb.w r0, [sp]
/*0x36e2*/      cmp r0, #6
/*0x36e4*/      bls jump_3730
/*0x36e6*/      ldr r5, [pc, #0xb8] /* 0x20000050 */
/*0x36e8*/      ldr r1, [r5]
/*0x36ea*/      lsrs r1, r1, #0x1e
/*0x36ec*/      bne jump_371e
/*0x36ee*/      ldr r1, [pc, #0xb4] /* 0x20000ad0 */
/*0x36f0*/      adds r4, r1, #1
/*0x36f2*/      strb r0, [r1]
/*0x36f4*/      movs r0, #0x3f
/*0x36f6*/      strb.w r0, [sp]
/*0x36fa*/      b jump_3706
            jump_36fc:
/*0x36fc*/      mov r1, r4
/*0x36fe*/      .short 0x1c64 /* adds r4, r4, #1 */
/*0x3700*/      ldr r0, [pc, #0x98] /* 0x20000558 */
/*0x3702*/      bl call_3a44
            jump_3706:
/*0x3706*/      ldrb.w r0, [sp]
/*0x370a*/      subs r1, r0, #1
/*0x370c*/      strb.w r1, [sp]
/*0x3710*/      bhs jump_36fc
/*0x3712*/      ldr r0, [r5]
/*0x3714*/      bic r0, r0, #0xc0000000
/*0x3718*/      add.w r0, r0, #0x40000000
/*0x371c*/      str r0, [r5]
            jump_371e:
/*0x371e*/      ldr r0, [pc, #0x7c] /* 0x20000558 */
/*0x3720*/      bl call_3a30
/*0x3724*/      ldr r0, [pc, #0x74] /* 0x20000558 */
/*0x3726*/      movs r1, #0x46
/*0x3728*/      subs r0, #0x10
/*0x372a*/      bl call_3a6c
/*0x372e*/      pop {r0, r1, r2, r3, r4, r5, r6, pc}
            jump_3730:
/*0x3730*/      strb.w r0, [sp, #4]
/*0x3734*/      movs r0, #0xb
/*0x3736*/      add.w r4, sp, #5
/*0x373a*/      strb.w r0, [sp]
/*0x373e*/      b jump_374a
            jump_3740:
/*0x3740*/      mov r1, r4
/*0x3742*/      .short 0x1c64 /* adds r4, r4, #1 */
/*0x3744*/      ldr r0, [pc, #0x54] /* 0x20000558 */
/*0x3746*/      bl call_3a44
            jump_374a:
/*0x374a*/      ldrb.w r0, [sp]
/*0x374e*/      subs r1, r0, #1
/*0x3750*/      strb.w r1, [sp]
/*0x3754*/      bhs jump_3740
/*0x3756*/      mvn r0, #1
/*0x375a*/      bl call_7134
/*0x375e*/      ldrb.w r3, [sp, #4]
/*0x3762*/      ldr r4, [pc, #0x44] /* 0x00009aa4 */
/*0x3764*/      ldrd r1, r2, [sp, #8]
/*0x3768*/      ldr.w r3, [r4, r3, lsl #2]
/*0x376c*/      ldrb.w r0, [sp, #5]
/*0x3770*/      blx r3
/*0x3772*/      mov r1, r0
/*0x3774*/      ldr r0, [pc, #0x24] /* 0x20000558 */
/*0x3776*/      subs r0, #0x10
/*0x3778*/      bl call_3a6c
/*0x377c*/      movs r0, #0x34
/*0x377e*/      strb.w r0, [sp]
/*0x3782*/      b jump_378c
            jump_3784:
/*0x3784*/      add r1, sp, #4
/*0x3786*/      ldr r0, [pc, #0x14] /* 0x20000558 */
/*0x3788*/      bl call_3a44
            jump_378c:
/*0x378c*/      ldrb.w r0, [sp]
/*0x3790*/      subs r1, r0, #1
/*0x3792*/      strb.w r1, [sp]
/*0x3796*/      bhs jump_3784
/*0x3798*/      pop {r0, r1, r2, r3, r4, r5, r6, pc}

/*0x379a*/  .byte 0x00
/*0x379b*/  .byte 0x00

            data_379c:
/*0x379c*/  .word 0x20000558
            data_37a0:
/*0x37a0*/  .word 0x20000050
            data_37a4:
/*0x37a4*/  .word 0x20000ad0
            data_37a8:
/*0x37a8*/  .word 0x00009aa4 /* possible pointer */


            .thumb_func
            call_37ac:
/*0x37ac*/      ldr r1, [pc, #0x1c] /* r1 = 0x20000968 */
/*0x37ae*/      push {r4, lr}
/*0x37b0*/      movs r2, #0x44      ; r2 = 0x44
/*0x37b2*/      sub.w r0, r1, #0x420 ; r0 = 0x20000548
/*0x37b6*/      bl call_3a38
/*0x37ba*/      ldr r1, [pc, #0x14] /* r1 = 0x20000568 */
/*0x37bc*/      pop.w {r4, lr}
/*0x37c0*/      mov.w r2, #0x400    ; r2 = 0x400
/*0x37c4*/      sub.w r0, r1, #0x10 ; r0 = 0x20000558
/*0x37c8*/      b.w call_3a38

            data_37cc:
/*0x37cc*/  .word 0x20000968
            data_37d0:
/*0x37d0*/  .word 0x20000568


            .thumb_func
            loc_37d4:
/*0x37d4*/      push {r4, lr}
/*0x37d6*/      movs r0, #0
/*0x37d8*/      bl call_691c
/*0x37dc*/      movs r0, #1
/*0x37de*/      pop {r4, pc}

            .thumb_func
            bftm0_intr:
/*0x37e0*/      push {r4, lr}
/*0x37e2*/      ldr r0, [pc, #0x80] /* BFTM0_BASE_3864 */
/*0x37e4*/      bl bftm_clear_compare_match_interrupt
/*0x37e8*/      bl call_5208
/*0x37ec*/      ldr r0, [pc, #0x78] /* data_3868 */
/*0x37ee*/      ldr r1, [r0]
/*0x37f0*/      cbz r1, jump_37f8
/*0x37f2*/      ldr r1, [r0]
/*0x37f4*/      .short 0x1e49 /* subs r1, r1, #1 */
/*0x37f6*/      str r1, [r0]
            jump_37f8:
/*0x37f8*/      ldr r1, [r0, #4]
/*0x37fa*/      cbz r1, jump_3802
/*0x37fc*/      ldr r1, [r0, #4]
/*0x37fe*/      .short 0x1e49 /* subs r1, r1, #1 */
/*0x3800*/      str r1, [r0, #4]
            jump_3802:
/*0x3802*/      ldr r1, [pc, #0x68] /* data_386c */
/*0x3804*/      ldrh r0, [r1]
/*0x3806*/      cbz r0, jump_380c
/*0x3808*/      .short 0x1e40 /* subs r0, r0, #1 */
/*0x380a*/      strh r0, [r1]
            jump_380c:
/*0x380c*/      ldr r1, [pc, #0x60] /* data_3870 */
/*0x380e*/      ldrh r0, [r1]
/*0x3810*/      cbz r0, jump_3816
/*0x3812*/      .short 0x1e40 /* subs r0, r0, #1 */
/*0x3814*/      strh r0, [r1]
            jump_3816:
/*0x3816*/      ldr r1, [pc, #0x5c] /* data_3874 */
/*0x3818*/      ldrh r0, [r1]
/*0x381a*/      cmp r0, #1
/*0x381c*/      bls jump_3822
/*0x381e*/      .short 0x1e40 /* subs r0, r0, #1 */
/*0x3820*/      strh r0, [r1]
            jump_3822:
/*0x3822*/      ldr r1, [pc, #0x54] /* data_3878 */
/*0x3824*/      ldrh r0, [r1]
/*0x3826*/      cbz r0, jump_382c
/*0x3828*/      .short 0x1e40 /* subs r0, r0, #1 */
/*0x382a*/      strh r0, [r1]
            jump_382c:
/*0x382c*/      ldr r1, [pc, #0x4c] /* data_387c */
/*0x382e*/      ldr r0, [r1]
/*0x3830*/      cbz r0, jump_3838
/*0x3832*/      ldr r0, [r1]
/*0x3834*/      .short 0x1e40 /* subs r0, r0, #1 */
/*0x3836*/      str r0, [r1]
            jump_3838:
/*0x3838*/      ldr r1, [pc, #0x44] /* data_3880 */
/*0x383a*/      ldrh r0, [r1]
/*0x383c*/      cbz r0, jump_3842
/*0x383e*/      .short 0x1e40 /* subs r0, r0, #1 */
/*0x3840*/      strh r0, [r1]
            jump_3842:
/*0x3842*/      ldr r0, [pc, #0x40] /* data_3884 */
/*0x3844*/      ldrb r1, [r0]
/*0x3846*/      .short 0x1c49 /* adds r1, r1, #1 */
/*0x3848*/      strb r1, [r0]
/*0x384a*/      ldr r0, [pc, #0x3c] /* data_3888 */
/*0x384c*/      ldrh r1, [r0]
/*0x384e*/      cmp r1, #0
/*0x3850*/      beq jump_3860
/*0x3852*/      ldrh r1, [r0]
/*0x3854*/      cmp.w r1, #0xff00
/*0x3858*/      bhs jump_3860
/*0x385a*/      ldrh r1, [r0]
/*0x385c*/      .short 0x1c49 /* adds r1, r1, #1 */
/*0x385e*/      strh r1, [r0]
            jump_3860:
/*0x3860*/      pop {r4, pc}

/*0x3862*/  .byte 0x00
/*0x3863*/  .byte 0x00

            BFTM0_BASE_3864:
/*0x3864*/  .word 0x40076000
            data_3868:
/*0x3868*/  .word 0x200009ac
            data_386c:
/*0x386c*/  .word 0x2000007e
            data_3870:
/*0x3870*/  .word 0x20000080
            data_3874:
/*0x3874*/  .word 0x20000000
            data_3878:
/*0x3878*/  .word 0x20000002
            data_387c:
/*0x387c*/  .word 0x20000068
            data_3880:
/*0x3880*/  .word 0x20000054
            data_3884:
/*0x3884*/  .word 0x20000048
            data_3888:
/*0x3888*/  .word 0x20000014


            .thumb_func
            bftm1_intr:
/*0x388c*/      push {r4, r5, r6, lr}
/*0x388e*/      ldr r5, [pc, #0x54] /* r5 = 0x20000016 */
/*0x3890*/      ldr r0, [pc, #0x4c] /* r0 = led_gpio_map */
                ; get Qn from 0x20000017
/*0x3892*/      ldrb r1, [r5, #1]   ; r1 = *(uint8_t*)0x20000017
                ; find Qn gpio from led_gpio_map
/*0x3894*/      add.w r4, r0, r1, lsl #3 ; r4 = led_gpio_map + (r1*8)
/*0x3898*/      ldr r0, [pc, #0x4c] /* r0 = BFTM1_BASE_38e8 */
                ; clear BFTM1 compare match interrupt
/*0x389a*/      bl bftm_clear_compare_match_interrupt
/*0x389e*/      bl gpio_config_led_groups
/*0x38a2*/      movs r0, #0xa       ; r0 = 0xa
/*0x38a4*/      bl sleep
/*0x38a8*/      movs r0, #2         ; r0 = 2
                ; Overall latch instruction
/*0x38aa*/      bl mbia_send_instruction
/*0x38ae*/      ldr r1, [pc, #0x3c] /* r1 = GPIOA_BASE_38ec */
/*0x38b0*/      mov.w r0, #0x8000   ; r0 = 0x8000
/*0x38b4*/      str r0, [r1, #0x24] ; *(GPIOA.PASRR) = 0x8000
/*0x38b6*/      ldrh r0, [r4, #4]   ; r0 = *(uint16_t*)(r4+4)
/*0x38b8*/      movs r2, #1         ; (out) r2 = 1
/*0x38ba*/      uxth r1, r0         ; (pin) r1 = r0
/*0x38bc*/      ldr r0, [r4]        ; (gpio_base) r0 = *r4
                ; set pin direction to out
/*0x38be*/      bl gpio_set_pin_direction
/*0x38c2*/      ldrh r0, [r4, #4]   ; r0 = *(uint16_t*)(r4+4)
/*0x38c4*/      uxth r1, r0         ; (pin) r1 = r0
/*0x38c6*/      ldr r0, [r4]        ; (gpio_base) r0 = *r4
/*0x38c8*/      bl gpio_reset_pin
/*0x38cc*/      ldrb r0, [r5, #1]
/*0x38ce*/      .short 0x1c40 /* adds r0, r0, #1 */
/*0x38d0*/      and r0, r0, #7
/*0x38d4*/      strb r0, [r5, #1]
/*0x38d6*/      pop.w {r4, r5, r6, lr}
/*0x38da*/      b.w call_6f50

/*0x38de*/  .byte 0x00
/*0x38df*/  .byte 0x00

            data_38e0:
/*0x38e0*/  .word led_gpio_map
            data_38e4:
/*0x38e4*/  .word 0x20000016
            BFTM1_BASE_38e8:
/*0x38e8*/  .word 0x40077000
            GPIOA_BASE_38ec:
/*0x38ec*/  .word 0x400b0000


            .thumb_func
            bftm_clear_compare_match_interrupt:
/*0x38f0*/      ldr r1, [r0, #4]    ; r1 = *(BFTM.MSR)
/*0x38f2*/      bic r1, r1, #1      ; r1 = r1 & ~1
/*0x38f6*/      str r1, [r0, #4]    ; (BFTM.MSR) = r1
/*0x38f8*/      dsb sy
/*0x38fc*/      bx lr

            .thumb_func
            bftm_enable_counter:
/*0x38fe*/      cmp r1, #0
/*0x3900*/      ldr r1, [r0]    ; r1 = *(bftm_base)
/*0x3902*/      beq jump_390a   ; arg2 == 0 ? jump_390a : continue
/*0x3904*/      orr r1, r1, #4  ; r1 = r1 | 4
/*0x3908*/      b jump_390e
            jump_390a:
/*0x390a*/      bic r1, r1, #4  ; r1 = r1 & ~4
            jump_390e:
/*0x390e*/      str r1, [r0]    ; *(bftm_base) = r1
/*0x3910*/      bx lr

            .thumb_func
            bftm_enable_compare_match:
/*0x3912*/      cmp r1, #0
/*0x3914*/      ldr r1, [r0]    ; r1 = *(bftm_base)
/*0x3916*/      beq jump_391e   ; arg2 == 0 ? jump_391e : continue
/*0x3918*/      orr r1, r1, #1  ; r1 = r1 | 1
/*0x391c*/      b jump_3922
            jump_391e:
/*0x391e*/      bic r1, r1, #1  ; r1 = r1 & ~1
            jump_3922:
/*0x3922*/      str r1, [r0]    ; *(bftm_base) = r1
/*0x3924*/      bx lr

            .thumb_func
            bftm_set_compare_value:
/*0x3926*/      str r1, [r0, #0xc]
/*0x3928*/      bx lr

            .thumb_func
            bftm_set_counter:
/*0x392a*/      str r1, [r0, #8]
/*0x392c*/      bx lr

/*0x392e*/  .byte 0x00
/*0x392f*/  .byte 0x00


            .thumb_func
            AFIO_GPxConfig:
/*0x3930*/      lsls r0, r0, #3
/*0x3932*/      lsrs r3, r1, #3
/*0x3934*/      add.w r0, r0, r3, lsl #2
/*0x3938*/      ldr r3, [pc, #0x18] /* r3 = AFIO.GPACFGR0_3954 */
/*0x393a*/      push {r4, lr}
/*0x393c*/      add r0, r3
/*0x393e*/      lsls r1, r1, #0x1d
/*0x3940*/      ldr r3, [r0]
/*0x3942*/      lsrs r1, r1, #0x1b
/*0x3944*/      movs r4, #0xf
/*0x3946*/      lsls r4, r1
/*0x3948*/      bics r3, r4
/*0x394a*/      lsls r2, r1
/*0x394c*/      orrs r3, r2
/*0x394e*/      str r3, [r0]
/*0x3950*/      pop {r4, pc}

/*0x3952*/  .byte 0x00
/*0x3953*/  .byte 0x00

            AFIO.GPACFGR0_3954:
/*0x3954*/  .word 0x40022020


            .thumb_func
            sleep:
/*0x3958*/      add.w r0, r0, r0, lsl #2
/*0x395c*/      lsls r0, r0, #2
            jump_395e:
/*0x395e*/      .short 0x1e40 /* subs r0, r0, #1 */
/*0x3960*/      bhs jump_395e
/*0x3962*/      bx lr

            .thumb_func
            perip_clock_config:
/*0x3964*/      push.w {r4, r5, r6, r7, r8, lr}
/*0x3968*/      movs r1, #1         ; (enable) r1 = 1
/*0x396a*/      lsls r5, r1, #0xe   ; r5 = 0x4000
/*0x396c*/      mov r0, r5          ; (bits) r0 = 0x4000
                ; enable AFIO clock
/*0x396e*/      bl ckcu_set_APBCCR0
/*0x3972*/      movs r1, #1         ; r1 = 1
/*0x3974*/      lsls r4, r1, #0x10  ; r4 = 0x10000
/*0x3976*/      mov r0, r4          ; r0 = 0x10000
                ; enable GPIO Port A clock
/*0x3978*/      bl ckcu_set_AHBCCR
/*0x397c*/      ldr r6, [pc, #0x90] /* r6 = GPIOA_BASE_3a10 */
/*0x397e*/      movs r2, #0         ; r2 = 0
/*0x3980*/      mov r1, r5          ; r1 = 0x4000
/*0x3982*/      mov r0, r6          ; r0 = GPIOA_BASE
                ; disable input on A14/MBIA_DCLK
/*0x3984*/      bl gpio_set_pin_input_enable
/*0x3988*/      asrs r7, r4, #1     ; r7 = 0x8000
/*0x398a*/      movs r2, #0         ; r2 = 0
/*0x398c*/      mov r1, r7          ; r1 = 0x8000
/*0x398e*/      mov r0, r6          ; r0 = GPIOA_BASE
                ; diable input on A15/MBIA_LE
/*0x3990*/      bl gpio_set_pin_input_enable
/*0x3994*/      movs r2, #2         ; r2 = 2
/*0x3996*/      mov r1, r5          ; r1 = 0x4000
/*0x3998*/      mov r0, r6          ; r0 = GPIOA_BASE
                ; no pull resistor on A14/MBIA_DCLK
/*0x399a*/      bl gpio_set_pin_pull_up_down_disable
/*0x399e*/      movs r2, #2         ; r2 = 2
/*0x39a0*/      mov r1, r7          ; r1 = 0x8000
/*0x39a2*/      mov r0, r6          ; r0 = GPIOA_BASE
                ; no pull resistor on A15/MBIA_LE
/*0x39a4*/      bl gpio_set_pin_pull_up_down_disable
/*0x39a8*/      asrs r5, r4, #5     ; r5 = 0x800
/*0x39aa*/      movs r2, #0         ; r2 = 0
/*0x39ac*/      mov r1, r5          ; r1 = 0x800
/*0x39ae*/      mov r0, r6          ; r0 = GPIOA_BASE
                ; disable input on A11/?
/*0x39b0*/      bl gpio_set_pin_input_enable
/*0x39b4*/      movs r2, #2         ; r2 = 2
/*0x39b6*/      mov r1, r5          ; r1 = 0x800
/*0x39b8*/      mov r0, r6          ; r0 = GPIOA_BASE
                ; no pull resistor on A11/?
/*0x39ba*/      bl gpio_set_pin_pull_up_down_disable
/*0x39be*/      movs r2, #1         ; r2 = 1 (AF1/PA11)
/*0x39c0*/      movs r1, #0xb       ; r1 = 0xb (CFG11)
/*0x39c2*/      movs r0, #0         ; r0 = 0 (GPIOA)
/*0x39c4*/      bl AFIO_GPxConfig
/*0x39c8*/      movs r2, #1         ; r2 = 1 (AF1/PC13)
/*0x39ca*/      movs r1, #0xd       ; r1 = 0xd (CFG13)
/*0x39cc*/      movs r0, #2         ; r0 = 2 (GPIOC)
/*0x39ce*/      bl AFIO_GPxConfig
/*0x39d2*/      movs r2, #1         ; r2 = 1 (AF1/PC14)
/*0x39d4*/      movs r1, #0xe       ; r1 = 0xe (CFG14)
/*0x39d6*/      movs r0, #2         ; r0 = 2 (GPIOC)
/*0x39d8*/      bl AFIO_GPxConfig
/*0x39dc*/      movs r2, #1         ; r2 = 1 (AF1/PC15)
/*0x39de*/      movs r1, #0xf       ; r1 = 0xf (CFG15)
/*0x39e0*/      movs r0, #2         ; r0 = 2 (GPIOC)
/*0x39e2*/      bl AFIO_GPxConfig
/*0x39e6*/      ldr r0, [pc, #0x2c] /* r0 = CKCU_RSTCU_BASE_3a14 */
/*0x39e8*/      ldr r0, [r0, #4]    ; r0 = *(CKCU.GCCR)
/*0x39ea*/      lsls r0, r0, #0x15  ; r0 = r0 << 15
/*0x39ec*/      bmi jump_3a02       ; *(GKCU.CKMEN) ? jump_3a02 : continue
                ; no external clock
/*0x39ee*/      movs r2, #1         ; r2 = 1 (AF1/PB14)
/*0x39f0*/      movs r1, #0xe       ; r1 = 14 (CFG14)
/*0x39f2*/      mov r0, r2          ; r0 = 1 (PORTB)
/*0x39f4*/      bl AFIO_GPxConfig
/*0x39f8*/      movs r2, #1         ; r2 = 1 (AF1/PB15)
/*0x39fa*/      movs r1, #0xf       ; r1 = 15 (CFG15)
/*0x39fc*/      mov r0, r2          ; r0 = 1 (PORTB)
/*0x39fe*/      bl AFIO_GPxConfig
            jump_3a02:
/*0x3a02*/      movs r1, #0         ; r1 = 0
/*0x3a04*/      mov r0, r4          ; r0 = 0x10000
                ; disable GPIO Port A clock
/*0x3a06*/      bl ckcu_set_AHBCCR
/*0x3a0a*/      movs r0, #1         ; return 1
/*0x3a0c*/      pop.w {r4, r5, r6, r7, r8, pc}

            GPIOA_BASE_3a10:
/*0x3a10*/  .word 0x400b0000
            CKCU_RSTCU_BASE_3a14:
/*0x3a14*/  .word 0x40088000

            usb_enable_dp_pull_up:
/*0x3a18*/      push {r4, lr}
/*0x3a1a*/      movs r0, #1
                ; enable DP pull up
/*0x3a1c*/      bl usb_set_dp_pull_up
/*0x3a20*/      pop.w {r4, lr}
/*0x3a24*/      movs r0, #0xfa
/*0x3a26*/      b.w sleep

            .thumb_func
            usb_disable_dp_pull_up:
/*0x3a2a*/      movs r0, #0
                ; disable DP pull up
/*0x3a2c*/      b.w usb_set_dp_pull_up

            .thumb_func
            call_3a30:
/*0x3a30*/      movs r1, #0         ; r1 = 0
/*0x3a32*/      str r1, [r0, #4]    ; *(arg1+4) = 0
/*0x3a34*/      str r1, [r0]        ; *(arg1) = 0
/*0x3a36*/      bx lr

            .thumb_func
            call_3a38:
/*0x3a38*/      movs r3, #0             ; r3 = 0
/*0x3a3a*/      str r3, [r0]            ; *arg1 = 0
/*0x3a3c*/      str r3, [r0, #4]        ; *(arg1+4) = 0
/*0x3a3e*/      strd r1, r2, [r0, #8]   ; *(arg1+8) = arg2; *(arg1+c) = arg3
/*0x3a42*/      bx lr

            .thumb_func
            call_3a44:
/*0x3a44*/      push {r4, lr}
/*0x3a46*/      ldr r4, [r0, #4]    ; r4 = *(arg1+4)
/*0x3a48*/      movs r2, #0         ; r2 = 0
/*0x3a4a*/      ldr r3, [r0]        ; r3 = *(arg1)
/*0x3a4c*/      cmp r4, r3
/*0x3a4e*/      beq jump_3a68       ; r4 == r3 ? jump_3a68 : continue
/*0x3a50*/      ldr r2, [r0, #8]    ; r2 = *(arg1+8)
/*0x3a52*/      ldrb r2, [r2, r3]   ; r2 = *(uint8_t*)(r2+r3)
/*0x3a54*/      strb r2, [r1]       ; *(uint8_t*)arg2 = r2
/*0x3a56*/      ldr r1, [r0]        ; r1 = *arg1
/*0x3a58*/      ldr r2, [r0, #0xc]  ; r2 = *(arg1+0xc)
/*0x3a5a*/      .short 0x1c49 /* adds r1, r1, #1 */ ; r1 = r1 + 1
/*0x3a5c*/      udiv r3, r1, r2     ; r3 = r1 / r2
/*0x3a60*/      mls r1, r2, r3, r1  ; r1 = r1 - (r2 * r3)
/*0x3a64*/      movs r2, #1         ; r2 = 1
/*0x3a66*/      str r1, [r0]        ; *(arg1) = r1
            jump_3a68:
/*0x3a68*/      mov r0, r2          ; r0 = r2
/*0x3a6a*/      pop {r4, pc}

            .thumb_func
            call_3a6c:
/*0x3a6c*/      push {r4, r5, lr}
/*0x3a6e*/      ldr r3, [r0, #4]
/*0x3a70*/      movs r2, #0
/*0x3a72*/      ldr r4, [r0, #0xc]
/*0x3a74*/      .short 0x1c5b /* adds r3, r3, #1 */
/*0x3a76*/      udiv r5, r3, r4
/*0x3a7a*/      mls r3, r4, r5, r3
/*0x3a7e*/      ldr r4, [r0]
/*0x3a80*/      cmp r3, r4
/*0x3a82*/      beq jump_3a9a
/*0x3a84*/      ldr r2, [r0, #4]
/*0x3a86*/      ldr r3, [r0, #8]
/*0x3a88*/      strb r1, [r3, r2]
/*0x3a8a*/      ldr r1, [r0, #0xc]
/*0x3a8c*/      .short 0x1c52 /* adds r2, r2, #1 */
/*0x3a8e*/      udiv r3, r2, r1
/*0x3a92*/      mls r1, r1, r3, r2
/*0x3a96*/      str r1, [r0, #4]
/*0x3a98*/      movs r2, #1
            jump_3a9a:
/*0x3a9a*/      mov r0, r2
/*0x3a9c*/      pop {r4, r5, pc}

            .thumb_func
            loc_3a9e:
/*0x3a9e*/      ldr r1, [r0, #4]    ; r1 = *(arg1+4)
/*0x3aa0*/      ldr r0, [r0]        ; r0 = *(arg1)
/*0x3aa2*/      cmp r1, r0
/*0x3aa4*/      bne jump_3aaa       ; r1 != r0 ? jump_3aaa : continue
/*0x3aa6*/      movs r0, #1         ; r0 = 1
/*0x3aa8*/      bx lr
            jump_3aaa:
/*0x3aaa*/      movs r0, #0         ; r0 = 0
/*0x3aac*/      bx lr

/*0x3aae*/  .byte 0x00
/*0x3aaf*/  .byte 0x00


            .thumb_func
            ckcu_set_AHBCCR:
            ; r0 = bits
            ; r1 = enable
/*0x3ab0*/      ldr r2, [pc, #0x10] /* r2 = CKCU_RSTCU_BASE_3ac4 */
/*0x3ab2*/      cmp r1, #1
/*0x3ab4*/      ldr r1, [r2, #0x24] ; r1 = *(CKCU.AHBCCR)
/*0x3ab6*/      beq jump_3abe       ; arg2 == 1 ? jump_3abe : continue
/*0x3ab8*/      bics r1, r0         ; r1 = r1 & ~r0
            jump_3aba:
/*0x3aba*/      str r1, [r2, #0x24] ; *(CKCU.AHBCCR) = r1
/*0x3abc*/      bx lr               ; return
            jump_3abe:
/*0x3abe*/      orrs r1, r0         ; r1 = r1 | r0
/*0x3ac0*/      b jump_3aba

/*0x3ac2*/  .byte 0x00
/*0x3ac3*/  .byte 0x00

            CKCU_RSTCU_BASE_3ac4:
/*0x3ac4*/  .word 0x40088000


            .thumb_func
            ckcu_set_APBCCR0:
/*0x3ac8*/      ldr r2, [pc, #0x10] /* CKCU_RSTCU_BASE_3adc */
/*0x3aca*/      cmp r1, #1
/*0x3acc*/      ldr r1, [r2, #0x2c]
/*0x3ace*/      beq jump_3ad6
/*0x3ad0*/      bics r1, r0
            jump_3ad2:
/*0x3ad2*/      str r1, [r2, #0x2c]
/*0x3ad4*/      bx lr
            jump_3ad6:
/*0x3ad6*/      orrs r1, r0
/*0x3ad8*/      b jump_3ad2

/*0x3ada*/  .byte 0x00
/*0x3adb*/  .byte 0x00

            CKCU_RSTCU_BASE_3adc:
/*0x3adc*/  .word 0x40088000


            .thumb_func
            call_ckcu_set_APBCCR1:
/*0xckcu_set_APBCCR1*/      ldr r2, [pc, #0x10] /* CKCU_RSTCU_BASE_3af4 */
/*0x3ae2*/      cmp r1, #1
/*0x3ae4*/      ldr r1, [r2, #0x30] ; r1 = *(CKCU.APBCCR1)
/*0x3ae6*/      beq jump_3aee       ; r1 == 1 ? jump_3aee : continue
/*0x3ae8*/      bics r1, r0         ; r1 = r1 & ~r0
            jump_3aea:
/*0x3aea*/      str r1, [r2, #0x30] *(CKCU.APBCCR1) = r1
/*0x3aec*/      bx lr
            jump_3aee:
/*0x3aee*/      orrs r1, r0
/*0x3af0*/      b jump_3aea

/*0x3af2*/  .byte 0x00
/*0x3af3*/  .byte 0x00

            CKCU_RSTCU_BASE_3af4:
/*0x3af4*/  .word 0x40088000


            .thumb_func
            ckcu_set_CKOUT_source:
/*0x3af8*/      ldr r1, [pc, #0xc] /* r1 = CKCU_RSTCU_BASE_3b08 */
/*0x3afa*/      ldr r2, [r1]        ; r2 = *CKCU.GCFGR
/*0x3afc*/      ldrb r0, [r0]       ; r0 = *(uint8_t*)arg1
/*0x3afe*/      bic r2, r2, #7      ; r2 = r2 & ~7
/*0x3b02*/      orrs r2, r0         ; r2 = r2 | r0
/*0x3b04*/      str r2, [r1]
/*0x3b06*/      bx lr

            CKCU_RSTCU_BASE_3b08:
/*0x3b08*/  .word 0x40088000


            .thumb_func
            ckcu_set_ref_clk_prescaler:
/*0x3b0c*/      ldr r1, [pc, #0xc] /* r1 = CKCU_RSTCU_BASE_3b1c */
/*0x3b0e*/      ldr r2, [r1]        ; r2 = *CKCU.GCFGR
/*0x3b10*/      bic r2, r2, #0xf800 ; r2 = r2 & ~0xf800
/*0x3b14*/      orr.w r0, r2, r0, lsl #11 ; r0 = r2 | (arg1 << 11)
/*0x3b18*/      str r0, [r1]
/*0x3b1a*/      bx lr

            CKCU_RSTCU_BASE_3b1c:
/*0x3b1c*/  .word 0x40088000


            .thumb_func
            ckcu_set_usb_clk_prescaler:
/*0x3b20*/      ldr r1, [pc, #0xc] /* r1 = CKCU_RSTCU_BASE_3b30 */
/*0x3b22*/      ldr r2, [r1]        ; r2 = *(CKCU.GCFGR)
/*0x3b24*/      bic r2, r2, #0xc00000   ; r2 = r2 & ~(0xc00000)
/*0x3b28*/      orr.w r0, r2, r0, lsl #22 ; r0 = r2 | (r0 << 22)
/*0x3b2c*/      str r0, [r1]        ; *(CKCU.GCFGR) = r0
/*0x3b2e*/      bx lr

            CKCU_RSTCU_BASE_3b30:
/*0x3b30*/  .word 0x40088000


            .thumb_func
            call_3b34:
/*0x3b34*/      push {r4, r5, r6, lr}
/*0x3b36*/      mov r5, r0
/*0x3b38*/      ldr r0, [pc, #0x28] /* data_3b64 */
/*0x3b3a*/      mov r4, r2
/*0x3b3c*/      mov r2, r1
/*0x3b3e*/      ldrb r0, [r0, #2]
/*0x3b40*/      cmp r0, #0
/*0x3b42*/      beq jump_3b60
/*0x3b44*/      mov r1, r3
/*0x3b46*/      mov r0, r2
/*0x3b48*/      bl call_85f0
/*0x3b4c*/      mov r1, r0
/*0x3b4e*/      movw r0, #0xffff
/*0x3b52*/      and.w r2, r0, r4, lsl #2
/*0x3b56*/      mov r0, r5
/*0x3b58*/      pop.w {r4, r5, r6, lr}
/*0x3b5c*/      b.w spi_flash_cmd_read_data
            jump_3b60:
/*0x3b60*/      pop {r4, r5, r6, pc}

/*0x3b62*/  .byte 0x00
/*0x3b63*/  .byte 0x00

            data_3b64:
/*0x3b64*/  .word 0x20000c90


            .thumb_func
            call_3b68:
/*0x3b68*/      mov r3, r1
/*0x3b6a*/      ldr r1, [pc, #0x2c] /* data_3b98 */
/*0x3b6c*/      push {r4, lr}
/*0x3b6e*/      ldrb r1, [r1, #2]
/*0x3b70*/      cmp r1, #0
/*0x3b72*/      beq jump_3b94
/*0x3b74*/      movs r1, #0
/*0x3b76*/      bl call_85f0
/*0x3b7a*/      mov r1, r0
/*0x3b7c*/      ldr r0, [pc, #0x1c] /* data_3b9c */
/*0x3b7e*/      mov.w r2, #0x320
/*0x3b82*/      cbz r3, jump_3b8c
/*0x3b84*/      pop.w {r4, lr}
/*0x3b88*/      b.w jump_860c
            jump_3b8c:
/*0x3b8c*/      pop.w {r4, lr}
/*0x3b90*/      b.w spi_flash_cmd_read_data
            jump_3b94:
/*0x3b94*/      pop {r4, pc}

/*0x3b96*/  .byte 0x00
/*0x3b97*/  .byte 0x00

            data_3b98:
/*0x3b98*/  .word 0x20000c90
            data_3b9c:
/*0x3b9c*/  .word 0x20001764


            .thumb_func
            call_3ba0:
/*0x3ba0*/      push {r4, r5, r6, lr}
/*0x3ba2*/      mov r4, r0
/*0x3ba4*/      ldr r0, [pc, #0x2c] /* data_3bd4 */
/*0x3ba6*/      mov r5, r2
/*0x3ba8*/      mov r2, r1
/*0x3baa*/      ldrb r0, [r0, #2]
/*0x3bac*/      cmp r0, #0
/*0x3bae*/      beq jump_3bd0
/*0x3bb0*/      mov r1, r3
/*0x3bb2*/      mov r0, r2
/*0x3bb4*/      bl call_85f0
/*0x3bb8*/      mov r1, r0
/*0x3bba*/      lsls r2, r5, #2
/*0x3bbc*/      mov r0, r4
/*0x3bbe*/      cbz r3, jump_3bc8
/*0x3bc0*/      pop.w {r4, r5, r6, lr}
/*0x3bc4*/      b.w jump_4374
            jump_3bc8:
/*0x3bc8*/      pop.w {r4, r5, r6, lr}
/*0x3bcc*/      b.w jump_860c
            jump_3bd0:
/*0x3bd0*/      pop {r4, r5, r6, pc}

/*0x3bd2*/  .byte 0x00
/*0x3bd3*/  .byte 0x00

            data_3bd4:
/*0x3bd4*/  .word 0x20000c90


            .thumb_func
            call_3bd8:
/*0x3bd8*/      push {r3, r4, r5, lr}
/*0x3bda*/      mov r5, r0
/*0x3bdc*/      movs r2, #2
/*0x3bde*/      movs r1, #0
/*0x3be0*/      mov r0, sp
/*0x3be2*/      bl spi_flash_cmd_read_data
/*0x3be6*/      ldrh.w r1, [sp]
/*0x3bea*/      movw r4, #0x8002
/*0x3bee*/      cmp r1, r4
/*0x3bf0*/      beq jump_3c12
/*0x3bf2*/      cbz r5, jump_3c0e
/*0x3bf4*/      ldr r0, [pc, #0x20] /* data_3c18 */
/*0x3bf6*/      ldrb r0, [r0, #2]
/*0x3bf8*/      bl call_3d00
/*0x3bfc*/      movs r2, #2
/*0x3bfe*/      movs r1, #0
/*0x3c00*/      mov r0, sp
/*0x3c02*/      bl spi_flash_cmd_read_data
/*0x3c06*/      ldrh.w r0, [sp]
/*0x3c0a*/      cmp r0, r4
/*0x3c0c*/      beq jump_3c12
            jump_3c0e:
/*0x3c0e*/      movs r0, #0
/*0x3c10*/      pop {r3, r4, r5, pc}
            jump_3c12:
/*0x3c12*/      movs r0, #1
/*0x3c14*/      pop {r3, r4, r5, pc}

/*0x3c16*/  .byte 0x00
/*0x3c17*/  .byte 0x00

            data_3c18:
/*0x3c18*/  .word 0x20000c90


            .thumb_func
            call_3c1c:
/*0x3c1c*/      push {r4, r5, r6, lr}
/*0x3c1e*/      mov r4, r0          ; r4 = arg1
/*0x3c20*/      movs r2, #0xa4      ; (len) r2 = 0xa4
/*0x3c22*/      movs r1, #0         ; (addr) r1 = 0
/*0x3c24*/      ldr r0, [pc, #0x74] /* (dst) r0 = 0x20000c90 */
                ; read 0xa4 bytes of flash starting at 0x0 to 0x20000c90
/*0x3c26*/      bl spi_flash_cmd_read_data
/*0x3c2a*/      ldr r5, [pc, #0x70] /* r5 = 0x20000c90 */
/*0x3c2c*/      ldrh r0, [r5]       ; r0 = *(uint16_t*)r5
/*0x3c2e*/      sub.w r1, r0, #0x8000 ; r1 = r0 - 0x8000
/*0x3c32*/      subs r1, #2         ; r1 = r1 - 2
/*0x3c34*/      beq jump_3c4e       ; r1 == 0 ? jump_3c4e : continue
/*0x3c36*/      cmp.w r0, #0x1000
/*0x3c3a*/      bhs jump_3c40       ; r0 >= 0x1000 ? jump_3c40 : continue
/*0x3c3c*/      ldrb r4, [r5, #2]   ; r4 = *(uint8_t*)0x20000c92
/*0x3c3e*/      b jump_3c46
            jump_3c40:
/*0x3c40*/      cmp r4, #0xff
/*0x3c42*/      bne jump_3c46       ; r4 != 0xff ? jump_3c46 : continue
/*0x3c44*/      movs r4, #0         ; r4 = 0
            jump_3c46:
/*0x3c46*/      mov r0, r4          ; r0 = r4
/*0x3c48*/      bl call_3d00
/*0x3c4c*/      b jump_3c5e
            jump_3c4e:
/*0x3c4e*/      cmp r4, #0xff
/*0x3c50*/      beq jump_3c5e       ; r4 == 0xff ? jump_3c5e
/*0x3c52*/      ldrb r0, [r5, #2]   ; r0 = *(uint8_t*)0x20000c94
/*0x3c54*/      cmp r0, r4
/*0x3c56*/      beq jump_3c5e       ; r0 == r4 ? jump_3c5e : continue
/*0x3c58*/      strb r4, [r5, #2]   ; *(uint8_t*)0x20000c94 = r4
/*0x3c5a*/      bl call_3d48
            jump_3c5e:
/*0x3c5e*/      ldrb r0, [r5, #2]   ; r0 = *(uint8_t*)0x20000c94
/*0x3c60*/      movs r2, #2         ; r2 = 2
/*0x3c62*/      lsls r1, r0, #0xc   ; r1 = r0 << 0xc
/*0x3c64*/      ldr r0, [pc, #0x34] /* r0 = 0x20000c90 */
/*0x3c66*/      add.w r1, r1, #0x1000 ; r1 = r1 + 0x1000
/*0x3c6a*/      adds r0, #0xa4      ; r0 = r0 + 0xa4
/*0x3c6c*/      bl spi_flash_cmd_read_data
/*0x3c70*/      ldr r0, [pc, #0x28] /* r0 = 0x20000c90 */
/*0x3c72*/      adds r0, #0xa4      ; r0 = r0 + 0xa4
/*0x3c74*/      ldrh r0, [r0]       ; r0 = *(uint16_t*)0x20000d34
/*0x3c76*/      cmp r0, #4
/*0x3c78*/      beq jump_3c82       ; r0 == 4 ? jump_3c82 : continue
/*0x3c7a*/      pop.w {r4, r5, r6, lr}
/*0x3c7e*/      b.w call_3ca0
            jump_3c82:
/*0x3c82*/      ldrb r0, [r5, #2]   ; r0 = *(uint8_t*)(r5+2)
/*0x3c84*/      pop.w {r4, r5, r6, lr}
/*0x3c88*/      lsls r1, r0, #0xc   ; r1 = r0 << 0xc
/*0x3c8a*/      ldr r0, [pc, #0x10] /* r0 = 0x20000c90 */
/*0x3c8c*/      mov.w r2, #0xa30    ; r2 = 0xa30
/*0x3c90*/      adds r0, #0xa4      ; r0 = r0 + 0xa4
/*0x3c92*/      add.w r1, r1, #0x1000 ; r1 = r1 + 0x1000
/*0x3c96*/      b.w spi_flash_cmd_read_data

/*0x3c9a*/  .byte 0x00
/*0x3c9b*/  .byte 0x00

            data_3c9c:
/*0x3c9c*/  .word 0x20000c90


            .thumb_func
            call_3ca0:
/*0x3ca0*/      push {r4, lr}
/*0x3ca2*/      ldr r4, [pc, #0x2c] /* r4 = 0x20000d34 */
/*0x3ca4*/      movs r0, #4             ; r0 = 4
/*0x3ca6*/      strh r0, [r4]           ; *(0x20000d34) = 4
/*0x3ca8*/      movs r0, #0             ; r0 = 0
/*0x3caa*/      strb.w r0, [r4, #0x2d]  ; *(0x20000d61) = 0
/*0x3cae*/      strb.w r0, [r4, #0x2a]
/*0x3cb2*/      strb.w r0, [r4, #0x2b]
/*0x3cb6*/      strb.w r0, [r4, #0x2c]
/*0x3cba*/      bl call_5258
/*0x3cbe*/      movs r2, #0xff
/*0x3cc0*/      movs r1, #0x28
/*0x3cc2*/      adds r0, r4, #2
/*0x3cc4*/      bl _memset
/*0x3cc8*/      pop.w {r4, lr}
/*0x3ccc*/      b.w call_3d28

            data_3cd0:
/*0x3cd0*/  .word 0x20000d34


            .thumb_func
            call_3cd4:
/*0x3cd4*/      push {r4, lr}
/*0x3cd6*/      ldr r4, [pc, #0x24] /* data_3cfc */
/*0x3cd8*/      movs r0, #0
/*0x3cda*/      strb r0, [r4, #2]
/*0x3cdc*/      bl call_3ca0
            jump_3ce0:
/*0x3ce0*/      ldrb r0, [r4, #2]
/*0x3ce2*/      .short 0x1c40 /* adds r0, r0, #1 */
/*0x3ce4*/      uxtb r0, r0
/*0x3ce6*/      strb r0, [r4, #2]
/*0x3ce8*/      cmp r0, #5
/*0x3cea*/      bhs jump_3cf2
/*0x3cec*/      bl call_3d28
/*0x3cf0*/      b jump_3ce0
            jump_3cf2:
/*0x3cf2*/      pop.w {r4, lr}
/*0x3cf6*/      movs r0, #0
/*0x3cf8*/      b.w call_3d00

            data_3cfc:
/*0x3cfc*/  .word 0x20000c90


            .thumb_func
            call_3d00:
/*0x3d00*/      ldr r3, [pc, #0x20] /* r3 = 0x20000c90 */
/*0x3d02*/      push {r4, lr}
/*0x3d04*/      movw r1, #0x8002    ; r1 = 0x8002
/*0x3d08*/      strh r1, [r3]       ; *(uint16_t*)0x20000c90 = 0x8002
/*0x3d0a*/      strb r0, [r3, #2]   ; *(uint8_t*)0x20000c92 = arg1
/*0x3d0c*/      movs r0, #0xff      ; r0 = 0xff
/*0x3d0e*/      strb r0, [r3, #3]   ; *(uint8_t*)0x20000c93 = 0xff
/*0x3d10*/      mov r2, r0          ; (value) r2 = 0xff
/*0x3d12*/      movs r1, #0xa0      ; (len) r1 = 0xa0
/*0x3d14*/      adds r0, r3, #4     ; (dst) r0 = 0x20000c94
                ; clear 0xa0 bytes starting at 0x20000c94 with 0xff
/*0x3d16*/      bl _memset
/*0x3d1a*/      pop.w {r4, lr}
/*0x3d1e*/      b.w call_3d48

/*0x3d22*/  .byte 0x00
/*0x3d23*/  .byte 0x00

            data_3d24:
/*0x3d24*/  .word 0x20000c90


            .thumb_func
            call_3d28:
/*0x3d28*/      ldr r0, [pc, #4] /* r0 = 0x20000c90 */
/*0x3d2a*/      ldrb r0, [r0, #2] ; r0 = *(uint8_t*)0x20000c92
/*0x3d2c*/      b.w jump_3d34

            data_3d30:
/*0x3d30*/  .word 0x20000c90

            jump_3d34:
/*0x3d34*/      lsls r1, r0, #0xc       ; r1 = arg1 << 0xc
/*0x3d36*/      mov.w r2, #0xa30        ; r2 = 0xa30
/*0x3d3a*/      ldr r0, [pc, #8]        /* r0 = 0x20000d34 */
/*0x3d3c*/      add.w r1, r1, #0x1000   ; r1 = r1 + 0x1000
/*0x3d40*/      b.w jump_860c

            data_3d44:
/*0x3d44*/  .word 0x20000d34


            .thumb_func
            call_3d48:
/*0x3d48*/      movs r2, #0xa4  ; r2 = 0xa4
/*0x3d4a*/      movs r1, #0     ; r1 = 0
/*0x3d4c*/      ldr r0, [pc, #4] /* r0 = 0x20000c90 */
/*0x3d4e*/      b.w jump_860c

/*0x3d52*/  .byte 0x00
/*0x3d53*/  .byte 0x00

            data_3d54:
/*0x3d54*/  .word 0x20000c90


            .thumb_func
            call_3d58:
/*0x3d58*/      add.w r0, r0, r1, lsr #3
/*0x3d5c*/      and r3, r1, #7
/*0x3d60*/      movs r1, #1
/*0x3d62*/      lsls r1, r3
/*0x3d64*/      cmp r2, #0
/*0x3d66*/      ldrb r2, [r0]
/*0x3d68*/      uxtb r1, r1
/*0x3d6a*/      beq jump_3d70
/*0x3d6c*/      orrs r2, r1
/*0x3d6e*/      b jump_3d72
            jump_3d70:
/*0x3d70*/      bics r2, r1
            jump_3d72:
/*0x3d72*/      strb r2, [r0]
/*0x3d74*/      bx lr

/*0x3d76*/  .byte 0x00
/*0x3d77*/  .byte 0x00


            .thumb_func
            call_3d78:
/*0x3d78*/      ldr r2, [pc, #0x14] /* r2 = 0x200000df */
/*0x3d7a*/      add r2, r0          ; r2 = r2 + arg1
/*0x3d7c*/      movs r0, #0         ; r0 = 0
            jump_3d7e:
/*0x3d7e*/      .short 0x1c40 /* adds r0, r0, #1 */ ; r0 = r0 + 1
/*0x3d80*/      ldrb r3, [r2], #0x78 ; r3 = *(uint8_t*)r2
/*0x3d84*/      uxtb r0, r0         ; r0 = r0
/*0x3d86*/      strb r3, [r1], #1   ; *(uint8_t*)arg2 = r3
/*0x3d8a*/      cmp r0, #3
/*0x3d8c*/      blo jump_3d7e       ; r0 < 3 ? jump_3d7e : continue
/*0x3d8e*/      bx lr

            data_3d90:
/*0x3d90*/  .word 0x200000df


            .thumb_func
            loc_3d94:
/*0x3d94*/      push {r4, r5, r6, lr}
/*0x3d96*/      mov r6, r0
            jump_3d98:
/*0x3d98*/      movs r5, #0
/*0x3d9a*/      movs r4, #3
/*0x3d9c*/      b jump_3daa
            jump_3d9e:
/*0x3d9e*/      bl rand
/*0x3da2*/      uxtb r0, r0
/*0x3da4*/      strb r0, [r6, r4]
/*0x3da6*/      add r0, r5
/*0x3da8*/      uxth r5, r0
            jump_3daa:
/*0x3daa*/      .short 0x1e64 /* subs r4, r4, #1 */
/*0x3dac*/      uxtb r4, r4
/*0x3dae*/      bhs jump_3d9e
/*0x3db0*/      cmp r5, #0xff
/*0x3db2*/      blo jump_3d98
/*0x3db4*/      pop {r4, r5, r6, pc}

            .thumb_func
            loc_3db6:
/*0x3db6*/      push {r4, r5, lr}
/*0x3db8*/      lsls r3, r1, #1
/*0x3dba*/      cmp r3, #0xff
/*0x3dbc*/      bls jump_3dc4
/*0x3dbe*/      rsb.w r3, r3, #0x1fe
/*0x3dc2*/      uxth r3, r3
            jump_3dc4:
/*0x3dc4*/      movs r4, #0x2b
/*0x3dc6*/      udiv r4, r0, r4
/*0x3dca*/      movs r5, #0x55
/*0x3dcc*/      mla r0, r4, r5, r0
/*0x3dd0*/      sub.w r1, r1, r3, lsr #1
/*0x3dd4*/      uxtb r1, r1
/*0x3dd6*/      add.w r0, r0, r0, lsl #1
/*0x3dda*/      strb r1, [r2]
/*0x3ddc*/      lsls r0, r0, #0x19
/*0x3dde*/      strb r1, [r2, #1]
/*0x3de0*/      lsrs r0, r0, #0x18
/*0x3de2*/      strb r1, [r2, #2]
/*0x3de4*/      lsls r5, r4, #0x1f
/*0x3de6*/      beq jump_3dec
/*0x3de8*/      rsb.w r0, r0, #0xff
            jump_3dec:
/*0x3dec*/      muls r0, r3, r0
/*0x3dee*/      ubfx r0, r0, #8, #8
/*0x3df2*/      cmp r4, #5
/*0x3df4*/      bhs jump_3e2a
/*0x3df6*/      tbb [pc, r4]

/*0x3dfa*/  .byte 0x03 /* case switch_3e00 */
/*0x3dfb*/  .byte 0x07 /* case switch_3e08 */
/*0x3dfc*/  .byte 0x0c /* case switch_3e12 */
/*0x3dfd*/  .byte 0x10 /* case switch_3e1a */
/*0x3dfe*/  .byte 0x13 /* case switch_3e20 */
/*0x3dff*/  .byte 0x00

            switch_3e00:
/*0x3e00*/      add r3, r1
/*0x3e02*/      strb r3, [r2]
/*0x3e04*/      add r0, r1
/*0x3e06*/      b jump_3e0e
            switch_3e08:
/*0x3e08*/      add r0, r1
/*0x3e0a*/      strb r0, [r2]
/*0x3e0c*/      adds r0, r1, r3
            jump_3e0e:
/*0x3e0e*/      strb r0, [r2, #1]
/*0x3e10*/      pop {r4, r5, pc}
            switch_3e12:
/*0x3e12*/      add r3, r1
/*0x3e14*/      strb r3, [r2, #1]
            jump_3e16:
/*0x3e16*/      add r0, r1
/*0x3e18*/      b jump_3e26
            switch_3e1a:
/*0x3e1a*/      add r0, r1
/*0x3e1c*/      strb r0, [r2, #1]
/*0x3e1e*/      b jump_3e24
            switch_3e20:
/*0x3e20*/      add r0, r1
/*0x3e22*/      strb r0, [r2]
            jump_3e24:
/*0x3e24*/      adds r0, r1, r3
            jump_3e26:
/*0x3e26*/      strb r0, [r2, #2]
/*0x3e28*/      pop {r4, r5, pc}
            jump_3e2a:
/*0x3e2a*/      add r3, r1
/*0x3e2c*/      strb r3, [r2]
/*0x3e2e*/      b jump_3e16

            .thumb_func
            call_3e30:
/*0x3e30*/      push.w {r4, r5, r6, r7, r8, sb, lr}
/*0x3e34*/      ldr.w sb, [pc, #0x7c] /* sb = 0x20000248 */
/*0x3e38*/      ldr.w ip, [pc, #0x7c] /* ip = 0x0000966e */
/*0x3e3c*/      ldr.w r8, [pc, #0x7c] /* r8 = 0x200000df */
/*0x3e40*/      movs r5, #0                 ; r5 = 0
            jump_3e42:
/*0x3e42*/      add.w r1, r5, r5, lsl #1    ; r1 = r5 + (r5<<1)
/*0x3e46*/      add.w r0, sb, r1, lsl #5    ; r0 = sb + (r1<<5)
/*0x3e4a*/      movs r1, #0x10              ; r1 = 0x10
/*0x3e4c*/      movs r4, #0                 ; r4 = 0
            jump_3e4e:
/*0x3e4e*/      ldr r7, [pc, #0x68] /* r7 = 0x0000966e */
/*0x3e50*/      ldrb.w r2, [ip, r4]         ; r2 = *(uint8_t*)(0x0000966e+r4)
/*0x3e54*/      rsb r2, r2, r2, lsl #4      ; r2 = r2 * 15
/*0x3e58*/      add.w r2, r8, r2, lsl #3    ; r2 = r8 + (r2*8)
/*0x3e5c*/      adds r3, r2, r5             ; r3 = r2 + r5
/*0x3e5e*/      movs r2, #0xf               ; r2 = 0xf
/*0x3e60*/      .short 0x1d3f /* adds r7, r7, #4 */ ; r7 = r7 + 4
/*0x3e62*/      b jump_3e78
            jump_3e64:
/*0x3e64*/      ldrb r6, [r3], #8           ; r6 = *(uint8_t*)r3; r3+=8
/*0x3e68*/      .short 0x1e49 /* subs r1, r1, #1 */ ; r1 = r1 - 1
/*0x3e6a*/      ands r1, r1, #0xff          ; r1 = r1 & 0xff
/*0x3e6e*/      ldrh.w r6, [r7, r6, lsl #1] ; r6 = *(uint16_t*)(r7 + r6*2)
/*0x3e72*/      strh r6, [r0]               ; *(uint16_t*)r0 = r6
/*0x3e74*/      beq jump_3e82               ; r1 == 0 ? jump_3e82 : continue
/*0x3e76*/      .short 0x1d80 /* adds r0, r0, #6 */
            jump_3e78:
/*0x3e78*/      .short 0x1e52 /* subs r2, r2, #1 */ ; r2 = r2 - 1
/*0x3e7a*/      uxtb r2, r2
/*0x3e7c*/      bhs jump_3e64               ; r2 >= 0 ? jump_3e64 : continue
/*0x3e7e*/      movs r2, #1                 ; r2 = 1
/*0x3e80*/      b jump_3e92
            jump_3e82:
/*0x3e82*/      movs r1, #0x10              ; r1 = 0x10
/*0x3e84*/      subs r0, #0x58              ; r0 = 0x58
/*0x3e86*/      b jump_3e78
            jump_3e88:
/*0x3e88*/      .short 0x1e49 /* subs r1, r1, #1 */ ; r1 = r1 - 1
/*0x3e8a*/      ands r1, r1, #0xff          ; r1 = r1 & 0xff
/*0x3e8e*/      beq jump_3eac               ; r1 == 0 ? jump_3eac : continue
/*0x3e90*/      .short 0x1d80 /* adds r0, r0, #6 */ ; r0 = r0 + 6
            jump_3e92:
/*0x3e92*/      .short 0x1e52 /* subs r2, r2, #1 */ ; r2 = r2 - 1
/*0x3e94*/      uxtb r2, r2
/*0x3e96*/      bhs jump_3e88               ; r2 >= 0 ? jump_3e88
/*0x3e98*/      .short 0x1c64 /* adds r4, r4, #1 */ ; r4 = r4 + 1
/*0x3e9a*/      uxtb r4, r4
/*0x3e9c*/      cmp r4, #3
/*0x3e9e*/      blo jump_3e4e               ; r4 < 3 ? jump_3e4e : continue
/*0x3ea0*/      .short 0x1c6d /* adds r5, r5, #1 */ ; r5 = r5 + 1
/*0x3ea2*/      uxtb r5, r5
/*0x3ea4*/      cmp r5, #8
/*0x3ea6*/      blo jump_3e42               ; r5 < 8 ? jump_3e42 : continue
/*0x3ea8*/      pop.w {r4, r5, r6, r7, r8, sb, pc}
            jump_3eac:
/*0x3eac*/      movs r1, #0x10              ; r1 = 0x10
/*0x3eae*/      subs r0, #0x58              ; r0 = 0x58
/*0x3eb0*/      b jump_3e92

/*0x3eb2*/  .byte 0x00
/*0x3eb3*/  .byte 0x00

            data_3eb4:
/*0x3eb4*/  .word 0x20000248
            data_3eb8:
/*0x3eb8*/  .word 0x0000966e /* possible pointer */
            data_3ebc:
/*0x3ebc*/  .word 0x200000df


            .thumb_func
            loc_3ec0:
/*0x3ec0*/      push {r4, r5, r6, r7, lr}
/*0x3ec2*/      ldr r2, [pc, #0x2c] /* r2 = 0x200000df */
/*0x3ec4*/      movs r5, #0x78      ; r5 = 0x78
/*0x3ec6*/      b jump_3ee8
            jump_3ec8:
/*0x3ec8*/      mov r3, r0          ; r3 = arg1
/*0x3eca*/      movs r4, #3         ; r4 = 3
/*0x3ecc*/      b jump_3edc
            jump_3ece:
/*0x3ece*/      ldrb r6, [r3], #1   ; r6 = *(uint8_t*)r3; r3++
/*0x3ed2*/      ldrb r7, [r1]       ; r7 = *(uint8_t*)r1
/*0x3ed4*/      muls r6, r7, r6     ; r6 = r7 * r6
/*0x3ed6*/      lsrs r6, r6, #8     ; r6 = r6 >> 8
/*0x3ed8*/      strb r6, [r2], #0x78; *(uint8_t*)r2 = r6; r2 += 0x78
            jump_3edc:
/*0x3edc*/      .short 0x1e64 /* subs r4, r4, #1 */ ; r4 = r4 - 1
/*0x3ede*/      uxtb r4, r4
/*0x3ee0*/      bhs jump_3ece       ; r4 >= 0 ? jump_3ece : continue
/*0x3ee2*/      .short 0x1c49 /* adds r1, r1, #1 */ ; r1 = r1 + 1
/*0x3ee4*/      subw r2, r2, #0x167 ; r2 = r2 - 0x167
            jump_3ee8:
/*0x3ee8*/      .short 0x1e6d /* subs r5, r5, #1 */ ; r5 = r5 - 1
/*0x3eea*/      uxtb r5, r5
/*0x3eec*/      bhs jump_3ec8       ; r5 >= 0 ? jump_3ec8 : continue
/*0x3eee*/      pop {r4, r5, r6, r7, pc}

            data_3ef0:
/*0x3ef0*/  .word 0x200000df


            .thumb_func
            call_3ef4:
/*0x3ef4*/      cmp r0, #0xff
/*0x3ef6*/      beq jump_3f0e       ; arg1 == 0xff ? jump_3f0e : continue
/*0x3ef8*/      ldr r2, [pc, #0x14] /* r2 = 0x200000df */
/*0x3efa*/      add r2, r0          ; r2 = r2 + arg1
/*0x3efc*/      movs r0, #0         ; r0 = 0
            jump_3efe:
/*0x3efe*/      .short 0x1c40 /* adds r0, r0, #1 */ ; r0 = r0 + 1
/*0x3f00*/      ldrb r3, [r1], #1   ; r3 = *(uint8_t*)r1; r1 += 1
/*0x3f04*/      uxtb r0, r0
/*0x3f06*/      strb r3, [r2], #0x78 ; *(uint8_t*)r2 = r3; r2 += 0x78
/*0x3f0a*/      cmp r0, #3
/*0x3f0c*/      blo jump_3efe       ; r0 < 3 ? jump_3efe : continue
            jump_3f0e:
/*0x3f0e*/      bx lr

            data_3f10:
/*0x3f10*/  .word 0x200000df


            .thumb_func
            loc_3f14:
/*0x3f14*/      push {r4, lr}
/*0x3f16*/      cmp r0, #0xff
/*0x3f18*/      beq jump_3f34       ; arg1 == 0xff ? jump_3f34 : continue
/*0x3f1a*/      ldr r3, [pc, #0x1c] /* r3 = 0x200000df */
/*0x3f1c*/      add r3, r0          ; r3 = r3 + arg1
/*0x3f1e*/      movs r0, #0         ; r0 = 0
            jump_3f20:
/*0x3f20*/      ldrb r4, [r1], #1   ; r4 = *(uint8_t*)r1; r1++
/*0x3f24*/      .short 0x1c40 /* adds r0, r0, #1 */ ; r0 = r0 - 1
/*0x3f26*/      muls r4, r2, r4     ; r4 = r2 * r4
/*0x3f28*/      lsrs r4, r4, #8     ; r4 = r4 / 16
/*0x3f2a*/      uxtb r0, r0
/*0x3f2c*/      strb r4, [r3], #0x78 ; *(uint8_t*)r3 = r4; r3 += 0x78
/*0x3f30*/      cmp r0, #3
/*0x3f32*/      blo jump_3f20       ; r0 < 3 ? jump_3f20 : continue
            jump_3f34:
/*0x3f34*/      pop {r4, pc}

/*0x3f36*/  .byte 0x00
/*0x3f37*/  .byte 0x00

            data_3f38:
/*0x3f38*/  .word 0x200000df


            .thumb_func
            call_3f3c:
/*0x3f3c*/      push {r4, r5, r6, lr}
/*0x3f3e*/      mov r5, r0
/*0x3f40*/      ldr r6, [pc, #0x18] /* data_3f5c */
/*0x3f42*/      movs r4, #3
/*0x3f44*/      b jump_3f54
            jump_3f46:
/*0x3f46*/      ldrb r2, [r5]
/*0x3f48*/      movs r1, #0x78
/*0x3f4a*/      mov r0, r6
/*0x3f4c*/      bl _memset
/*0x3f50*/      .short 0x1c6d /* adds r5, r5, #1 */
/*0x3f52*/      adds r6, #0x78
            jump_3f54:
/*0x3f54*/      .short 0x1e64 /* subs r4, r4, #1 */
/*0x3f56*/      uxtb r4, r4
/*0x3f58*/      bhs jump_3f46
/*0x3f5a*/      pop {r4, r5, r6, pc}

            data_3f5c:
/*0x3f5c*/  .word 0x200000df


            .thumb_func
            loc_3f60:
/*0x3f60*/      push {r3, r4, r5, lr}
/*0x3f62*/      movs r2, #3
/*0x3f64*/      mov r3, sp
/*0x3f66*/      b jump_3f70
            jump_3f68:
/*0x3f68*/      ldrb r4, [r0, r2]
/*0x3f6a*/      muls r4, r1, r4
/*0x3f6c*/      lsrs r4, r4, #8
/*0x3f6e*/      strb r4, [r3, r2]
            jump_3f70:
/*0x3f70*/      .short 0x1e52 /* subs r2, r2, #1 */
/*0x3f72*/      uxtb r2, r2
/*0x3f74*/      bhs jump_3f68
/*0x3f76*/      mov r0, r3
/*0x3f78*/      bl call_3f3c
/*0x3f7c*/      pop {r3, r4, r5, pc}

/*0x3f7e*/  .byte 0x00
/*0x3f7f*/  .byte 0x00


            .thumb_func
            call_3f80:
/*0x3f80*/      cmp r0, #0xff
/*0x3f82*/      beq jump_3f96
/*0x3f84*/      ldr r2, [pc, #0x10] /* data_3f98 */
/*0x3f86*/      add r0, r2
/*0x3f88*/      movs r2, #3
/*0x3f8a*/      b jump_3f90
            jump_3f8c:
/*0x3f8c*/      strb r1, [r0], #0x78
            jump_3f90:
/*0x3f90*/      .short 0x1e52 /* subs r2, r2, #1 */
/*0x3f92*/      uxtb r2, r2
/*0x3f94*/      bhs jump_3f8c
            jump_3f96:
/*0x3f96*/      bx lr

            data_3f98:
/*0x3f98*/  .word 0x200000df


            .thumb_func
            loc_3f9c:
/*0x3f9c*/      push {r4, r5, r6, lr}
/*0x3f9e*/      movs r5, #3         ; r5 = 3
/*0x3fa0*/      b jump_3fe0
            jump_3fa2:
/*0x3fa2*/      ldrb r4, [r2]       ; r4 = *(uint8_t*)r2
/*0x3fa4*/      cbz r4, jump_3fc2   ; r4 == 0 ? jump_3fc2 : continue
/*0x3fa6*/      ldrb r3, [r2, #2]   ; r3 = *(uint8_t*)(r2+2)
/*0x3fa8*/      ldrb r6, [r2, #1]   ; r6 = *(uint8_t*)(r2+1)
/*0x3faa*/      cmp r3, #0
/*0x3fac*/      ldrb r3, [r1], #1   ; r3 = *(uint8_t*)(r1); r1++
/*0x3fb0*/      beq jump_3fc8       ; *(uint8_t*)(r2+2) == 0 ? jump_3fc8 : continue
/*0x3fb2*/      subs r3, r3, r6     ; r3 = r3 - r6
            jump_3fb4:
/*0x3fb4*/      cmp r3, #0
/*0x3fb6*/      bgt jump_3fda       ; r3 > 0 ? jump_3fda : continue
/*0x3fb8*/      rsbs r3, r3, #0     ; r3 = 0 - r3
/*0x3fba*/      movs r6, #0         ; r6 = 0
/*0x3fbc*/      sxth r3, r3         ; r3 = SE(r3)
/*0x3fbe*/      strb r6, [r2, #2]   ; *(uint8_t*)(r2+2) = r6
/*0x3fc0*/      b jump_3fca
            jump_3fc2:
/*0x3fc2*/      movs r3, #0
/*0x3fc4*/      .short 0x1c49 /* adds r1, r1, #1 */
/*0x3fc6*/      b jump_3fda
            jump_3fc8:
/*0x3fc8*/      add r3, r6
            jump_3fca:
/*0x3fca*/      cmp r4, r3
/*0x3fcc*/      bgt jump_3fda
/*0x3fce*/      subs r3, r3, r4
/*0x3fd0*/      subs r3, r4, r3
/*0x3fd2*/      movs r6, #1
/*0x3fd4*/      sxth r3, r3
/*0x3fd6*/      strb r6, [r2, #2]
/*0x3fd8*/      b jump_3fb4
            jump_3fda:
/*0x3fda*/      strb r3, [r0], #1
/*0x3fde*/      .short 0x1cd2 /* adds r2, r2, #3 */
            jump_3fe0:
/*0x3fe0*/      .short 0x1e6d /* subs r5, r5, #1 */ ; r5 = r5 - 1
/*0x3fe2*/      uxtb r5, r5
/*0x3fe4*/      bhs jump_3fa2       ; r5 >= 0 ? jump_3fa2 : continue
/*0x3fe6*/      pop {r4, r5, r6, pc}

            .thumb_func
            spi_flash_cmd_read_status_register:
/*0x3fe8*/      push {r2, r3, r4, r5, r6, lr}
/*0x3fea*/      ldr r4, [pc, #0x20] /* r4 = GPIOB_BASE_400c */
/*0x3fec*/      movs r0, #5         ; r0 = 5
/*0x3fee*/      strh.w r0, [sp]     ; *sp = 5
/*0x3ff2*/      mov.w r5, #0x400    ; r5 = 0x400
                ; reset B10 pin
/*0x3ff6*/      str r5, [r4, #0x28] ; *(GPIOB.PBRR) = 0x400
/*0x3ff8*/      movs r2, #2         ; r2 = 2
/*0x3ffa*/      add r1, sp, #4      ; r1 = sp + 4
/*0x3ffc*/      mov r0, sp          ; r0 = sp
/*0x3ffe*/      bl spi1_xfer
/*0x4002*/      str r5, [r4, #0x24]
/*0x4004*/      ldrb.w r0, [sp, #5]
/*0x4008*/      pop {r2, r3, r4, r5, r6, pc}

/*0x400a*/  .byte 0x00
/*0x400b*/  .byte 0x00

            GPIOB_BASE_400c:
/*0x400c*/  .word 0x400b2000


            .thumb_func
            spi_flash_config:
/*0x4010*/      push {r4, r5, r6, lr}
/*0x4012*/      sub sp, #0x30
/*0x4014*/      bl spi_flash_gpio_config
/*0x4018*/      ldr r4, [pc, #0x5c] /* r4 = 0x20000010 */
/*0x401a*/      ldrb r0, [r4]       ; r0 = (uint8_t)*r4
/*0x401c*/      cmp r0, #1
/*0x401e*/      bne jump_4070       ; r0 != 1 ? jump_4070 : continue
/*0x4020*/      movs r1, #1         ; r1 = 1 (enable)
/*0x4022*/      movs r0, #0x20      ; r0 = 0x20
                ; enable SPI1 clock
/*0x4024*/      bl ckcu_set_APBCCR0
/*0x4028*/      mov.w r0, #0x4000   ; r0 = 0x4000 (SPI master)
/*0x402c*/      asrs r5, r0, #4     ; r5 = 0x400 (enable SPIFIFO)
/*0x402e*/      strd r0, r5, [sp]   ; *(sp) = 0x4000 ; *(sp+4) = 0x400
/*0x4032*/      movs r0, #8         ; r0 = 8
/*0x4034*/      str r0, [sp, #8]    ; *(sp+8) = 8 (SPI_DataLength)
/*0x4036*/      movs r0, #0         ; r0 = 0
/*0x4038*/      str r0, [sp, #0xc]  ; *(sp+12) = 0 (SW SELMode)
/*0x403a*/      str r0, [sp, #0x10] ; *(sp+16) = 0 (low polarity)
/*0x403c*/      str r0, [sp, #0x14] ; *(sp+20) = 0 (low CPOL)
/*0x403e*/      str r0, [sp, #0x18] ; *(sp+24) = 0 (first edge CPHA)
/*0x4040*/      str r0, [sp, #0x1c] ; *(sp+28) = 0 (MSB)
/*0x4042*/      movs r0, #4         ; r0 = 4
/*0x4044*/      ldr r6, [pc, #0x34] /* r6 = SPI1_BASE_407c */
/*0x4046*/      str r0, [sp, #0x20] ; *(sp+32) = 4 (RxTriggerLevel)
/*0x4048*/      str r0, [sp, #0x24] ; *(sp+36) = 4 (TxTriggerLevel)
h*0x404a*/      str r0, [sp, #0x28] ; *(sp+40) = 4 (Prescaler)
/*0x404c*/      mov r1, sp          ; r1 = sp
/*0x404e*/      mov r0, r6          ; r0 = SPI1_BASE
/*0x4050*/      bl spi_config
/*0x4054*/      movs r1, #1         ; r1 = 1
/*0x4056*/      mov r0, r6          ; r0 = SPI1_BASE
/*0x4058*/      bl spi_set_slave_select_output_enable
/*0x405c*/      ldr r0, [pc, #0x20] /* r0 = GPIOB_BASE_4080 */
                ; set B10 pin
/*0x405e*/      str r5, [r0, #0x24] ; *(GPIOB.PBSRR) = 0x400 (B10)
/*0x4060*/      movs r1, #1         ; r1 = 1
/*0x4062*/      mov r0, r6          ; r0 = SPI1_BASE
                ; enable SPI1
/*0x4064*/      bl spi_enable
/*0x4068*/      bl spi_flash_afio_config
/*0x406c*/      movs r0, #2         ; r0 = 2
                ; mark 0x20000010 as spi flash initialized (2)
/*0x406e*/      strb r0, [r4]       ; *(uint8_t*)0x20000010 = 2
            jump_4070:
/*0x4070*/      add sp, #0x30
/*0x4072*/      movs r0, #1         ; r0 = 1
/*0x4074*/      pop {r4, r5, r6, pc}

/*0x4076*/  .byte 0x00
/*0x4077*/  .byte 0x00

            data_4078:
/*0x4078*/  .word 0x20000010
            SPI1_BASE_407c:
/*0x407c*/  .word 0x40044000
            GPIOB_BASE_4080:
/*0x4080*/  .word 0x400b2000


            .thumb_func
            spi_flash_read_wip:
/*0x4084*/      push {r4, lr}
/*0x4086*/      bl spi_flash_cmd_read_status_register
/*0x408a*/      ubfx r0, r0, #0, #1
/*0x408e*/      pop {r4, pc}

            .thumb_func
            spi_flash_gpio_config:
/*0x4090*/      push {r4, r5, r6, lr}
/*0x4092*/      ldr r4, [pc, #0x44] /* r4 = 0x20000010 */
/*0x4094*/      ldrb r0, [r4]       ; r0 = (uint8_t)*r4
/*0x4096*/      cbnz r0, jump_40d2  ; r0 != 0 ? jump_40d2 : continue
/*0x4098*/      movs r1, #1         ; r1 = 1
/*0x409a*/      lsls r0, r1, #0x11  ; r0 = 0x20000
                ; enable GPIO Port B clock
/*0x409c*/      bl ckcu_set_AHBCCR
/*0x40a0*/      ldr r6, [pc, #0x38] /* r6 = GPIOB_BASE_40dc */
/*0x40a2*/      mov.w r5, #0x400    ; r5 = 0x400
/*0x40a6*/      movs r2, #0         ; r2 = 0
/*0x40a8*/      mov r1, r5          ; r1 = 0x400
/*0x40aa*/      mov r0, r6          ; r0 = GPIOB_BASE
                ; pull-up resistor on B10/U5_CS
/*0x40ac*/      bl gpio_set_pin_pull_up_down_disable
/*0x40b0*/      movs r2, #1         ; r2 = 1
/*0x40b2*/      mov r1, r5          ; r1 = 0x400
/*0x40b4*/      mov r0, r6          ; r0 = GPIOB_BASE
                ; 8mA drive current on B10/U5_CS
/*0x40b6*/      bl gpio_set_pin_output_drive_current
/*0x40ba*/      movs r2, #1         ; r2 = 1
/*0x40bc*/      movs r1, #0x80      ; r1 = 0x80
/*0x40be*/      mov r0, r6          ; r0 = GPIOB_BASE
                ; 8mA drive current on B7/U5_SCLK
/*0x40c0*/      bl gpio_set_pin_output_drive_current
/*0x40c4*/      movs r2, #1         ; r2 = 1
/*0x40c6*/      lsls r1, r2, #8     ; r1 = 0x100
/*0x40c8*/      mov r0, r6          ; r0 = GPIOB_BASE
                ; 8mA drive current on B8/U5_SI
/*0x40ca*/      bl gpio_set_pin_output_drive_current
/*0x40ce*/      movs r0, #1         ; r0 = 1
/*0x40d0*/      strb r0, [r4]       ; *(uint8_t*)r4 = 1
            jump_40d2:
/*0x40d2*/      movs r0, #1         ; r0 = 1
/*0x40d4*/      pop {r4, r5, r6, pc}

/*0x40d6*/  .byte 0x00
/*0x40d7*/  .byte 0x00

            data_40d8:
/*0x40d8*/  .word 0x20000010
            GPIOB_BASE_40dc:
/*0x40dc*/  .word 0x400b2000

            _spi_flash_disable:
/*0x40e0*/      cbz r0, jump_40e6 ; arg1 == 0 ? jump_40e6 : continue
/*0x40e2*/      b.w spi_flash_deep_power_down
            jump_40e6:
/*0x40e6*/      b.w spi_flash_afio_config

/*0x40ea*/  .byte 0x00
/*0x40eb*/  .byte 0x00


            .thumb_func
            spi_flash_afio_config:
/*0x40ec*/      push {r4, r5, r6, lr}
/*0x40ee*/      movs r2, #1         ; (out) r2 = 1
/*0x40f0*/      ldr r5, [pc, #0x38] /* r5 = GPIOB_BASE_412c */
/*0x40f2*/      lsls r4, r2, #0xa   ; r4 = 0x400
/*0x40f4*/      mov r1, r4          ; (pin) r1 = 0x400 (10)
/*0x40f6*/      mov r0, r5          ; (gpio_base) r0 = GPIOB_BASE
/*0x40f8*/      bl gpio_set_pin_direction
/*0x40fc*/      movs r2, #2         ; (disable) r2 = 2
/*0x40fe*/      mov r1, r4          ; (pin) r1 = 0x400 (10)
/*0x4100*/      mov r0, r5          ; (gpio_base) r0 = GPIOB_BASE
                ; disable pull resistor on U5_CS
/*0x4102*/      bl gpio_set_pin_pull_up_down_disable
/*0x4106*/      movs r2, #5         ; (AFn) r2 = 5  (AF5/SPI1_SCK)
/*0x4108*/      movs r1, #7         ; (CFGn) r1 = 7 (CFG7)
/*0x410a*/      movs r0, #1         ; (port) r0 = 1 (PORTB)
                ; U5_SCLK
/*0x410c*/      bl AFIO_GPxConfig
/*0x4110*/      movs r2, #5         ; r2 = 5 (AF5/SPI1_MOSI)
/*0x4112*/      movs r1, #8         ; r1 = 8 (CFG8)
/*0x4114*/      movs r0, #1         ; r0 = 1 (PORTB)
                ; U5_SI
/*0x4116*/      bl AFIO_GPxConfig
/*0x411a*/      movs r2, #5         ; r2 = 5 (AF5/SPI1_MISO)
/*0x411c*/      movs r1, #9         ; r1 = 9 (CFG9)
/*0x411e*/      movs r0, #1         ; r0 = 1 (PORTB)
                ; U5_SO
/*0x4120*/      bl AFIO_GPxConfig
/*0x4124*/      pop.w {r4, r5, r6, lr}
/*0x4128*/      b.w jump_434c

            GPIOB_BASE_412c:
/*0x412c*/  .word 0x400b2000

            spi_flash_deep_power_down:
/*0x4130*/      push {r4, r5, r6, lr}
/*0x4132*/      bl spi_flash_cmd_deep_power_down
/*0x4136*/      ldr r5, [pc, #0x3c] /* r5 = GPIOB_BASE_4174 */
/*0x4138*/      mov.w r4, #0x400    ; r4 = 0x400
/*0x413c*/      movs r2, #0         ; (pull_setting) r2 = 0 (pull up)
/*0x413e*/      mov r1, r4          ; (pin) r1 = 0x400 (10)
/*0x4140*/      mov r0, r5          ; (gpio_base) r0 = GPIOB_BASE
                ; Configure B10 as pull-up
/*0x4142*/      bl gpio_set_pin_pull_up_down_disable
/*0x4146*/      movs r2, #0         ; (out) r2 = 0 (in)
/*0x4148*/      mov r1, r4          ; (pin) r1 = 0x400 (10)
/*0x414a*/      mov r0, r5          ; (gpio_base) r0 = GPIOB_BASE
                ; Configure B10 as input pin
/*0x414c*/      bl gpio_set_pin_direction
/*0x4150*/      movs r2, #0         ; r2 = 0 (AF0)
/*0x4152*/      movs r1, #7         ; r1 = 7 (CFG7)
/*0x4154*/      movs r0, #1         ; r0 = 1 (PORTB)
/*0x4156*/      bl AFIO_GPxConfig
/*0x415a*/      movs r2, #0         ; r2 = 0 (AF0)
/*0x415c*/      movs r1, #8         ; r1 = 8 (CFG8)
/*0x415e*/      movs r0, #1         ; r0 = 1 (PORTB)
/*0x4160*/      bl AFIO_GPxConfig
/*0x4164*/      pop.w {r4, r5, r6, lr}
/*0x4168*/      movs r2, #0         ; r2 = 0 (AF0)
/*0x416a*/      movs r1, #9         ; r1 = 9 (CFG9)
/*0x416c*/      movs r0, #1         ; r0 = 1 (PORTB)
/*0x416e*/      b.w AFIO_GPxConfig

/*0x4172*/  .byte 0x00
/*0x4173*/  .byte 0x00

            GPIOB_BASE_4174:
/*0x4174*/  .word 0x400b2000


            .thumb_func
            spi_flash_cmd_page_program:
/*0x4178*/      push.w {r3, r4, r5, r6, r7, r8, sb, lr}
/*0x417c*/      mov r7, r2          ; r7 = arg3
/*0x417e*/      mov r4, r1          ; r4 = arg2
/*0x4180*/      mov r8, r0          ; r8 = arg1
/*0x4182*/      bl spi_flash_cmd_write_enable
/*0x4186*/      ldr r6, [pc, #0x38] /* r6 = GPIOB_BASE_41c0 */
/*0x4188*/      mov.w r5, #0x400    ; r5 = 0x400
/*0x418c*/      str r5, [r6, #0x28] ; r5 = *(GPIOB.PBRR)
/*0x418e*/      movs r0, #2         ; r0 = 2
/*0x4190*/      strb.w r0, [sp]     ; *(uint8_t*)sp = 2 (PAGE_PROGRAM)
/*0x4194*/      lsrs r0, r4, #0x10  ; r0 = arg2 << 16
/*0x4196*/      strb.w r0, [sp, #1] ; *(uint8_t*)(sp+1) = arg2 << 16
/*0x419a*/      lsrs r0, r4, #8
/*0x419c*/      strb.w r0, [sp, #2]
/*0x41a0*/      strb.w r4, [sp, #3]
/*0x41a4*/      movs r2, #4
/*0x41a6*/      movs r1, #0
/*0x41a8*/      mov r0, sp
/*0x41aa*/      bl spi1_xfer
/*0x41ae*/      mov r2, r7
/*0x41b0*/      movs r1, #0
/*0x41b2*/      mov r0, r8
/*0x41b4*/      bl spi1_xfer
/*0x41b8*/      str r5, [r6, #0x24]
/*0x41ba*/      pop.w {r3, r4, r5, r6, r7, r8, sb, pc}

/*0x41be*/  .byte 0x00
/*0x41bf*/  .byte 0x00

            GPIOB_BASE_41c0:
/*0x41c0*/  .word 0x400b2000


            .thumb_func
            spi_flash_cmd_sector_erase:
/*0x41c4*/      push {r3, r4, r5, r6, r7, lr}
/*0x41c6*/      mov r4, r0
/*0x41c8*/      bl spi_flash_cmd_write_enable
/*0x41cc*/      ldr r6, [pc, #0x28] /* GPIOB_BASE_41f8 */
/*0x41ce*/      mov.w r5, #0x400
/*0x41d2*/      str r5, [r6, #0x28]
/*0x41d4*/      movs r0, #0x20
/*0x41d6*/      strb.w r0, [sp]
/*0x41da*/      lsrs r0, r4, #0x10
/*0x41dc*/      strb.w r0, [sp, #1]
/*0x41e0*/      lsrs r0, r4, #8
/*0x41e2*/      strb.w r0, [sp, #2]
/*0x41e6*/      strb.w r4, [sp, #3]
/*0x41ea*/      movs r2, #4
/*0x41ec*/      movs r1, #0
/*0x41ee*/      mov r0, sp
/*0x41f0*/      bl spi1_xfer
/*0x41f4*/      str r5, [r6, #0x24]
/*0x41f6*/      pop {r3, r4, r5, r6, r7, pc}

            GPIOB_BASE_41f8:
/*0x41f8*/  .word 0x400b2000


            .thumb_func
            spi_flash_cmd_write_status_register:
/*0x41fc*/      push {r3, r4, r5, r6, r7, lr}
/*0x41fe*/      mov r6, r0
/*0x4200*/      bl spi_flash_cmd_write_enable
/*0x4204*/      ldr r4, [pc, #0x1c] /* GPIOB_BASE_4224 */
/*0x4206*/      mov.w r5, #0x400
/*0x420a*/      str r5, [r4, #0x28]
/*0x420c*/      movs r0, #1
/*0x420e*/      strb.w r0, [sp]
/*0x4212*/      strb.w r6, [sp, #1]
/*0x4216*/      movs r2, #2
/*0x4218*/      movs r1, #0
/*0x421a*/      mov r0, sp
/*0x421c*/      bl spi1_xfer
/*0x4220*/      str r5, [r4, #0x24]
/*0x4222*/      pop {r3, r4, r5, r6, r7, pc}

            GPIOB_BASE_4224:
/*0x4224*/  .word 0x400b2000


            .thumb_func
            spi_flash_program_page:
/*0x4228*/      push {r4, lr}
/*0x422a*/      movs r4, #0x3c
/*0x422c*/      bl spi_flash_cmd_page_program
/*0x4230*/      b jump_423e
            jump_4232:
/*0x4232*/      movs r0, #0x64
/*0x4234*/      bl sleep
/*0x4238*/      bl spi_flash_read_wip
/*0x423c*/      cbz r0, jump_4246
            jump_423e:
/*0x423e*/      mov r0, r4
/*0x4240*/      .short 0x1e64 /* subs r4, r4, #1 */
/*0x4242*/      bhs jump_4232
/*0x4244*/      pop {r4, pc}
            jump_4246:
/*0x4246*/      movs r0, #1
/*0x4248*/      pop {r4, pc}

/*0x424a*/  .byte 0x00
/*0x424b*/  .byte 0x00


            .thumb_func
            spi_flash_cmd_deep_power_down:
/*0x424c*/      push {r3, r4, r5, lr}
/*0x424e*/      ldr r4, [pc, #0x20] /* r4 = GPIOB_BASE_4270 */
/*0x4250*/      movs r0, #0xb9      ; r0 = 0xb9
/*0x4252*/      strb.w r0, [sp]     ; *(sp) = 0xb9a (Deep Power-down)
/*0x4256*/      mov.w r5, #0x400    ; r5 = 0x400
/*0x425a*/      str r5, [r4, #0x28] ; *(GPIO.PBRR) = 0x400
/*0x425c*/      movs r2, #1         ; (len) r2 = 1 (1 byte)
/*0x425e*/      movs r1, #0         ; (dst) r1 = 0 (NULL)
/*0x4260*/      mov r0, sp          ; (src) r0 = sp ([0xb9])
/*0x4262*/      bl spi1_xfer
/*0x4266*/      str r5, [r4, #0x24] ;
/*0x4268*/      movs r0, #0xa
/*0x426a*/      bl sleep
/*0x426e*/      pop {r3, r4, r5, pc}

            GPIOB_BASE_4270:
/*0x4270*/  .word 0x400b2000


            .thumb_func
            spi_flash_cmd_read_data:
/*0x4274*/      push {r3, r4, r5, r6, r7, lr}
/*0x4276*/      ldr r5, [pc, #0x38] /* GPIOB_BASE_42b0 */
/*0x4278*/      mov.w r4, #0x400
/*0x427c*/      mov r7, r2
/*0x427e*/      mov r6, r0
/*0x4280*/      str r4, [r5, #0x28]
/*0x4282*/      movs r0, #3
/*0x4284*/      strb.w r0, [sp]
/*0x4288*/      lsrs r0, r1, #0x10
/*0x428a*/      strb.w r0, [sp, #1]
/*0x428e*/      lsrs r0, r1, #8
/*0x4290*/      strb.w r0, [sp, #2]
/*0x4294*/      strb.w r1, [sp, #3]
/*0x4298*/      movs r2, #4
/*0x429a*/      movs r1, #0
/*0x429c*/      mov r0, sp
/*0x429e*/      bl spi1_xfer
/*0x42a2*/      mov r2, r7
/*0x42a4*/      mov r1, r6
/*0x42a6*/      movs r0, #0
/*0x42a8*/      bl spi1_xfer
/*0x42ac*/      str r4, [r5, #0x24]
/*0x42ae*/      pop {r3, r4, r5, r6, r7, pc}

            GPIOB_BASE_42b0:
/*0x42b0*/  .word 0x400b2000


            .thumb_func
            spi1_xfer:
/*0x42b4*/      push {r4, r5, r6, r7, lr}
/*0x42b6*/      movs r3, #0     ; r3 = 0
/*0x42b8*/      cmp r2, #8
/*0x42ba*/      bls jump_42c0   ; arg2 <= 8 ? jump_42c0 : continue
/*0x42bc*/      movs r4, #8     ; r4 = 8
/*0x42be*/      b jump_42c2
            jump_42c0:
/*0x42c0*/      mov r4, r2      ; r4 = arg2
            jump_42c2:
/*0x42c2*/      movs r5, #0     ; r5 = 0
/*0x42c4*/      mov r7, r5      ; r7 = 0
/*0x42c6*/      ldr r6, [pc, #0x58] /* r6 = SPI1_BASE_4320 */
/*0x42c8*/      b jump_42d6
            jump_42ca:
/*0x42ca*/      cbz r0, jump_42dc
/*0x42cc*/      ldrb.w ip, [r0, r5]
/*0x42d0*/      str.w ip, [r6, #0x10]
            jump_42d4:
/*0x42d4*/      .short 0x1c6d /* adds r5, r5, #1 */
            jump_42d6:
/*0x42d6*/      cmp r5, r4
/*0x42d8*/      blo jump_42ca   ; r5 < r4 ? jump_42ca : continue
/*0x42da*/      b jump_42fe
            jump_42dc:
/*0x42dc*/      str r7, [r6, #0x10]
/*0x42de*/      b jump_42d4
            jump_42e0:
/*0x42e0*/      ldr r5, [r6, #0x1c] ; r5 = *(SPI1.FSR)
/*0x42e2*/      tst.w r5, #0xf0
/*0x42e6*/      beq jump_42e0       ; r5 & 0xf0 == 0 ? jump_42e0 : continue
/*0x42e8*/      ldr r5, [r6, #0x10] ; r5 = *(SPI1.DR)
/*0x42ea*/      uxtb r5, r5         ; r5 = r5
/*0x42ec*/      cbz r0, jump_4304   ; arg1 == 0 ? jump_4304 : continue
/*0x42ee*/      ldrb.w ip, [r0, r4]
/*0x42f2*/      str.w ip, [r6, #0x10]
            jump_42f6:
/*0x42f6*/      .short 0x1c64 /* adds r4, r4, #1 */
/*0x42f8*/      cbz r1, jump_42fc
/*0x42fa*/      strb r5, [r1, r3]
            jump_42fc:
/*0x42fc*/      .short 0x1c5b /* adds r3, r3, #1 */
            jump_42fe:
/*0x42fe*/      cmp r4, r2
/*0x4300*/      blo jump_42e0   ; r4 < r2 ? jump_42e0 : continue
/*0x4302*/      b jump_431a
            jump_4304:
/*0x4304*/      str r7, [r6, #0x10]
/*0x4306*/      b jump_42f6
            jump_4308:
/*0x4308*/      ldr r0, [r6, #0x1c] ; r0 = *(SPI1.FSR)
/*0x430a*/      tst.w r0, #0xf0
/*0x430e*/      beq jump_4308       ; r0 & 0xf0 == 0 ? jump_4308 : continue
/*0x4310*/      ldr r0, [r6, #0x10] ; r0 = *(SPI1.DR)
/*0x4312*/      uxtb r0, r0
/*0x4314*/      cbz r1, jump_4318   ; r1 == 0 ? jump_4318 : continue
/*0x4316*/      strb r0, [r1, r3]
            jump_4318:
/*0x4318*/      .short 0x1c5b /* adds r3, r3, #1 */
            jump_431a:
/*0x431a*/      cmp r3, r2
/*0x431c*/      blo jump_4308   ; r3 < r2 ? jump_4308 : continue
/*0x431e*/      pop {r4, r5, r6, r7, pc}

            SPI1_BASE_4320:
/*0x4320*/  .word 0x40044000


            .thumb_func
            spi_flash_erase_sector:
/*0x4324*/      push {r4, r5, r6, lr}
/*0x4326*/      movw r4, #0x12d         ; r4 = 0x12d
/*0x432a*/      bl spi_flash_cmd_sector_erase
/*0x432e*/      mov.w r5, #0x3e8
/*0x4332*/      b jump_4340
            jump_4334:
/*0x4334*/      mov r0, r5
/*0x4336*/      bl sleep
/*0x433a*/      bl spi_flash_read_wip
/*0x433e*/      cbz r0, jump_4348
            jump_4340:
/*0x4340*/      mov r0, r4
/*0x4342*/      .short 0x1e64 /* subs r4, r4, #1 */
/*0x4344*/      bhs jump_4334
/*0x4346*/      pop {r4, r5, r6, pc}
            jump_4348:
/*0x4348*/      movs r0, #1
/*0x434a*/      pop {r4, r5, r6, pc}
            jump_434c:
/*0x434c*/      push {r3, r4, r5, lr}
/*0x434e*/      ldr r4, [pc, #0x20] /* GPIOB_BASE_4370 */
/*0x4350*/      movs r0, #0xab
/*0x4352*/      strb.w r0, [sp]
/*0x4356*/      mov.w r5, #0x400
/*0x435a*/      str r5, [r4, #0x28]
/*0x435c*/      movs r2, #1
/*0x435e*/      movs r1, #0
/*0x4360*/      mov r0, sp
/*0x4362*/      bl spi1_xfer
/*0x4366*/      str r5, [r4, #0x24]
/*0x4368*/      movs r0, #0xa
/*0x436a*/      bl sleep
/*0x436e*/      pop {r3, r4, r5, pc}

            GPIOB_BASE_4370:
/*0x4370*/  .word 0x400b2000

            jump_4374:
/*0x4374*/      push.w {r4, r5, r6, r7, r8, sb, sl, lr}
/*0x4378*/      mov r5, r1          ; (sectorAddr) r5 = arg2
/*0x437a*/      mov r6, r0          ; (ptr) r6 = arg1
/*0x437c*/      rsbs r0, r5, #0     ; r0 = 0 - arg2
/*0x437e*/      uxtb r4, r0         ; r4 = r0
/*0x4380*/      cmp r4, r2
/*0x4382*/      bhs jump_438e       ; r4 >= arg3 (len) ? jump_438e : continue
/*0x4384*/      subs r0, r2, r4     ; r0 = arg3 + arg2
/*0x4386*/      ubfx r7, r0, #8, #0x10 ; r7 = r0[24:8]
/*0x438a*/      uxtb r0, r0
/*0x438c*/      b jump_4394
            jump_438e:
/*0x438e*/      movs r7, #0         ; r7 = 0
/*0x4390*/      uxth r4, r2         ; r4 = arg3
/*0x4392*/      mov r0, r7          ; r0 = 0
            jump_4394:
/*0x4394*/      mov r8, r0          ; r8 = r0
/*0x4396*/      cbz r4, jump_43a8   ; r4 == 0 ? jump_43a8 : continue
/*0x4398*/      mov r2, r4          ; (len) r2 = -arg2
/*0x439a*/      mov r0, r6          ; (src) r0 = arg1
                ; (pageAddr @ arg2)
/*0x439c*/      bl spi_flash_program_page
/*0x43a0*/      cmp r0, #1
/*0x43a2*/      bne jump_43e0       ; r0 != 1 ? jump_43e0 : continue
/*0x43a4*/      add r5, r4          ; r5 = r5 + r4
/*0x43a6*/      add r6, r4          ; r6 = r6 + r4
            jump_43a8:
/*0x43a8*/      movs r4, #0         ; r4 = 0
/*0x43aa*/      mov.w sb, #0x100    ; sb = 0x100
/*0x43ae*/      b jump_43c8
            jump_43b0:
/*0x43b0*/      mov r2, sb          ; r2 = 0x100
/*0x43b2*/      mov r1, r5          ; r1 = arg2
/*0x43b4*/      mov r0, r6          ; r0 = arg1
/*0x43b6*/      bl spi_flash_program_page
/*0x43ba*/      cmp r0, #1
/*0x43bc*/      bne jump_43e0       ; r0 != 0 ? jump_43e0 : continue
/*0x43be*/      .short 0x1c64 /* adds r4, r4, #1 */ ; r4 = r4  + 1
/*0x43c0*/      add.w r5, r5, #0x100 ; r5 = r5 + 0x100
/*0x43c4*/      add.w r6, r6, #0x100 ; r6 = r6 + 0x100
            jump_43c8:
/*0x43c8*/      cmp r4, r7
/*0x43ca*/      blt jump_43b0       ; r4 < r7 ? jump_43b0 : continue
/*0x43cc*/      subs.w r0, r8, #0   ; r0 = r8
/*0x43d0*/      beq jump_43e6       ; r0 == 0 ? jump_43e6 : continue
/*0x43d2*/      mov r2, r0          ; r2 = r0
/*0x43d4*/      mov r1, r5          ; r1 = r5
/*0x43d6*/      mov r0, r6          ; r0 = r6
/*0x43d8*/      bl spi_flash_program_page
/*0x43dc*/      cmp r0, #1
/*0x43de*/      beq jump_43e6       ; r0 == 1 ? jump_43e6 : continue
            jump_43e0:
/*0x43e0*/      movs r0, #0         ; r0 = 0
            jump_43e2:
/*0x43e2*/      pop.w {r4, r5, r6, r7, r8, sb, sl, pc}
            jump_43e6:
/*0x43e6*/      movs r0, #1         ; r0 = 1
/*0x43e8*/      b jump_43e2

/*0x43ea*/  .byte 0x00
/*0x43eb*/  .byte 0x00


            .thumb_func
            spi_flash_cmd_write_enable:
/*0x43ec*/      push {r3, r4, r5, lr}
/*0x43ee*/      ldr r4, [pc, #0x1c] /* GPIOB_BASE_440c */
/*0x43f0*/      movs r0, #6
/*0x43f2*/      strb.w r0, [sp]
/*0x43f6*/      mov.w r5, #0x400
/*0x43fa*/      str r5, [r4, #0x28]
/*0x43fc*/      movs r2, #1
/*0x43fe*/      movs r1, #0
/*0x4400*/      mov r0, sp
/*0x4402*/      bl spi1_xfer
/*0x4406*/      str r5, [r4, #0x24]
/*0x4408*/      pop {r3, r4, r5, pc}

/*0x440a*/  .byte 0x00
/*0x440b*/  .byte 0x00

            GPIOB_BASE_440c:
/*0x440c*/  .word 0x400b2000


            .thumb_func
            spi_flash_write_status_register:
/*0x4410*/      push {r4, lr}
/*0x4412*/      mov.w r4, #0x19a
/*0x4416*/      bl spi_flash_cmd_write_status_register
/*0x441a*/      b jump_4428
            jump_441c:
/*0x441c*/      movs r0, #0x64
/*0x441e*/      bl sleep
/*0x4422*/      bl spi_flash_read_wip
/*0x4426*/      cbz r0, jump_4430
            jump_4428:
/*0x4428*/      mov r0, r4
/*0x442a*/      .short 0x1e64 /* subs r4, r4, #1 */
/*0x442c*/      bhs jump_441c
/*0x442e*/      pop {r4, pc}
            jump_4430:
/*0x4430*/      movs r0, #1
/*0x4432*/      pop {r4, pc}

            .thumb_func
            gpio_reset_pin:
/*0x4434*/      str r1, [r0, #0x28] ; *(gpio_base.PxRR) = arg2
/*0x4436*/      bx lr

            .thumb_func
            gpio_set_pin_direction:
/*0x4438*/      cmp r2, #0
/*0x443a*/      ldr r2, [r0]    ; r2 = *(arg1)
/*0x443c*/      beq jump_4442   ; arg3 == 0 ? jump_4442 : continue
/*0x443e*/      orrs r2, r1     ; r2 = r2 | arg2
/*0x4440*/      b jump_4444
            jump_4442:
/*0x4442*/      bics r2, r1     ; r2 = r2 & ~arg2
            jump_4444:
/*0x4444*/      str r2, [r0]    ; *arg1 = r2
/*0x4446*/      bx lr           ; return

            .thumb_func
            gpio_set_pin_output_drive_current:
/*0x4448*/      cmp r2, #0
/*0x444a*/      ldr r2, [r0, #0x14]
/*0x444c*/      beq jump_4452
/*0x444e*/      orrs r2, r1
/*0x4450*/      b jump_4454
            jump_4452:
/*0x4452*/      bics r2, r1
            jump_4454:
/*0x4454*/      str r2, [r0, #0x14]
/*0x4456*/      bx lr

            .thumb_func
            gpio_set_pin_input_enable:
/*0x4458*/      cmp r2, #0
/*0x445a*/      ldr r2, [r0, #4]
/*0x445c*/      beq jump_4462
/*0x445e*/      orrs r2, r1
/*0x4460*/      b jump_4464
            jump_4462:
/*0x4462*/      bics r2, r1
            jump_4464:
/*0x4464*/      str r2, [r0, #4]
/*0x4466*/      bx lr

            .thumb_func
            gpio_set_pin_open_drain:
/*0x4468*/      cmp r2, #0
/*0x446a*/      ldr r2, [r0, #0x10]
/*0x446c*/      beq jump_4472
/*0x446e*/      orrs r2, r1
/*0x4470*/      b jump_4474
            jump_4472:
/*0x4472*/      bics r2, r1
            jump_4474:
/*0x4474*/      str r2, [r0, #0x10]
/*0x4476*/      bx lr

            .thumb_func
            gpio_set_pin_pull_up_down_disable:
/*0x4478*/      cbz r2, jump_448c
/*0x447a*/      cmp r2, #1
/*0x447c*/      beq jump_4492
/*0x447e*/      ldr r2, [r0, #8]
/*0x4480*/      bics r2, r1
            jump_4482:
/*0x4482*/      str r2, [r0, #8]
/*0x4484*/      ldr r2, [r0, #0xc]
/*0x4486*/      bics r2, r1
/*0x4488*/      str r2, [r0, #0xc]
/*0x448a*/      bx lr
            jump_448c:
/*0x448c*/      ldr r2, [r0, #8]
/*0x448e*/      orrs r2, r1
/*0x4490*/      b jump_4482
            jump_4492:
/*0x4492*/      ldr r2, [r0, #0xc]
/*0x4494*/      orrs r2, r1
/*0x4496*/      str r2, [r0, #0xc]
/*0x4498*/      ldr r2, [r0, #8]
/*0x449a*/      bics r2, r1
/*0x449c*/      str r2, [r0, #8]
/*0x449e*/      bx lr

            .thumb_func
            _gpio_set_reset_pin:
/*0x44a0*/      str r1, [r0, #0x24]
/*0x44a2*/      bx lr

            .thumb_func
            gpio_set_reset_pin:
/*0x44a4*/      cbz r2, jump_44aa
/*0x44a6*/      str r1, [r0, #0x24]
/*0x44a8*/      bx lr
            jump_44aa:
/*0x44aa*/      str r1, [r0, #0x28]
/*0x44ac*/      bx lr

            .thumb_func
            TM_Cmd:
/*0x44ae*/      cmp r1, #0
/*0x44b0*/      ldr r1, [r0, #0x10]
/*0x44b2*/      beq jump_44ba
/*0x44b4*/      orr r1, r1, #1
/*0x44b8*/      b jump_44be
            jump_44ba:
/*0x44ba*/      bic r1, r1, #1
            jump_44be:
/*0x44be*/      str r1, [r0, #0x10]
/*0x44c0*/      bx lr

            .thumb_func
            TM_OutputInit:
/*0x44c2*/      push {r4, r5, r6, r7, lr}
                ; get channel number
/*0x44c4*/      ldrb r3, [r1]               ; r3 = *(uint8_t*)arg2
/*0x44c6*/      ldr r7, [r0, #0x50]         ; r7 = *(arg1+0x50)
/*0x44c8*/      add.w r4, r0, r3, lsl #2    ; r4 = arg1 + (r3*4)
                ; channel N Output Configuration
/*0x44cc*/      add.w r2, r4, #0x40         ; r2 = r4 + 0x40
                ; channel N Capture/Compare
/*0x44d0*/      add.w r5, r4, #0x90         ; r5 = r4 + 0x90
                ; channel N Asymmetric Compare
/*0x44d4*/      add.w r6, r4, #0xa0         ; r6 = r4 + 0xa0
/*0x44d8*/      lsls r3, r3, #1             ; r3 = r3 << 1
/*0x44da*/      movs r4, #1                 ; r4 = 1
/*0x44dc*/      lsls r4, r3                 ; r4 = r4 << r3
/*0x44de*/      mvns r4, r4                 ; r4 = ~r4
/*0x44e0*/      ands r7, r4                 ; r7 = r7 & r4
                ; disable channel N
/*0x44e2*/      str r7, [r0, #0x50]         ; *(arg1+0x50) = r7
/*0x44e4*/      ldr r7, [r0, #0x54]         ; r7 = *(arg1+0x54)
/*0x44e6*/      ands r7, r4                 ; r7 = r7 & r4
                ; set channel N capture/compare polarity with 0
/*0x44e8*/      str r7, [r0, #0x54]         ; *(arg1+0x54) = r7
/*0x44ea*/      ldr r4, [r0, #0x54]         ; r4 = *(arg1+0x54)
/*0x44ec*/      ldrb r7, [r1, #5]           ; r7 = *(uint8_t*)(arg2+5)
/*0x44ee*/      lsls r7, r3                 ; r7 = r7 << r3
/*0x44f0*/      orrs r4, r7                 ; r4 = r4 | r7
                ; set channel N capture/compare polarity
/*0x44f2*/      str r4, [r0, #0x54]         ; *(arg1+0x54) = r4
/*0x44f4*/      ldr r4, [r2]                ; r4 = *(r2)
/*0x44f6*/      movw r7, #0x107             ; r7 = 0x107
/*0x44fa*/      bics r4, r7                 ; r4 = r4 & ~r7
                ; set channel N Output Configuration
/*0x44fc*/      str r4, [r2]                ; *(r2) = r4
/*0x44fe*/      ldr r4, [r2]                ; r4 = *(r2)
/*0x4500*/      ldrh r7, [r1, #2]           ; r7 = *(uint16_t*)(arg2+2)
/*0x4502*/      orrs r4, r7                 ; r4 = r4 | r7
/*0x4504*/      str r4, [r2]                ; *(r2) = r4
/*0x4506*/      ldrh r2, [r1, #6]           ; r2 = *(uint16_t*)(arg2+6)
                ; set channel N Capture/Compare
/*0x4508*/      str r2, [r5]                ; *(r5) = r2
/*0x450a*/      ldrh r2, [r1, #8]           ; r2 = *(uint16_t*)(arg1+8)
                ; set channel N Asymmetric Compare
/*0x450c*/      str r2, [r6]                ; *(r6) = r2
/*0x450e*/      ldr r2, [r0, #0x50]         ; r2 = *(arg1+0x50)
/*0x4510*/      ldrb r1, [r1, #4]           ; r1 = *(arg2+0x4)
/*0x4512*/      lsls r1, r3                 ; r1 = r1 << r3
/*0x4514*/      orrs r2, r1                 ; r2 = r2 | r1
                ; set capture mode on channel N
/*0x4516*/      str r2, [r0, #0x50]         ; *(arg1+0x50) = r2
/*0x4518*/      pop {r4, r5, r6, r7, pc}

            .thumb_func
            TM_OutputStructInit:
            ; r0 : OutInit
/*0x451a*/      movs r1, #0         ; r1 = 0
/*0x451c*/      strb r1, [r0]       ; *(OutInit->Channel) = 0
/*0x451e*/      strh r1, [r0, #2]   ; *(OutInit->OutputMode) = 0
/*0x4520*/      strb r1, [r0, #4]   ; *(OutInit->Control) = 0
/*0x4522*/      strb r1, [r0, #5]   ; *(OutInit->ControlN) = 0
/*0x4524*/      strh r1, [r0, #6]   ; *(OutInit->Compare) = 0
/*0x4526*/      strh r1, [r0, #8]   ; *(OutInit->AsymmetricCompare) = 0
/*0x4528*/      bx lr

            .thumb_func
            TM_TimeBaseInit:
            ; r0 : gptm_base
            ; r1 : struct gptm_config_t *gptm_config
            ; struct {
            ;   uint16_t CounterReload;
            ;   uint16_t Prescaler;
            ;   uint32_t CounterMode;
            ;   uint16_t PSCReloadTime;
            ; } gptm_config_t;
/*0x452a*/      ldrh r2, [r1]           ; r2 = *(uint16_t*)(gptm_config->CounterReload)
/*0x452c*/      str.w r2, [r0, #0x88]   ; *(GPTM.CRR) = r2
/*0x4530*/      ldrh r2, [r1, #2]       ; r2 = *(uint16_t*)(gptm_config->Prescaler)
/*0x4532*/      str.w r2, [r0, #0x84]   ; *(GPTM.PSCR) = r2
/*0x4536*/      ldr r2, [r0]            ; r2 = *(GPTM.CNTCFR)
                ; edge aligned mode
/*0x4538*/      bic r2, r2, #0x30000    ; r2 = r2 & ~0x30000
/*0x453c*/      str r2, [r0]            ; *(GPTM.CNTCFR) = r2
/*0x453e*/      ldr r2, [r0]            ; r2 = *(GPTM.CNTCFR)
                ; count up
/*0x4540*/      bic r2, r2, #0x1000000  ; r2 = r2 & ~0x1000000
/*0x4544*/      str r2, [r0]            ; *(GPTM.CNTCFR) = r2
/*0x4546*/      ldr r2, [r0]            ; r2 = *(GPTM.CNTCFR)
/*0x4548*/      ldr r3, [r1, #4]        ; r3 = *(gptm_config->CounterMode)
/*0x454a*/      orrs r2, r3             ; r2 = r2 | r3
/*0x454c*/      str r2, [r0]            ; *(GPTM.CNTCFR) = r2
/*0x454e*/      ldrh r1, [r1, #8]       ; r1 = *(uint16_t*)(gptm_config->PSCReloadTime)
/*0x4550*/      str r1, [r0, #0x78]     ; *(GPTM.EVGR) = r1
/*0x4552*/      bx lr

            .thumb_func
            call_4554:
/*0x4554*/      movs r1, #0         ; r1 = 0
/*0x4556*/      movw r2, #0xffff    ; r2 = 0xffff
/*0x455a*/      str r1, [r0, #4]    ; *(arg1+4) = 0
/*0x455c*/      strh r2, [r0]       ; *(uint16_t*)arg1 = 0xffff
/*0x455e*/      strh r1, [r0, #2]   ; *(uint16_t*)(arg1+2) = 0
/*0x4560*/      mov.w r1, #0x100    ; r1 = 0x100
/*0x4564*/      strh r1, [r0, #8]   ; *(uint16_t*)(arg1+8) = 0
/*0x4566*/      bx lr

            .thumb_func
            call_4568:
/*0x4568*/      push {lr}
                ; set 0x20000040 to 1 if 0
/*0x456a*/      bl call_4584
/*0x456e*/      ldr r0, [pc, #0x10] /* r0 = 0x20000040 */
/*0x4570*/      ldrb r1, [r0]       ; r1 = (uint8_t)*(20000040)
/*0x4572*/      cmp r1, #1
/*0x4574*/      bne jump_457a       ; r1 != 1 ? jump_457a : continue
                ; write 2 to 0x20000040 if it was 1 previously
/*0x4576*/      movs r1, #2         ; r1 = 2
/*0x4578*/      strb r1, [r0]       ; *(uint8_t*)r0 = r1
            jump_457a:
/*0x457a*/      movs r0, #1         ; r0 = 1
/*0x457c*/      pop {pc}

/*0x457e*/  .byte 0x00
/*0x457f*/  .byte 0x00

            data_4580:
/*0x4580*/  .word 0x20000040


            .thumb_func
            call_4584:
            ; set 0x20000040 to 1 if 0
/*0x4584*/      ldr r0, [pc, #0xc] /* r0 = 0x20000040 */
/*0x4586*/      ldrb r1, [r0]       ; r1 = (uint8_t)*(0x20000040)
/*0x4588*/      cbnz r1, jump_458e  ; r1 != 0 ? jump_458e : continue
                ; write 1 to 0x20000040 if not set
/*0x458a*/      movs r1, #1         ; r1 = 1
/*0x458c*/      strb r1, [r0]       ; *(uint8_t*)r0 = r1
            jump_458e:
/*0x458e*/      movs r0, #1         ; r0 = 1
/*0x4590*/      bx lr

/*0x4592*/  .byte 0x00
/*0x4593*/  .byte 0x00

            data_4594:
/*0x4594*/  .word 0x20000040


            .thumb_func
            do_nothing_1:
/*0x4598*/      bx lr

/*0x459a*/  .byte 0x00
/*0x459b*/  .byte 0x00


            .thumb_func
            call_459c:
/*0x459c*/      push {r4, lr}
/*0x459e*/      movs r4, #0         ; r4 = 0
/*0x45a0*/      cbz r0, jump_45c4   ; arg1 == 0 ? jump_45c4 : continue
/*0x45a2*/      bl call_4b70
/*0x45a6*/      cmp r0, #0
/*0x45a8*/      beq jump_4610       ; r0 == 0 ? jump_4610 : continue
/*0x45aa*/      movs r1, #0xf       ; r1 = 0xf
/*0x45ac*/      ldr r0, [pc, #0x64] /* r0 = 0x20000b10 */
/*0x45ae*/      bl _memzero
/*0x45b2*/      ldr r0, [pc, #0x64] /* r0 = 0x20000058 */
/*0x45b4*/      ldrb r1, [r0]       ; r1 = *(uint8_t*)0x20000058
/*0x45b6*/      str r4, [r0]        ; *(uint8_t*)0x20000058 = 0
/*0x45b8*/      lsls r1, r1, #0x1b  ; r1 = r1 << 0x1b
/*0x45ba*/      bpl jump_45c4       ; r1 >= 0 ? jump_45c4 : continue
/*0x45bc*/      ldrb r1, [r0]       ; r1 = *(uint8_t*)0x20000058
/*0x45be*/      orr r1, r1, #0x10   ; r1 = r1 | 0x10
/*0x45c2*/      strb r1, [r0]       ; *(uint8_t*)0x20000058 = r1
            jump_45c4:
/*0x45c4*/      ldr r0, [pc, #0x50] /* r0 = 0x20000058 */
/*0x45c6*/      movs r1, #0x1d      ; r1 = 0x1d
/*0x45c8*/      .short 0x1d00 /* adds r0, r0, #4 */ ; r0 = 0x2000005c
/*0x45ca*/      strb r4, [r0, #2]   ; *(uint8_t*)0x2000005e = 0
/*0x45cc*/      ldr r0, [pc, #0x4c] /* r0 = 0x20000038 */
/*0x45ce*/      str r4, [r0]        ; *0x20000038 = 0
/*0x45d0*/      str r4, [r0, #4]    ; *0x2000003c = 0
/*0x45d2*/      ldr r0, [pc, #0x4c] /* r0 = 0x20000019 */
/*0x45d4*/      movs r4, #1         ; r4 = 1
/*0x45d6*/      strb r4, [r0]       ; *0x20000019 = 1
/*0x45d8*/      ldr r0, [pc, #0x48] /* r0 = 0x200009d2 */
                ; clear 0x1d bytes starting at 0x200009d2
/*0x45da*/      bl _memzero
/*0x45de*/      ldr r0, [pc, #0x48] /* r0 = 0x20000018 */
/*0x45e0*/      ldr r1, [pc, #0x48] /* r1 = 0x2000001c */
/*0x45e2*/      strb r4, [r0]       ; *(uint8_t*)0x20000018 = 1
/*0x45e4*/      ldrb r0, [r1, #1]   ; r0 = *(uint8_t*)0x2000001d
/*0x45e6*/      bic r0, r0, #7      ; r0 = r0 & ~7
/*0x45ea*/      strb r0, [r1, #1]   ; *(uint8_t*)0x2000001d = r0
/*0x45ec*/      ldr r0, [pc, #0x40] /* r0 = 0x2000001a */
/*0x45ee*/      strb r4, [r0]       ; *(uint8_t*)0x2000001a = 1
/*0x45f0*/      ldr r0, [pc, #0x40] /* r0 = 0x20000030 */
/*0x45f2*/      ldrb r1, [r0, #1]   ; r1 = *(uint8_t*)0x20000031
/*0x45f4*/      bic r1, r1, #0xff   ; r1 = r1 & ~0xff
/*0x45f8*/      strb r1, [r0, #1]   ; *(uint8_t*)0x20000031 = r1
/*0x45fa*/      ldrb r1, [r0, #2]   ; r1 = *(uint8_t*)0x20000032
/*0x45fc*/      bic r1, r1, #0xff   ; r1 = r1 & ~0xff
/*0x4600*/      strb r1, [r0, #2]   ; *(uint8_t*)0x20000032 = r1
/*0x4602*/      ldrb r1, [r0, #3]   ; r1 = *(uint8_t*)0x20000033
/*0x4604*/      bic r1, r1, #3      ; r1 = r1 & ~0x3
/*0x4608*/      strb r1, [r0, #3]   ; *(uint8_t*)0x20000033 = r1
/*0x460a*/      ldr r0, [pc, #0x2c] /* r0 = 0x2000001b */
/*0x460c*/      strb r4, [r0]       ; *(uint8_t*)0x20000030 = 1
/*0x460e*/      movs r0, #1         ; r0 = 1
            jump_4610:
/*0x4610*/      pop {r4, pc}

/*0x4612*/  .byte 0x00
/*0x4613*/  .byte 0x00

            data_4614:
/*0x4614*/  .word 0x20000b10
            data_4618:
/*0x4618*/  .word 0x20000058
            data_461c:
/*0x461c*/  .word 0x20000038
            data_4620:
/*0x4620*/  .word 0x20000019
            data_4624:
/*0x4624*/  .word 0x200009d2
            data_4628:
/*0x4628*/  .word 0x20000018
            data_462c:
/*0x462c*/  .word 0x2000001c
            data_4630:
/*0x4630*/  .word 0x2000001a
            data_4634:
/*0x4634*/  .word 0x20000030
            data_4638:
/*0x4638*/  .word 0x2000001b


            .thumb_func
            call_463c:
/*0x463c*/      mov.w r1, #0x100
/*0x4640*/      ldr r2, [pc, #0x14] /* data_4658 */
/*0x4642*/      b jump_464e
            jump_4644:
/*0x4644*/      ldrb r3, [r2, r1]
/*0x4646*/      cmp r3, r0
/*0x4648*/      bne jump_464e
/*0x464a*/      uxtb r0, r1
/*0x464c*/      bx lr
            jump_464e:
/*0x464e*/      .short 0x1e49 /* subs r1, r1, #1 */
/*0x4650*/      uxth r1, r1
/*0x4652*/      bhs jump_4644
/*0x4654*/      movs r0, #0
/*0x4656*/      bx lr

            data_4658:
/*0x4658*/  .word 0x20000b1f

            jump_465c:
/*0x465c*/      push.w {r4, r5, r6, r7, r8, lr}
/*0x4660*/      mov r5, r1          ; r5 = arg2
/*0x4662*/      mov r4, r0          ; r4 = arg1
/*0x4664*/      mov.w r1, #0x100    ; (len) r1 = 0x100
/*0x4668*/      ldr r0, [pc, #0x4c] /* (dst) r0 = 0x20000b1f */
/*0x466a*/      bl _memzero
/*0x466e*/      movs r1, #0x20      ; (len) r1 = 0x20
/*0x4670*/      ldr r0, [pc, #0x48] /* (dst) r0 = 0x20000c20 */
/*0x4672*/      bl _memzero
/*0x4676*/      ldr r6, [pc, #0x40] /* r6 = 0x20000b1f */
/*0x4678*/      ldr r2, [pc, #0x40] /* r2 = 0x20000c20 */
/*0x467a*/      movs r3, #1         ; r3 = 1
/*0x467c*/      b jump_46a0
            jump_467e:
/*0x467e*/      ldrb r1, [r4]       ; r1 = *(uint8_t*)r4
/*0x4680*/      ldrb r0, [r4, #1]   ; r0 = *(uint8_t*)(r4+1)
/*0x4682*/      strb r0, [r6, r1]   ; *(0x20000b1f+r1) = r0
/*0x4684*/      ldrb r0, [r4, #2]   ; r0 = *(uint8_t*)(r4+2)
/*0x4686*/      cbz r0, jump_469e   ; r0 == 0 ? jump_469e : continue
/*0x4688*/      ldrb r1, [r4]       ; r1 = *(uint8_t*)r4
/*0x468a*/      lsrs r0, r1, #5     ; r0 = r1 >> 5
/*0x468c*/      and r1, r1, #0x1f   ; r1 = r1 & 0x1f
/*0x4690*/      ldr.w r7, [r2, r0, lsl #2]  ; r7 = *(uint16_t*)(r2 + (r0*4))
/*0x4694*/      lsl.w r1, r3, r1    ; r1 = r3 << r1
/*0x4698*/      orrs r7, r1         ; r7 = r7 | r1
/*0x469a*/      str.w r7, [r2, r0, lsl #2]  ; *(uint16_t*)(r2+(r0*4)) = r7
            jump_469e:
/*0x469e*/      .short 0x1ce4 /* adds r4, r4, #3 */ ; r4 = r4 + 3
            jump_46a0:
/*0x46a0*/      .short 0x1e6d /* subs r5, r5, #1 */ ; r5 = r5 - 1
/*0x46a2*/      uxtb r5, r5     ; r5 = r5
/*0x46a4*/      bhs jump_467e   ; r5 >= 0 ? jump_467e : continue
/*0x46a6*/      movs r0, #0     ; r0 = 0
/*0x46a8*/      bl call_459c
/*0x46ac*/      ldr r1, [pc, #0x10] /* r1 = 0x20000058 */
/*0x46ae*/      movs r0, #0     ; r0 = 0
/*0x46b0*/      str r0, [r1]    ; *0x20000058 = 0
/*0x46b2*/      pop.w {r4, r5, r6, r7, r8, pc}

/*0x46b6*/  .byte 0x00
/*0x46b7*/  .byte 0x00

            data_46b8:
/*0x46b8*/  .word 0x20000b1f
            data_46bc:
/*0x46bc*/  .word 0x20000c20
            data_46c0:
/*0x46c0*/  .word 0x20000058


            .thumb_func
            call_46c4:
/*0x46c4*/      push.w {r4, r5, r6, r7, r8, lr}
/*0x46c8*/      lsrs r1, r0, #8
/*0x46ca*/      lsls r1, r1, #0x1d
/*0x46cc*/      bpl jump_46d4
/*0x46ce*/      bl call_4dec
/*0x46d2*/      b jump_47ce
            jump_46d4:
/*0x46d4*/      ubfx r6, r0, #0x10, #8
/*0x46d8*/      lsrs r1, r0, #8
/*0x46da*/      sub.w ip, r6, #0xec
/*0x46de*/      movs r4, #1
/*0x46e0*/      ubfx r1, r1, #1, #1
/*0x46e4*/      cmp.w ip, #0x11
/*0x46e8*/      bhi jump_4784
/*0x46ea*/      ldr r2, [pc, #0xe8] /* data_47d4 */
/*0x46ec*/      cmp.w ip, #0x12
/*0x46f0*/      ldrb r5, [r2, #1]
/*0x46f2*/      ldrb r3, [r2, #2]
/*0x46f4*/      ldrb r7, [r2, #3]
/*0x46f6*/      bhs jump_477e
/*0x46f8*/      tbb [pc, ip]

/*0x46fc*/  .byte 0x09 /* case switch_470e */
/*0x46fd*/  .byte 0x0c /* case switch_4714 */
/*0x46fe*/  .byte 0x10 /* case switch_471c */
/*0x46ff*/  .byte 0x13 /* case switch_4722 */
/*0x4700*/  .byte 0x16 /* case switch_4728 */
/*0x4701*/  .byte 0x19 /* case switch_472e */
/*0x4702*/  .byte 0x1c /* case switch_4734 */
/*0x4703*/  .byte 0x1f /* case switch_473a */
/*0x4704*/  .byte 0x22 /* case switch_4740 */
/*0x4705*/  .byte 0x25 /* case switch_4746 */
/*0x4706*/  .byte 0x29 /* case switch_474e */
/*0x4707*/  .byte 0x2c /* case switch_4754 */
/*0x4708*/  .byte 0x2f /* case switch_475a */
/*0x4709*/  .byte 0x32 /* case switch_4760 */
/*0x470a*/  .byte 0x35 /* case switch_4766 */
/*0x470b*/  .byte 0x38 /* case switch_476c */
/*0x470c*/  .byte 0x3b /* case switch_4772 */
/*0x470d*/  .byte 0x3e /* case switch_4778 */

            switch_470e:
/*0x470e*/      bfi r5, r1, #0, #1
/*0x4712*/      b jump_4718
            switch_4714:
/*0x4714*/      bfi r5, r1, #1, #1
            jump_4718:
/*0x4718*/      strb r5, [r2, #1]
/*0x471a*/      b jump_477e
            switch_471c:
/*0x471c*/      bfi r5, r1, #2, #1
/*0x4720*/      b jump_4718
            switch_4722:
/*0x4722*/      bfi r5, r1, #3, #1
/*0x4726*/      b jump_4718
            switch_4728:
/*0x4728*/      bfi r5, r1, #4, #1
/*0x472c*/      b jump_4718
            switch_472e:
/*0x472e*/      bfi r5, r1, #5, #1
/*0x4732*/      b jump_4718
            switch_4734:
/*0x4734*/      bfi r5, r1, #6, #1
/*0x4738*/      b jump_4718
            switch_473a:
/*0x473a*/      bfi r5, r1, #7, #1
/*0x473e*/      b jump_4718
            switch_4740:
/*0x4740*/      bfi r3, r1, #0, #1
/*0x4744*/      b jump_474a
            switch_4746:
/*0x4746*/      bfi r3, r1, #1, #1
            jump_474a:
/*0x474a*/      strb r3, [r2, #2]
/*0x474c*/      b jump_477e
            switch_474e:
/*0x474e*/      bfi r3, r1, #2, #1
/*0x4752*/      b jump_474a
            switch_4754:
/*0x4754*/      bfi r3, r1, #3, #1
/*0x4758*/      b jump_474a
            switch_475a:
/*0x475a*/      bfi r3, r1, #4, #1
/*0x475e*/      b jump_474a
            switch_4760:
/*0x4760*/      bfi r3, r1, #5, #1
/*0x4764*/      b jump_474a
            switch_4766:
/*0x4766*/      bfi r3, r1, #6, #1
/*0x476a*/      b jump_474a
            switch_476c:
/*0x476c*/      bfi r3, r1, #7, #1
/*0x4770*/      b jump_474a
            switch_4772:
/*0x4772*/      bfi r7, r1, #0, #1
/*0x4776*/      b jump_477c
            switch_4778:
/*0x4778*/      bfi r7, r1, #1, #1
            jump_477c:
/*0x477c*/      strb r7, [r2, #3]
            jump_477e:
/*0x477e*/      ldr r1, [pc, #0x58] /* data_47d8 */
/*0x4780*/      strb r4, [r1]
/*0x4782*/      b jump_47ac
            jump_4784:
/*0x4784*/      ldr r3, [pc, #0x54] /* data_47dc */
/*0x4786*/      ldr r5, [pc, #0x58] /* data_47e0 */
/*0x4788*/      cmp r6, #0xe9
/*0x478a*/      ldrb r2, [r3, #1]
/*0x478c*/      beq jump_4798
/*0x478e*/      cmp r6, #0xea
/*0x4790*/      beq jump_479e
/*0x4792*/      cmp r6, #0xeb
/*0x4794*/      bne jump_47ac
/*0x4796*/      b jump_47a4
            jump_4798:
/*0x4798*/      bfi r2, r1, #0, #1
/*0x479c*/      b jump_47a8
            jump_479e:
/*0x479e*/      bfi r2, r1, #1, #1
/*0x47a2*/      b jump_47a8
            jump_47a4:
/*0x47a4*/      bfi r2, r1, #2, #1
            jump_47a8:
/*0x47a8*/      strb r2, [r3, #1]
/*0x47aa*/      strb r4, [r5]
            jump_47ac:
/*0x47ac*/      bl call_47f4
/*0x47b0*/      cmp r0, #1
/*0x47b2*/      beq jump_47ba
/*0x47b4*/      movs r0, #0
            jump_47b6:
/*0x47b6*/      pop.w {r4, r5, r6, r7, r8, pc}
            jump_47ba:
/*0x47ba*/      ldr r0, [pc, #0x28] /* data_47e4 */
/*0x47bc*/      ldr r1, [pc, #0x28] /* data_47e8 */
/*0x47be*/      ldrb.w r0, [r0, #0x2b]
/*0x47c2*/      ldrh.w r0, [r1, r0, lsl #1]
/*0x47c6*/      ldr r1, [pc, #0x24] /* data_47ec */
/*0x47c8*/      strh r0, [r1]
/*0x47ca*/      ldr r0, [pc, #0x24] /* data_47f0 */
/*0x47cc*/      strb r4, [r0]
            jump_47ce:
/*0x47ce*/      movs r0, #1
/*0x47d0*/      b jump_47b6

/*0x47d2*/  .byte 0x00
/*0x47d3*/  .byte 0x00

            data_47d4:
/*0x47d4*/  .word 0x20000030
            data_47d8:
/*0x47d8*/  .word 0x2000001b
            data_47dc:
/*0x47dc*/  .word 0x2000001c
            data_47e0:
/*0x47e0*/  .word 0x2000001a
            data_47e4:
/*0x47e4*/  .word 0x20000d34
            data_47e8:
/*0x47e8*/  .word 0x00009bae /* possible pointer */
            data_47ec:
/*0x47ec*/  .word 0x20000054
            data_47f0:
/*0x47f0*/  .word 0x20000019


            .thumb_func
            call_47f4:
/*0x47f4*/      push.w {r4, r5, r6, r7, r8, sb, sl, fp, lr}
/*0x47f8*/      ldr.w ip, [pc, #0x108] /* data_4904 */
/*0x47fc*/      mov r2, ip
/*0x47fe*/      ldrb.w r1, [ip, #2]
/*0x4802*/      ldrb r5, [r2, #4]
/*0x4804*/      ldrb r4, [r2, #3]
/*0x4806*/      lsls r3, r1, #0x1f
/*0x4808*/      beq jump_481c
/*0x480a*/      lsls r1, r1, #0x1e
/*0x480c*/      bpl jump_4818
/*0x480e*/      ldr r1, [pc, #0xf8] /* data_4908 */
/*0x4810*/      ldrb r2, [r4, r1]
/*0x4812*/      orrs r2, r5
/*0x4814*/      strb r2, [r4, r1]
/*0x4816*/      b jump_481c
            jump_4818:
/*0x4818*/      ldr r1, [pc, #0xf0] /* data_490c */
/*0x481a*/      strb r5, [r4, r1]
            jump_481c:
/*0x481c*/      ubfx r2, r0, #0x10, #8
/*0x4820*/      and r1, r2, #7
/*0x4824*/      mov.w sl, #1
/*0x4828*/      ldr r7, [pc, #0xe0] /* data_490c */
/*0x482a*/      lsl.w r8, sl, r1
/*0x482e*/      sub.w r6, r2, #0xe0
/*0x4832*/      .short 0x1ebf /* subs r7, r7, #2 */
/*0x4834*/      ubfx r3, r0, #8, #8
/*0x4838*/      cmp r6, #7
/*0x483a*/      bhi jump_4850
/*0x483c*/      lsls r1, r3, #0x1e
/*0x483e*/      ldrb r1, [r7]
/*0x4840*/      and r0, r8, #0xff
/*0x4844*/      bpl jump_484a
/*0x4846*/      orrs r1, r0
/*0x4848*/      b jump_484c
            jump_484a:
/*0x484a*/      bics r1, r0
            jump_484c:
/*0x484c*/      strb r1, [r7]
/*0x484e*/      b jump_48fe
            jump_4850:
/*0x4850*/      cmp r2, #0x91
/*0x4852*/      bhi jump_48fe
/*0x4854*/      movs r1, #0
/*0x4856*/      mov fp, r1
            jump_4858:
/*0x4858*/      adds r6, r7, r1
/*0x485a*/      ldrb r6, [r6, #2]
/*0x485c*/      cmp r6, r2
/*0x485e*/      bne jump_4876
/*0x4860*/      lsls r0, r3, #0x1e
/*0x4862*/      bmi jump_48fe
/*0x4864*/      add r1, r7
/*0x4866*/      mov r0, fp
/*0x4868*/      strb.w fp, [r1, #2]
/*0x486c*/      cmp r5, r2
/*0x486e*/      bne jump_48fe
/*0x4870*/      strb.w r0, [ip, #2]
/*0x4874*/      b jump_48fe
            jump_4876:
/*0x4876*/      .short 0x1c49 /* adds r1, r1, #1 */
/*0x4878*/      uxtb r1, r1
/*0x487a*/      cmp r1, #6
/*0x487c*/      blo jump_4858
/*0x487e*/      ldr r6, [pc, #0x84] /* data_4904 */
/*0x4880*/      lsls r1, r3, #0x1e
/*0x4882*/      sub.w r6, r6, #4
/*0x4886*/      ldrb r6, [r6, #1]
/*0x4888*/      bpl jump_489e
/*0x488a*/      movs r1, #0
/*0x488c*/      mov sb, r7
            jump_488e:
/*0x488e*/      add.w r7, sb, r1
/*0x4892*/      ldrb r7, [r7, #2]
/*0x4894*/      cbz r7, jump_48ce
/*0x4896*/      .short 0x1c49 /* adds r1, r1, #1 */
/*0x4898*/      uxtb r1, r1
/*0x489a*/      cmp r1, #6
/*0x489c*/      blo jump_488e
            jump_489e:
/*0x489e*/      lsrs r2, r2, #3
/*0x48a0*/      lsls r7, r3, #0x1e
/*0x48a2*/      ldr r3, [pc, #0x64] /* data_4908 */
/*0x48a4*/      ubfx r0, r0, #0x10, #8
/*0x48a8*/      sub.w r3, r3, #2
/*0x48ac*/      and r1, r8, #0xff
/*0x48b0*/      add.w r0, r3, r0, lsr #3
/*0x48b4*/      bpl jump_48e6
/*0x48b6*/      lsls r3, r6, #0x1c
/*0x48b8*/      bmi jump_48c8
/*0x48ba*/      strb.w r2, [ip, #3]
/*0x48be*/      strb.w r1, [ip, #4]
/*0x48c2*/      movs r2, #3
/*0x48c4*/      strb.w r2, [ip, #2]
            jump_48c8:
/*0x48c8*/      ldrb r2, [r0, #2]
/*0x48ca*/      orrs r2, r1
/*0x48cc*/      b jump_48f6
            jump_48ce:
/*0x48ce*/      lsls r0, r6, #0x1c
/*0x48d0*/      bmi jump_48de
/*0x48d2*/      strb.w r1, [ip, #3]
/*0x48d6*/      strb.w r2, [ip, #4]
/*0x48da*/      strb.w sl, [ip, #2]
            jump_48de:
/*0x48de*/      add.w r0, sb, r1
/*0x48e2*/      strb r2, [r0, #2]
/*0x48e4*/      b jump_48fe
            jump_48e6:
/*0x48e6*/      cmp r4, r2
/*0x48e8*/      bne jump_48f2
/*0x48ea*/      cmp r5, r1
/*0x48ec*/      bne jump_48f2
/*0x48ee*/      strb.w fp, [ip, #2]
            jump_48f2:
/*0x48f2*/      ldrb r2, [r0, #2]
/*0x48f4*/      bics r2, r1
            jump_48f6:
/*0x48f6*/      ldr r1, [pc, #0x18] /* data_4910 */
/*0x48f8*/      strb r2, [r0, #2]
/*0x48fa*/      strb.w sl, [r1]
            jump_48fe:
/*0x48fe*/      movs r0, #1
/*0x4900*/      pop.w {r4, r5, r6, r7, r8, sb, sl, fp, pc}

            data_4904:
/*0x4904*/  .word 0x2000005c
            data_4908:
/*0x4908*/  .word 0x200009d2
            data_490c:
/*0x490c*/  .word 0x2000003a
            data_4910:
/*0x4910*/  .word 0x20000018


            .thumb_func
            call_4914:
/*0x4914*/      push.w {r4, r5, r6, r7, r8, lr}
/*0x4918*/      ldr r4, [pc, #0x134] 	/* r4 = 0x20000058 */
/*0x491a*/      ldr r2, [pc, #0x138] 	/* r2 = 0x000099ea */
/*0x491c*/      and r7, r0, #7			; r7 = r0 & 7
/*0x4920*/      strb r0, [r4, #3]		; *(uint8_t*)0x2000005b = arg1
/*0x4922*/      ldrb r3, [r2, r0]		; r3 = *(uint8_t*)(r2+arg1)
/*0x4924*/      lsrs r6, r0, #3			; r6 = r0 >> 3
/*0x4926*/      strb r3, [r4, #2]		; *(uint8_t*)0x2000005a = r3
/*0x4928*/      ldrb r0, [r4, #1]		; r0 = *(uint8_t*)0x20000059
/*0x492a*/      movs r5, #1				; r5 = 1
/*0x492c*/      bic r2, r0, #1			; r2 = r0 & ~1
/*0x4930*/      bfi r2, r1, #1, #1		; r2[0] = r1[1]
/*0x4934*/      mov r0, r4				; r0 = 0x20000058
/*0x4936*/      strb r2, [r4, #1]		; *(0x20000059) = r2
/*0x4938*/      ldrb r0, [r0]			; r0 = *(uint8_t*)0x20000058
/*0x493a*/      cmp r3, #0xe8
/*0x493c*/      beq jump_4968			; r3 == 0xe8 ? jump_4968 : continue
/*0x493e*/      lsl.w r7, r5, r7		; r7 = r5 << r7
/*0x4942*/      mov.w ip, #0x1c			; ip = 0x1c
/*0x4946*/      uxtb r7, r7
/*0x4948*/      cmp.w ip, r3, lsr #3
/*0x494c*/      bne jump_498e			; ip != (r3>>3) ? jump_498e : continue
/*0x494e*/      ands ip, r3, #3			; ip = r3 & 3
/*0x4952*/      beq jump_4976			; ip == 0 ? jump_4976 : continue
/*0x4954*/      cmp.w ip, #1
/*0x4958*/      beq jump_497c			; ip == 1 ? jump_497c : continue
/*0x495a*/      cmp.w ip, #2
/*0x495e*/      beq jump_4982			; ip == 2 ? jump_4982 : continue
/*0x4960*/      cmp.w ip, #3
/*0x4964*/      bne jump_4998			; ip != 3 ? jump_4998 : continue
/*0x4966*/      b jump_4988
            jump_4968:
/*0x4968*/      bfi r0, r1, #4, #1		; r0 = r1[4]
/*0x496c*/      strb r0, [r4]			; *(uint8_t*)r4 = r0
/*0x496e*/      bic r0, r2, #4			; r0 = r2 & ~4
/*0x4972*/      strb r0, [r4, #1]		; *(uint8_t*)(r4+1) = r0
/*0x4974*/      b jump_49b0
            jump_4976:
/*0x4976*/      bfi r0, r1, #0, #1
/*0x497a*/      b jump_4996
            jump_497c:
/*0x497c*/      bfi r0, r1, #2, #1
/*0x4980*/      b jump_4996
            jump_4982:
/*0x4982*/      bfi r0, r1, #1, #1
/*0x4986*/      b jump_4996
            jump_4988:
/*0x4988*/      bfi r0, r1, #3, #1
/*0x498c*/      b jump_4996
            jump_498e:
/*0x498e*/      cmp r3, #0x39
/*0x4990*/      bne jump_4998
/*0x4992*/      bfi r0, r1, #5, #1
            jump_4996:
/*0x4996*/      strb r0, [r4]
            jump_4998:
/*0x4998*/      ldr.w ip, [pc, #0xbc] /* data_4a58 */
/*0x499c*/      cbz r1, jump_49de
/*0x499e*/      ldrb r0, [r4]
/*0x49a0*/      lsls r0, r0, #0x1b
/*0x49a2*/      bpl jump_49f2
/*0x49a4*/      ldrb.w r0, [ip, r6]
/*0x49a8*/      orrs r0, r7
/*0x49aa*/      b jump_49e8
            jump_49ac:
/*0x49ac*/      strb r0, [r4, #1]
/*0x49ae*/      cbz r3, jump_4a10
            jump_49b0:
/*0x49b0*/      ldr r0, [r4]
/*0x49b2*/      bl call_54d8
/*0x49b6*/      ldr r0, [pc, #0xa4] /* data_4a5c */
/*0x49b8*/      mov.w r6, #0
/*0x49bc*/      ldrb r0, [r0]
/*0x49be*/      lsls r0, r0, #0x1f
/*0x49c0*/      beq jump_49f8
/*0x49c2*/      ldrb r0, [r4, #1]
/*0x49c4*/      lsls r1, r0, #0x1d
/*0x49c6*/      bpl jump_49d0
            jump_49c8:
/*0x49c8*/      bic r0, r0, #4
/*0x49cc*/      strb r0, [r4, #1]
/*0x49ce*/      strb r6, [r4, #2]
            jump_49d0:
/*0x49d0*/      bl call_5124
/*0x49d4*/      ldr r0, [r4]
/*0x49d6*/      pop.w {r4, r5, r6, r7, r8, lr}
/*0x49da*/      b.w call_46c4
            jump_49de:
/*0x49de*/      ldrb.w r0, [ip, r6]
/*0x49e2*/      tst r0, r7
/*0x49e4*/      beq jump_49f2
/*0x49e6*/      bics r0, r7
            jump_49e8:
/*0x49e8*/      strb.w r0, [ip, r6]
/*0x49ec*/      orr r0, r2, #4
/*0x49f0*/      b jump_49ac
            jump_49f2:
/*0x49f2*/      bic r0, r2, #4
/*0x49f6*/      b jump_49ac
            jump_49f8:
/*0x49f8*/      bl call_50ac
/*0x49fc*/      cmp r0, #0
/*0x49fe*/      ldrb r0, [r4, #2]
/*0x4a00*/      beq jump_4a06
/*0x4a02*/      cbz r0, jump_4a10
/*0x4a04*/      b jump_49d0
            jump_4a06:
/*0x4a06*/      cmp r0, #0xe8
/*0x4a08*/      beq jump_4a10
/*0x4a0a*/      bl call_6414
/*0x4a0e*/      cbz r0, jump_4a16
            jump_4a10:
/*0x4a10*/      movs r0, #1
/*0x4a12*/      pop.w {r4, r5, r6, r7, r8, pc}
            jump_4a16:
/*0x4a16*/      ldrb r0, [r4, #1]
/*0x4a18*/      lsls r1, r0, #0x1d
/*0x4a1a*/      bpl jump_49d0
/*0x4a1c*/      lsls r1, r0, #0x1f
/*0x4a1e*/      bne jump_49d0
/*0x4a20*/      ldr r2, [pc, #0x34] /* data_4a58 */
/*0x4a22*/      ldrb r1, [r4, #2]
/*0x4a24*/      adds r2, #0xf
/*0x4a26*/      ldrb r2, [r2, r1]
/*0x4a28*/      cmp r2, #0
/*0x4a2a*/      beq jump_49c8
/*0x4a2c*/      ldr r6, [pc, #0x30] /* data_4a60 */
/*0x4a2e*/      lsrs r3, r1, #5
/*0x4a30*/      and r1, r1, #0x1f
/*0x4a34*/      ldr.w r3, [r6, r3, lsl #2]
/*0x4a38*/      lsls r5, r1
/*0x4a3a*/      tst r3, r5
/*0x4a3c*/      beq jump_4a44
/*0x4a3e*/      orr r0, r0, #4
/*0x4a42*/      b jump_4a48
            jump_4a44:
/*0x4a44*/      bic r0, r0, #4
            jump_4a48:
/*0x4a48*/      strb r0, [r4, #1]
/*0x4a4a*/      strb r2, [r4, #2]
/*0x4a4c*/      b jump_49d0

/*0x4a4e*/  .byte 0x00
/*0x4a4f*/  .byte 0x00

            data_4a50:
/*0x4a50*/  .word 0x20000058
            data_4a54:
/*0x4a54*/  .word 0x000099ea /* possible pointer */
            data_4a58:
/*0x4a58*/  .word 0x20000b10
            data_4a5c:
/*0x4a5c*/  .word 0x20000076
            data_4a60:
/*0x4a60*/  .word 0x20000c20


            .thumb_func
            call_4a64:
/*0x4a64*/      push {r4, r5, r6, r7, lr}
/*0x4a66*/      movs r5, #0
/*0x4a68*/      b jump_4a8a
            jump_4a6a:
/*0x4a6a*/      movs r4, #0
/*0x4a6c*/      b jump_4a7a
            jump_4a6e:
/*0x4a6e*/      ldrb r6, [r0, r5]
/*0x4a70*/      ldrb r7, [r1, r4]
/*0x4a72*/      cmp r6, r7
/*0x4a74*/      beq jump_4a7e
/*0x4a76*/      .short 0x1c64 /* adds r4, r4, #1 */
/*0x4a78*/      uxtb r4, r4
            jump_4a7a:
/*0x4a7a*/      cmp r4, r3
/*0x4a7c*/      blo jump_4a6e
            jump_4a7e:
/*0x4a7e*/      cmp r4, r3
/*0x4a80*/      bne jump_4a86
/*0x4a82*/      movs r0, #0
/*0x4a84*/      pop {r4, r5, r6, r7, pc}
            jump_4a86:
/*0x4a86*/      .short 0x1c6d /* adds r5, r5, #1 */
/*0x4a88*/      uxtb r5, r5
            jump_4a8a:
/*0x4a8a*/      cmp r5, r2
/*0x4a8c*/      blo jump_4a6a
/*0x4a8e*/      movs r0, #1
/*0x4a90*/      pop {r4, r5, r6, r7, pc}

/*0x4a92*/  .byte 0x00
/*0x4a93*/  .byte 0x00


            .thumb_func
            call_4a94:
/*0x4a94*/      push.w {r4, r5, r6, r7, r8, sb, lr}
/*0x4a98*/      movs r3, #0xf           ; r3 = 0xf
/*0x4a9a*/      movs r4, #0             ; r4 = 0
/*0x4a9c*/      ldr.w sb, [pc, #0x4c]   /* sb = 0x20000094 */
/*0x4aa0*/      mov.w ip, #1            ; ip = 1
/*0x4aa4*/      ldr.w r8, [pc, #0x48]   /* r8 = 0x000099ea */
/*0x4aa8*/      b jump_4ada
            jump_4aaa:
/*0x4aaa*/      ldrb.w r5, [sb, r3]     ; r5 = *(uint8_t*)(sb+r3)
/*0x4aae*/      cmp r5, #0xff
/*0x4ab0*/      beq jump_4ada           ; r5 == 0xff ? jump_4ada : continue
/*0x4ab2*/      movs r2, #8             ; r2 = 8
/*0x4ab4*/      add.w r7, r8, r3, lsl #3 ; r7 = r8 + (r3*8)
/*0x4ab8*/      b jump_4ad4
            jump_4aba:
/*0x4aba*/      lsl.w r6, ip, r2        ; r6 = ip << r2
/*0x4abe*/      uxtb r6, r6
/*0x4ac0*/      tst r5, r6
/*0x4ac2*/      bne jump_4ad4           ; r5 & r6 != 0 ? jump_4ad4 : continue
/*0x4ac4*/      cbz r1, jump_4ae6       ; r1 == 0 ? jump_4ae6 : continue
/*0x4ac6*/      .short 0x1e49 /* subs r1, r1, #1 */ ; r1 = r1 - 1
/*0x4ac8*/      ldrb r6, [r7, r2]       ; r6 = *(uint8_t*)(r7+r2)
/*0x4aca*/      .short 0x1c64 /* adds r4, r4, #1 */ ; r4 = r4 + 1
/*0x4acc*/      strb r6, [r0], #1       ; *(uint8_t*)r0 = r6; r0++
/*0x4ad0*/      uxtb r1, r1
/*0x4ad2*/      uxtb r4, r4
            jump_4ad4:
/*0x4ad4*/      .short 0x1e52 /* subs r2, r2, #1 */ ; r2 = r2 - 1
/*0x4ad6*/      uxtb r2, r2
/*0x4ad8*/      bhs jump_4aba           ; r2 >= 0 ? jump_4aba : continue
            jump_4ada:
/*0x4ada*/      .short 0x1e5b /* subs r3, r3, #1 */ ; r3 = r3 - 1
/*0x4adc*/      uxtb r3, r3
/*0x4ade*/      bhs jump_4aaa           ; r3 >= 0 ? jump_4aaa : continue
/*0x4ae0*/      mov r0, r4              ; r0 = r4
            jump_4ae2:
/*0x4ae2*/      pop.w {r4, r5, r6, r7, r8, sb, pc}
            jump_4ae6:
/*0x4ae6*/      movs r0, #0xff          ; r0 = 0xff
/*0x4ae8*/      b jump_4ae2             ; return

/*0x4aea*/  .byte 0x00
/*0x4aeb*/  .byte 0x00

            data_4aec:
/*0x4aec*/  .word 0x20000094
            data_4af0:
/*0x4af0*/  .word 0x000099ea /* possible pointer */


            .thumb_func
            call_4af4:
            ; r0 : disable
/*0x4af4*/      push.w {r4, r5, r6, r7, r8, lr}
/*0x4af8*/      ldr r6, [pc, #0x6c] /* r6 = BFTM0_BASE_4b68 */
/*0x4afa*/      ldr r7, [pc, #0x70] /* r7 = NVIC.ICTR_4b6c */
/*0x4afc*/      asrs r5, r6, #0x15  ; r5 = r6 >> 0x15 = 0x200
/*0x4afe*/      mov r4, r0          ; r4 = arg1
/*0x4b00*/      cmp r0, #1
/*0x4b02*/      bne jump_4b1e       ; arg1 != 1 ? jump_4b1e : continue
                ; continue if arg1 == 1
/*0x4b04*/      movs r1, #0         ; r1 = 0
/*0x4b06*/      mov r0, r6          ; r0 = BFTM0_BASE
                ; disable GPTM0
/*0x4b08*/      bl bftm_enable_compare_match
/*0x4b0c*/      movs r1, #0         ; r1 = 0
/*0x4b0e*/      mov r0, r6          ; r0 = BFTM0_BASE
/*0x4b10*/      bl bftm_enable_counter
/*0x4b14*/      mov r0, r6          ; r0 = BFTM0_BASE
/*0x4b16*/      bl bftm_clear_compare_match_interrupt
/*0x4b1a*/      str.w r5, [r7, #0x180]  ; *(NVIC.ICTR) = 0x200
            jump_4b1e:
/*0x4b1e*/      mov r0, r4          ; r0 = arg1
/*0x4b20*/      bl do_nothing_1       ; do_nothing_1 (returns after call)
/*0x4b24*/      mov r0, r4          ; r0 = arg1
/*0x4b26*/      bl spi_flash_disable
/*0x4b2a*/      mov r0, r4          ; r0 = arg1
/*0x4b2c*/      bl gpio_set_reset_key_groups
/*0x4b30*/      cmp r4, #1
/*0x4b32*/      beq jump_4b5e       ; arg1 == 1 ? jump_4b5e : continue
/*0x4b34*/      cmp r4, #0
/*0x4b36*/      bne jump_4b5a       ; arg1 != 0 ? jump_4b5a : continue
/*0x4b38*/      movs r1, #0         ; r1 = 0
/*0x4b3a*/      mov r0, r6          ; r0 = BFTM0_BASE
                ; reset BFTM0 up-counter to 0
/*0x4b3c*/      bl bftm_set_counter
/*0x4b40*/      mov r0, r6          ; r0 = BFTM0_BASE
/*0x4b42*/      bl bftm_clear_compare_match_interrupt
/*0x4b46*/      movs r1, #1         ; r1 = 1
/*0x4b48*/      mov r0, r6          ; r0 = BFTM0_BASE
/*0x4b4a*/      bl bftm_enable_counter
/*0x4b4e*/      movs r1, #1         ; r1 = 1
/*0x4b50*/      mov r0, r6          ; r0 = BFTM0_BASE
/*0x4b52*/      bl bftm_enable_compare_match
/*0x4b56*/      str.w r5, [r7, #0x100] ; *(NVIC.ISER32_63) = 0x200
            jump_4b5a:
/*0x4b5a*/      pop.w {r4, r5, r6, r7, r8, pc}
            jump_4b5e:
/*0x4b5e*/      pop.w {r4, r5, r6, r7, r8, lr}
/*0x4b62*/      movs r0, #1         ; r0 = 1
/*0x4b64*/      b.w call_6dd4

            BFTM0_BASE_4b68:
/*0x4b68*/  .word 0x40076000
            NVIC.ICTR_4b6c:
/*0x4b6c*/  .word 0xe000e004


            .thumb_func
            call_4b70:
/*0x4b70*/      push {r4, lr}
/*0x4b72*/      bl call_6c8c
/*0x4b76*/      cmp r0, #0
/*0x4b78*/      beq jump_4b90   ; r0 == 0 ? jump_4b90 : continue
/*0x4b7a*/      movs r1, #0xf   ; r1 = 0xf
/*0x4b7c*/      ldr r0, [pc, #0x24] /* r0 = 0x200000a3 */
/*0x4b7e*/      movs r3, #0xef  ; r3 = 0xef
/*0x4b80*/      b jump_4b9a
            jump_4b82:
/*0x4b82*/      .short 0x1e40 /* subs r0, r0, #1 */
/*0x4b84*/      cmp r1, #7
/*0x4b86*/      beq jump_4b92   ; r1 == 7 ? jump_4b92 : continue
/*0x4b88*/      ldrb r2, [r0]   ; r2 = *(uint8_t*)r0
/*0x4b8a*/      cmp r2, #0xff
/*0x4b8c*/      beq jump_4b9a   ; r2 == 0xff ? jump_4b9a : continue
            jump_4b8e:
/*0x4b8e*/      movs r0, #0     ; r0 = 0
            jump_4b90:
/*0x4b90*/      pop {r4, pc}    ; return 0
            jump_4b92:
/*0x4b92*/      ldrb r4, [r0]       ; r4 = *(uint8_t*)r0
/*0x4b94*/      bics.w r2, r3, r4   ; r2 = 0xef & ~r4;
/*0x4b98*/      bne jump_4b8e       ; r2 != 0 ? jump_4b8e : continue
            jump_4b9a:
/*0x4b9a*/      .short 0x1e49 /* subs r1, r1, #1 */
/*0x4b9c*/      uxtb r1, r1     ; r1 = r1
/*0x4b9e*/      bhs jump_4b82   ; r1 >= 0 ? jump_4b82 : continue
/*0x4ba0*/      movs r0, #1     ; r0 = 1
/*0x4ba2*/      pop {r4, pc}    ; return 1

            data_4ba4:
/*0x4ba4*/  .word 0x200000a3


            .thumb_func
            bftm0_clk_enable:
/*0x4ba8*/      push {r4, lr}
/*0x4baa*/      movs r1, #1         ; r1 = 1
/*0x4bac*/      lsls r0, r1, #0x10  ; r0 = 0x10000
                ; enable BFTM0 clock
/*0x4bae*/      bl call_ckcu_set_APBCCR1
/*0x4bb2*/      pop.w {r4, lr}
/*0x4bb6*/      movw r1, #0x8c9f    ; r1 = 0x8c9f
/*0x4bba*/      ldr r0, [pc, #4] /* BFTM0_BASE_4bc0 */
/*0x4bbc*/      b.w bftm_set_compare_value

            BFTM0_BASE_4bc0:
/*0x4bc0*/  .word 0x40076000


            .thumb_func
            call_4bc4:
/*0x4bc4*/      push {r4, r5, r6, r7, lr}
/*0x4bc6*/      ldr r1, [pc, #0x4c] /* data_4c14 */
/*0x4bc8*/      ldrb r0, [r1, #2]
/*0x4bca*/      lsls r2, r0, #0x1f
/*0x4bcc*/      beq jump_4c10
/*0x4bce*/      sub.w r5, r1, #8
/*0x4bd2*/      ldrh r2, [r5]
/*0x4bd4*/      cmp r2, #0
/*0x4bd6*/      bne jump_4c10
/*0x4bd8*/      ldrh r4, [r1]
/*0x4bda*/      cmp r4, #0
/*0x4bdc*/      beq jump_4c10
/*0x4bde*/      lsls r2, r0, #0x1e
/*0x4be0*/      mov r0, r1
/*0x4be2*/      mov.w r6, #1
/*0x4be6*/      ldrb r1, [r0, #4]
/*0x4be8*/      ldrb r0, [r0, #3]
/*0x4bea*/      bpl jump_4c00
/*0x4bec*/      ldr r3, [pc, #0x28] /* data_4c18 */
/*0x4bee*/      ldrb r2, [r0, r3]
/*0x4bf0*/      tst r2, r1
/*0x4bf2*/      beq jump_4bf8
/*0x4bf4*/      bics r2, r1
/*0x4bf6*/      b jump_4bfa
            jump_4bf8:
/*0x4bf8*/      orrs r2, r1
            jump_4bfa:
/*0x4bfa*/      strb r2, [r0, r3]
/*0x4bfc*/      ldr r0, [pc, #0x1c] /* data_4c1c */
/*0x4bfe*/      b jump_4c0c
            jump_4c00:
/*0x4c00*/      ldr r2, [pc, #0x1c] /* data_4c20 */
/*0x4c02*/      ldrb r3, [r0, r2]
/*0x4c04*/      cbz r3, jump_4c08
/*0x4c06*/      movs r1, #0
            jump_4c08:
/*0x4c08*/      strb r1, [r0, r2]
/*0x4c0a*/      ldr r0, [pc, #0x18] /* data_4c24 */
            jump_4c0c:
/*0x4c0c*/      strb r6, [r0]
/*0x4c0e*/      strh r4, [r5]
            jump_4c10:
/*0x4c10*/      pop {r4, r5, r6, r7, pc}

/*0x4c12*/  .byte 0x00
/*0x4c13*/  .byte 0x00

            data_4c14:
/*0x4c14*/  .word 0x2000005c
            data_4c18:
/*0x4c18*/  .word 0x200009d2
            data_4c1c:
/*0x4c1c*/  .word 0x20000018
            data_4c20:
/*0x4c20*/  .word 0x2000003a
            data_4c24:
/*0x4c24*/  .word 0x20000019


            .thumb_func
            call_4c28:
/*0x4c28*/      ldr r2, [pc, #0x2c] /* data_4c58 */
/*0x4c2a*/      ldr r0, [pc, #0x30] /* data_4c5c */
/*0x4c2c*/      ldrh r1, [r2]
/*0x4c2e*/      ldrb.w r3, [r0, #0x2a]
/*0x4c32*/      cbz r3, jump_4c52
/*0x4c34*/      ldrb.w r3, [r0, #0x2b]
/*0x4c38*/      ldrb.w r0, [r0, #0x2c]
/*0x4c3c*/      cbnz r3, jump_4c40
/*0x4c3e*/      cbz r0, jump_4c52
            jump_4c40:
/*0x4c40*/      ldr r3, [pc, #0x1c] /* data_4c60 */
/*0x4c42*/      ldrh.w r0, [r3, r0, lsl #1]
            jump_4c46:
/*0x4c46*/      strh r0, [r2]
/*0x4c48*/      cmp r0, r1
/*0x4c4a*/      beq jump_4c56
/*0x4c4c*/      movs r0, #0x12
/*0x4c4e*/      b.w call_7310
            jump_4c52:
/*0x4c52*/      movs r0, #0
/*0x4c54*/      b jump_4c46
            jump_4c56:
/*0x4c56*/      bx lr

            data_4c58:
/*0x4c58*/  .word 0x2000005c
            data_4c5c:
/*0x4c5c*/  .word 0x20000d34
            data_4c60:
/*0x4c60*/  .word 0x00009ba6 /* possible pointer */


            .thumb_func
            call_4c64:
/*0x4c64*/      ldr r1, [pc, #8] /* data_4c70 */
/*0x4c66*/      mov.w r0, #0x400
/*0x4c6a*/      strh r0, [r1]
/*0x4c6c*/      bx lr

/*0x4c6e*/  .byte 0x00
/*0x4c6f*/  .byte 0x00

            data_4c70:
/*0x4c70*/  .word 0x20000080


            .thumb_func
            call_4c74:
/*0x4c74*/      push {r3, r4, r5, lr}
/*0x4c76*/      ldr r0, [pc, #0xa0] /* data_4d18 */
/*0x4c78*/      ldrh r1, [r0]
/*0x4c7a*/      movw r2, #0x1770
/*0x4c7e*/      cmp r1, r2
/*0x4c80*/      bls jump_4cb8
/*0x4c82*/      ldrh r2, [r0]
/*0x4c84*/      movw r1, #0xffff
/*0x4c88*/      cmp r2, r1
/*0x4c8a*/      bhs jump_4cb8
/*0x4c8c*/      strh r1, [r0]
/*0x4c8e*/      movs r1, #3
/*0x4c90*/      mov r0, sp
/*0x4c92*/      bl call_4a94
/*0x4c96*/      ldr r4, [pc, #0x84] /* data_4d1c */
/*0x4c98*/      cmp r0, #2
/*0x4c9a*/      beq jump_4cda
/*0x4c9c*/      cmp r0, #3
/*0x4c9e*/      bne jump_4cb8
/*0x4ca0*/      movs r3, #3
/*0x4ca2*/      mov r2, r3
/*0x4ca4*/      ldr r1, [pc, #0x78] /* data_4d20 */
/*0x4ca6*/      mov r0, sp
/*0x4ca8*/      bl call_4a64
/*0x4cac*/      cbz r0, jump_4cba
/*0x4cae*/      ldrb r0, [r4]
/*0x4cb0*/      bic r0, r0, #0xe
/*0x4cb4*/      .short 0x1c80 /* adds r0, r0, #2 */
/*0x4cb6*/      strb r0, [r4]
            jump_4cb8:
/*0x4cb8*/      pop {r3, r4, r5, pc}
            jump_4cba:
/*0x4cba*/      ldr r1, [pc, #0x64] /* data_4d20 */
/*0x4cbc*/      movs r3, #3
/*0x4cbe*/      mov r2, r3
/*0x4cc0*/      .short 0x1cc9 /* adds r1, r1, #3 */
/*0x4cc2*/      mov r0, sp
/*0x4cc4*/      bl call_4a64
/*0x4cc8*/      cmp r0, #0
/*0x4cca*/      beq jump_4cb8
/*0x4ccc*/      ldrb r0, [r4, #1]
/*0x4cce*/      cbz r0, jump_4cd6
/*0x4cd0*/      movs r0, #0
            jump_4cd2:
/*0x4cd2*/      strb r0, [r4, #1]
            jump_4cd4:
/*0x4cd4*/      pop {r3, r4, r5, pc}
            jump_4cd6:
/*0x4cd6*/      movs r0, #1
/*0x4cd8*/      b jump_4cd2
            jump_4cda:
/*0x4cda*/      ldr r1, [pc, #0x44] /* data_4d20 */
/*0x4cdc*/      movs r3, #2
/*0x4cde*/      mov r2, r3
/*0x4ce0*/      .short 0x1f09 /* subs r1, r1, #4 */
/*0x4ce2*/      mov r0, sp
/*0x4ce4*/      bl call_4a64
/*0x4ce8*/      cbz r0, jump_4cf2
/*0x4cea*/      ldrb r0, [r4]
/*0x4cec*/      bic r0, r0, #0x20
/*0x4cf0*/      b jump_4d0a
            jump_4cf2:
/*0x4cf2*/      ldr r1, [pc, #0x2c] /* data_4d20 */
/*0x4cf4*/      movs r3, #2
/*0x4cf6*/      mov r2, r3
/*0x4cf8*/      .short 0x1e89 /* subs r1, r1, #2 */
/*0x4cfa*/      mov r0, sp
/*0x4cfc*/      bl call_4a64
/*0x4d00*/      cmp r0, #0
/*0x4d02*/      beq jump_4cd4
/*0x4d04*/      ldrb r0, [r4]
/*0x4d06*/      orr r0, r0, #0x20
            jump_4d0a:
/*0x4d0a*/      strb r0, [r4]
/*0x4d0c*/      ldr r0, [r4]
/*0x4d0e*/      orr r0, r0, #0x20000000
/*0x4d12*/      str r0, [r4]
/*0x4d14*/      pop {r3, r4, r5, pc}

/*0x4d16*/  .byte 0x00
/*0x4d17*/  .byte 0x00

            data_4d18:
/*0x4d18*/  .word 0x20000014
            data_4d1c:
/*0x4d1c*/  .word 0x20000050
            data_4d20:
/*0x4d20*/  .word 0x00009622 /* possible pointer */


            .thumb_func
            call_4d24:
/*0x4d24*/      push.w {r4, r5, r6, r7, r8, sb, sl, lr}
/*0x4d28*/      ldr r5, [pc, #0x64] /* data_4d90 */
/*0x4d2a*/      ldrb r0, [r5]
/*0x4d2c*/      tst.w r0, #0xe
/*0x4d30*/      beq jump_4d3a
/*0x4d32*/      pop.w {r4, r5, r6, r7, r8, sb, sl, lr}
/*0x4d36*/      b.w jump_88fc
            jump_4d3a:
/*0x4d3a*/      movs r4, #0
/*0x4d3c*/      ldr r6, [pc, #0x54] /* data_4d94 */
/*0x4d3e*/      ldr r7, [pc, #0x58] /* data_4d98 */
/*0x4d40*/      mov.w r8, #1
/*0x4d44*/      mov sb, r4
            jump_4d46:
/*0x4d46*/      ldr r1, [r6]
/*0x4d48*/      lsl.w r0, r8, r4
/*0x4d4c*/      tst r1, r0
/*0x4d4e*/      beq jump_4d7c
/*0x4d50*/      add.w r0, r4, r4, lsl #2
/*0x4d54*/      add.w r1, r7, r0, lsl #2
/*0x4d58*/      ldr r0, [r1, #8]
/*0x4d5a*/      cbz r0, jump_4d7c
/*0x4d5c*/      add.w r0, r4, r4, lsl #1
/*0x4d60*/      add r0, r6
/*0x4d62*/      ldrb r2, [r0, #0xe]!
/*0x4d66*/      .short 0x1c52 /* adds r2, r2, #1 */
/*0x4d68*/      uxtb r2, r2
/*0x4d6a*/      strb r2, [r0], #-2
/*0x4d6e*/      ldrb r3, [r0]
/*0x4d70*/      cmp r2, r3
/*0x4d72*/      bls jump_4d7c
/*0x4d74*/      strb.w sb, [r0, #2]
/*0x4d78*/      ldr r0, [r1, #8]
/*0x4d7a*/      blx r0
            jump_4d7c:
/*0x4d7c*/      .short 0x1c64 /* adds r4, r4, #1 */
/*0x4d7e*/      uxtb r4, r4
/*0x4d80*/      cmp r4, #0xa
/*0x4d82*/      blo jump_4d46
/*0x4d84*/      ldr r0, [r5]
/*0x4d86*/      orr r0, r0, #0x8000000
/*0x4d8a*/      str r0, [r5]
/*0x4d8c*/      pop.w {r4, r5, r6, r7, r8, sb, sl, pc}

            data_4d90:
/*0x4d90*/  .word 0x20000050
            data_4d94:
/*0x4d94*/  .word 0x20001bec
            data_4d98:
/*0x4d98*/  .word 0x00009e8c /* possible pointer */


            .thumb_func
            call_4d9c:
/*0x4d9c*/      movs r1, #0x17      ; r1 = 0x17
/*0x4d9e*/      ldr r0, [pc, #4] /* r0 = 0x00009628 */
/*0x4da0*/      b.w jump_465c

            data_4da4:
/*0x4da4*/  .word 0x00009628 /* possible pointer */


            .thumb_func
            call_4da8:
/*0x4da8*/      push {r3, r4, r5, lr}
/*0x4daa*/      movs r1, #2         ; r1 = 2
/*0x4dac*/      mov r0, sp          ; r0 = sp
/*0x4dae*/      bl call_4a94
/*0x4db2*/      ldr r4, [pc, #0x30] /* data_4de4 */
/*0x4db4*/      cmp r0, #2
/*0x4db6*/      bne jump_4dda
/*0x4db8*/      movs r3, #2
/*0x4dba*/      mov r2, r3
/*0x4dbc*/      ldr r1, [pc, #0x28] /* data_4de8 */
/*0x4dbe*/      mov r0, sp
/*0x4dc0*/      bl call_4a64
/*0x4dc4*/      cbz r0, jump_4dda
/*0x4dc6*/      ldrb.w r0, [r4, #0x2d]
/*0x4dca*/      mvn.w r1, r0, lsr #1
/*0x4dce*/      bfi r0, r1, #1, #1
/*0x4dd2*/      strb.w r0, [r4, #0x2d]
/*0x4dd6*/      bl call_3d28
            jump_4dda:
/*0x4dda*/      ldrb.w r0, [r4, #0x2d]
/*0x4dde*/      ubfx r0, r0, #1, #1
/*0x4de2*/      pop {r3, r4, r5, pc}

            data_4de4:
/*0x4de4*/  .word 0x20000d34
            data_4de8:
/*0x4de8*/  .word 0x0000961c /* possible pointer */


            .thumb_func
            call_4dec:
/*0x4dec*/      push.w {r3, r4, r5, r6, r7, r8, sb, lr}
/*0x4df0*/      ldr.w r8, [pc, #0x1dc] /* data_4fd0 */
/*0x4df4*/      ldrb.w r1, [r8, #1]
/*0x4df8*/      cmp r1, #0
/*0x4dfa*/      bne jump_4e68
/*0x4dfc*/      lsrs r1, r0, #8
/*0x4dfe*/      lsls r1, r1, #0x1e
/*0x4e00*/      bpl jump_4e68
/*0x4e02*/      ldr r1, [pc, #0x1d4] /* data_4fd8 */
/*0x4e04*/      ldr r5, [pc, #0x1cc] /* data_4fd4 */
/*0x4e06*/      ldr r2, [pc, #0x1d4] /* data_4fdc */
/*0x4e08*/      ldrb r1, [r1, #2]
/*0x4e0a*/      ldrb.w r3, [r5, #0x2e]
/*0x4e0e*/      subs r1, #0x10
/*0x4e10*/      movs r6, #0
/*0x4e12*/      ldr r7, [pc, #0x1cc] /* data_4fe0 */
/*0x4e14*/      uxtb r1, r1
/*0x4e16*/      movw sb, #0xea60
/*0x4e1a*/      ubfx r4, r0, #0x10, #8
/*0x4e1e*/      cmp r3, #9
/*0x4e20*/      beq jump_4e48
/*0x4e22*/      ldr r0, [pc, #0x1c0] /* data_4fe4 */
/*0x4e24*/      ldrb.w r3, [r8]
/*0x4e28*/      ldrb r0, [r0, #2]
/*0x4e2a*/      lsls.w ip, r3, #0x1b
/*0x4e2e*/      bpl jump_4e6c
/*0x4e30*/      sub.w r1, r4, #0x10
/*0x4e34*/      cmp r1, #4
/*0x4e36*/      bhi jump_4f1a
/*0x4e38*/      cmp r0, r1
/*0x4e3a*/      bne jump_4f1a
/*0x4e3c*/      bic r1, r3, #0x10
/*0x4e40*/      strb.w r1, [r8]
/*0x4e44*/      strh r6, [r7]
/*0x4e46*/      b jump_4ef6
            jump_4e48:
/*0x4e48*/      cmp r4, #0x13
/*0x4e4a*/      beq jump_4e66
/*0x4e4c*/      bgt jump_4e5c
/*0x4e4e*/      cmp r4, #0x10
/*0x4e50*/      beq jump_4e66
/*0x4e52*/      cmp r4, #0x11
/*0x4e54*/      beq jump_4e66
/*0x4e56*/      cmp r4, #0x12
/*0x4e58*/      bne jump_4e68
/*0x4e5a*/      b jump_4e66
            jump_4e5c:
/*0x4e5c*/      cmp r4, #0x14
/*0x4e5e*/      beq jump_4e66
/*0x4e60*/      cmp r4, #0x2c
/*0x4e62*/      bne jump_4e68
/*0x4e64*/      b jump_4f64
            jump_4e66:
/*0x4e66*/      strb r1, [r2]
            jump_4e68:
/*0x4e68*/      pop.w {r3, r4, r5, r6, r7, r8, sb, pc}
            jump_4e6c:
/*0x4e6c*/      cmp r4, #0x1d
/*0x4e6e*/      beq jump_4efc
/*0x4e70*/      bgt jump_4e90
/*0x4e72*/      cmp r4, #0x13
/*0x4e74*/      beq jump_4ec2
/*0x4e76*/      bgt jump_4e86
/*0x4e78*/      cmp r4, #0x10
/*0x4e7a*/      beq jump_4eae
/*0x4e7c*/      cmp r4, #0x11
/*0x4e7e*/      beq jump_4ec2
/*0x4e80*/      cmp r4, #0x12
/*0x4e82*/      bne jump_4f1a
/*0x4e84*/      b jump_4ec2
            jump_4e86:
/*0x4e86*/      cmp r4, #0x14
/*0x4e88*/      beq jump_4ec2
/*0x4e8a*/      cmp r4, #0x1c
/*0x4e8c*/      bne jump_4f1a
/*0x4e8e*/      b jump_4f10
            jump_4e90:
/*0x4e90*/      cmp r4, #0x23
/*0x4e92*/      beq jump_4ed0
/*0x4e94*/      bgt jump_4ea4
/*0x4e96*/      cmp r4, #0x20
/*0x4e98*/      beq jump_4ec6
/*0x4e9a*/      cmp r4, #0x21
/*0x4e9c*/      beq jump_4ed0
/*0x4e9e*/      cmp r4, #0x22
/*0x4ea0*/      bne jump_4f1a
/*0x4ea2*/      b jump_4ed0
            jump_4ea4:
/*0x4ea4*/      cmp r4, #0x2c
/*0x4ea6*/      beq jump_4f64
/*0x4ea8*/      cmp r4, #0x43
/*0x4eaa*/      bne jump_4f1a
/*0x4eac*/      b jump_4ee8
            jump_4eae:
/*0x4eae*/      lsls r1, r3, #0x1f
/*0x4eb0*/      beq jump_4ebe
/*0x4eb2*/      bic r1, r3, #1
/*0x4eb6*/      strb.w r1, [r8]
/*0x4eba*/      strh r6, [r7]
/*0x4ebc*/      b jump_4f1a
            jump_4ebe:
/*0x4ebe*/      strb r6, [r2]
/*0x4ec0*/      b jump_4f1a
            jump_4ec2:
/*0x4ec2*/      strb r1, [r2]
/*0x4ec4*/      b jump_4f1a
            jump_4ec6:
/*0x4ec6*/      strb.w r6, [r5, #0x2a]
/*0x4eca*/      strb.w r6, [r5, #0x2c]
/*0x4ece*/      b jump_4ee2
            jump_4ed0:
/*0x4ed0*/      movs r0, #1
/*0x4ed2*/      strb.w r0, [r5, #0x2a]
/*0x4ed6*/      sub.w r0, r4, #0x20
/*0x4eda*/      strb.w r0, [r5, #0x2c]
/*0x4ede*/      strb.w r0, [r5, #0x2b]
            jump_4ee2:
/*0x4ee2*/      bl call_4c28
/*0x4ee6*/      b jump_4ef6
            jump_4ee8:
/*0x4ee8*/      ldrb.w r0, [r5, #0x2d]
/*0x4eec*/      adds r1, r0, #1
/*0x4eee*/      bfi r0, r1, #0, #1
/*0x4ef2*/      strb.w r0, [r5, #0x2d]
            jump_4ef6:
/*0x4ef6*/      bl call_3d28
/*0x4efa*/      b jump_4f1a
            jump_4efc:
/*0x4efc*/      cbz r0, jump_4f1a
/*0x4efe*/      bl call_6590
/*0x4f02*/      ldrb.w r1, [r8]
/*0x4f06*/      orr r1, r1, #1
/*0x4f0a*/      strb.w r1, [r8]
/*0x4f0e*/      b jump_4f16
            jump_4f10:
/*0x4f10*/      cbz r0, jump_4f1a
/*0x4f12*/      bl call_6568
            jump_4f16:
/*0x4f16*/      strh.w sb, [r7]
            jump_4f1a:
/*0x4f1a*/      cmp r4, #0x28
/*0x4f1c*/      beq jump_4f76
/*0x4f1e*/      cmp r4, #0x29
/*0x4f20*/      beq jump_4f76
/*0x4f22*/      cmp r4, #0x2a
/*0x4f24*/      beq jump_4f76
/*0x4f26*/      cmp r4, #0x4b
/*0x4f28*/      bne jump_4e68
/*0x4f2a*/      ldrb.w r0, [r8]
/*0x4f2e*/      lsls r2, r0, #0x1b
/*0x4f30*/      bmi jump_4e68
/*0x4f32*/      orr r0, r0, #0x10
/*0x4f36*/      strb.w r0, [r8]
/*0x4f3a*/      movs r0, #0xa
/*0x4f3c*/      strb.w r0, [r5, #0x2e]
/*0x4f40*/      bl call_6590
/*0x4f44*/      bl call_4fe8
/*0x4f48*/      mov r0, sp
/*0x4f4a*/      bl call_52e0
/*0x4f4e*/      ldr r1, [sp]
/*0x4f50*/      movs r0, #0xff
/*0x4f52*/      strb r0, [r1]
/*0x4f54*/      strb r0, [r1, #1]
/*0x4f56*/      strb r0, [r1, #2]
/*0x4f58*/      strh.w sb, [r7]
/*0x4f5c*/      movs r0, #3
/*0x4f5e*/      bl call_7310
            jump_4f62:
/*0x4f62*/      b jump_4e68
            jump_4f64:
/*0x4f64*/      movs r0, #1
/*0x4f66*/      bl call_554c
/*0x4f6a*/      bl call_5220
/*0x4f6e*/      movs r0, #3
/*0x4f70*/      bl call_7310
/*0x4f74*/      b jump_4ef6
            jump_4f76:
/*0x4f76*/      mov r0, sp
/*0x4f78*/      bl call_52e0
/*0x4f7c*/      cmp r0, #0
/*0x4f7e*/      beq jump_4f62
/*0x4f80*/      ldr r0, [sp]
/*0x4f82*/      subs r0, #0x28
/*0x4f84*/      add r0, r4
/*0x4f86*/      str r0, [sp]
/*0x4f88*/      ldrb r1, [r0]
/*0x4f8a*/      cmp r1, #0xff
/*0x4f8c*/      beq jump_4fc6
/*0x4f8e*/      adds r1, #0x1d
/*0x4f90*/      cmp r1, #0xff
/*0x4f92*/      bls jump_4f96
/*0x4f94*/      movs r1, #0xff
            jump_4f96:
/*0x4f96*/      strb r1, [r0]
            jump_4f98:
/*0x4f98*/      ldrb.w r0, [r8]
/*0x4f9c*/      mov r4, r8
/*0x4f9e*/      lsls r0, r0, #0x1b
/*0x4fa0*/      bmi jump_4fae
/*0x4fa2*/      ldrb.w r0, [r5, #0x2e]
/*0x4fa6*/      cmp r0, #1
/*0x4fa8*/      beq jump_4fca
/*0x4faa*/      cmp r0, #4
/*0x4fac*/      beq jump_4fca
            jump_4fae:
/*0x4fae*/      bl call_5864
            jump_4fb2:
/*0x4fb2*/      movs r0, #4
/*0x4fb4*/      bl call_7310
/*0x4fb8*/      ldr r0, [r4]
/*0x4fba*/      orr r0, r0, #0x8000000
/*0x4fbe*/      str r0, [r4]
/*0x4fc0*/      bl call_3d28
/*0x4fc4*/      b jump_4e68
            jump_4fc6:
/*0x4fc6*/      strb r6, [r0]
/*0x4fc8*/      b jump_4f98
            jump_4fca:
/*0x4fca*/      bl call_538c
/*0x4fce*/      b jump_4fb2

            data_4fd0:
/*0x4fd0*/  .word 0x20000050
            data_4fd4:
/*0x4fd4*/  .word 0x20000d34
            data_4fd8:
/*0x4fd8*/  .word 0x20000058
            data_4fdc:
/*0x4fdc*/  .word 0x20000046
            data_4fe0:
/*0x4fe0*/  .word 0x20000000
            data_4fe4:
/*0x4fe4*/  .word 0x20000c90


            .thumb_func
            call_4fe8:
/*0x4fe8*/      mov.w r1, #0x168
/*0x4fec*/      ldr r0, [pc, #4] /* data_4ff4 */
/*0x4fee*/      b.w _memzero

/*0x4ff2*/  .byte 0x00
/*0x4ff3*/  .byte 0x00

            data_4ff4:
/*0x4ff4*/  .word 0x200000df

/*0x4ff8*/  .byte 0x00
/*0x4ff9*/  .byte 0x00
/*0x4ffa*/  .byte 0x04
/*0x4ffb*/  .byte 0x03
/*0x4ffc*/  .byte 0x00
/*0x4ffd*/  .byte 0x00
/*0x4ffe*/  .byte 0x0a
/*0x4fff*/  .byte 0x64
/*0x5000*/  .byte 0x03
/*0x5001*/  .byte 0x00
/*0x5002*/  .byte 0x5a
/*0x5003*/  .byte 0x80
/*0x5004*/  .byte 0x02
/*0x5005*/  .byte 0x02
/*0x5006*/  .byte 0x00
/*0x5007*/  .byte 0x00
/*0x5008*/  .byte 0x1d
/*0x5009*/  .byte 0x00
/*0x500a*/  .byte 0x00
/*0x500b*/  .byte 0x00
/*0x500c*/  .byte 0xff
/*0x500d*/  .byte 0xff
/*0x500e*/  .byte 0xff
/*0x500f*/  .byte 0xef
/*0x5010*/  .byte 0x03
/*0x5011*/  .byte 0x00
/*0x5012*/  .byte 0x00
/*0x5013*/  .byte 0x00
/*0x5014*/  .byte 0xff
/*0x5015*/  .byte 0xff
/*0x5016*/  .byte 0xff
/*0x5017*/  .byte 0xff
/*0x5018*/  .byte 0x00
/*0x5019*/  .byte 0x00
/*0x501a*/  .byte 0x00
/*0x501b*/  .byte 0x00
/*0x501c*/  .byte 0x16
/*0x501d*/  .byte 0x25
/*0x501e*/  .byte 0x3c
/*0x501f*/  .byte 0x00


            .thumb_func
            call_5020:
/*0x5020*/      push {r4, r5, lr}
/*0x5022*/      ldr r0, [pc, #0x74] /* data_5098 */
/*0x5024*/      ldrb r2, [r0, #1]
/*0x5026*/      lsls r0, r2, #0x1d
/*0x5028*/      bpl jump_5064
/*0x502a*/      ldr r1, [pc, #0x70] /* data_509c */
/*0x502c*/      ldr r0, [pc, #0x68] /* data_5098 */
/*0x502e*/      movs r5, #1
/*0x5030*/      ldrb r3, [r1]
/*0x5032*/      ldrb r0, [r0, #2]
/*0x5034*/      cmp r3, #4
/*0x5036*/      beq jump_504c
/*0x5038*/      cmp r3, #5
/*0x503a*/      bne jump_505c
/*0x503c*/      ldr r3, [pc, #0x60] /* data_50a0 */
/*0x503e*/      movs r4, #6
/*0x5040*/      cmp r0, #0x46
/*0x5042*/      beq jump_5068
/*0x5044*/      cmp r0, #0x47
/*0x5046*/      beq jump_506c
/*0x5048*/      cmp r0, #0x48
/*0x504a*/      beq jump_5074
            jump_504c:
/*0x504c*/      cmp r0, #0x29
/*0x504e*/      beq jump_507a
/*0x5050*/      cmp r0, #0x46
/*0x5052*/      beq jump_507a
/*0x5054*/      cmp r0, #0x47
/*0x5056*/      beq jump_507a
/*0x5058*/      cmp r0, #0x48
/*0x505a*/      beq jump_507a
            jump_505c:
/*0x505c*/      lsls r2, r2, #0x1e
/*0x505e*/      bpl jump_5064
/*0x5060*/      cmp r0, #0x29
/*0x5062*/      beq jump_507e
            jump_5064:
/*0x5064*/      movs r0, #0
/*0x5066*/      pop {r4, r5, pc}
            jump_5068:
/*0x5068*/      strb r5, [r3, #3]
/*0x506a*/      b jump_5070
            jump_506c:
/*0x506c*/      movs r0, #3
/*0x506e*/      b jump_5076
            jump_5070:
/*0x5070*/      strb r4, [r1]
/*0x5072*/      b jump_5092
            jump_5074:
/*0x5074*/      movs r0, #2
            jump_5076:
/*0x5076*/      strb r0, [r3, #3]
/*0x5078*/      b jump_5070
            jump_507a:
/*0x507a*/      strb r5, [r1]
/*0x507c*/      b jump_5092
            jump_507e:
/*0x507e*/      movs r0, #9
/*0x5080*/      strb r0, [r1]
/*0x5082*/      ldr r0, [pc, #0x20] /* data_50a4 */
/*0x5084*/      ldr r1, [r0]
/*0x5086*/      orr r1, r1, #0x8000000
/*0x508a*/      str r1, [r0]
/*0x508c*/      ldr r1, [pc, #0x18] /* data_50a8 */
/*0x508e*/      movs r0, #0
/*0x5090*/      strh r0, [r1]
            jump_5092:
/*0x5092*/      movs r0, #1
/*0x5094*/      pop {r4, r5, pc}

/*0x5096*/  .byte 0x00
/*0x5097*/  .byte 0x00

            data_5098:
/*0x5098*/  .word 0x20000058
            data_509c:
/*0x509c*/  .word 0x20000064
            data_50a0:
/*0x50a0*/  .word 0x2000006c
            data_50a4:
/*0x50a4*/  .word 0x20000050
            data_50a8:
/*0x50a8*/  .word 0x20000000


            .thumb_func
            call_50ac:
/*0x50ac*/      push {r4, r5, r6, lr}
/*0x50ae*/      ldr r0, [pc, #0x60] /* data_5110 */
/*0x50b0*/      ldrh r1, [r0]
/*0x50b2*/      cbz r1, jump_50ba
/*0x50b4*/      movw r1, #0xea60
/*0x50b8*/      strh r1, [r0]
            jump_50ba:
/*0x50ba*/      ldr r4, [pc, #0x58] /* data_5114 */
/*0x50bc*/      ldrb r0, [r4, #1]
/*0x50be*/      lsls r1, r0, #0x1d
/*0x50c0*/      bmi jump_5104
/*0x50c2*/      lsls r0, r0, #0x1e
/*0x50c4*/      bpl jump_5104
/*0x50c6*/      ldr r0, [pc, #0x50] /* data_5118 */
/*0x50c8*/      mov.w r5, #0
/*0x50cc*/      ldrb r0, [r0]
/*0x50ce*/      lsls r1, r0, #0x1f
/*0x50d0*/      beq jump_50d8
/*0x50d2*/      bl call_65a0
/*0x50d6*/      b jump_5108
            jump_50d8:
/*0x50d8*/      lsls r0, r0, #0x1b
/*0x50da*/      bmi jump_5108
/*0x50dc*/      ldr r0, [pc, #0x3c] /* data_511c */
/*0x50de*/      ldrb r0, [r0, #2]
/*0x50e0*/      cmp r0, #1
/*0x50e2*/      beq jump_5104
/*0x50e4*/      ldrb r0, [r4, #2]
/*0x50e6*/      ldr r1, [pc, #0x38] /* data_5120 */
/*0x50e8*/      cmp r0, #0xe3
/*0x50ea*/      beq jump_50fa
/*0x50ec*/      cmp r0, #0xe7
/*0x50ee*/      beq jump_50fa
/*0x50f0*/      ldrb.w r0, [r1, #0x2e]
/*0x50f4*/      cmp r0, #9
/*0x50f6*/      bne jump_5104
/*0x50f8*/      b jump_5108
            jump_50fa:
/*0x50fa*/      ldrb.w r0, [r1, #0x2d]
/*0x50fe*/      lsls r0, r0, #0x1f
/*0x5100*/      beq jump_5104
/*0x5102*/      strb r5, [r4, #2]
            jump_5104:
/*0x5104*/      movs r0, #0
/*0x5106*/      pop {r4, r5, r6, pc}
            jump_5108:
/*0x5108*/      strb r5, [r4, #2]
/*0x510a*/      movs r0, #1
/*0x510c*/      pop {r4, r5, r6, pc}

/*0x510e*/  .byte 0x00
/*0x510f*/  .byte 0x00

            data_5110:
/*0x5110*/  .word 0x20000000
            data_5114:
/*0x5114*/  .word 0x20000058
            data_5118:
/*0x5118*/  .word 0x20000050
            data_511c:
/*0x511c*/  .word 0x2000006c
            data_5120:
/*0x5120*/  .word 0x20000d34


            .thumb_func
            call_5124:
/*0x5124*/      ldr r1, [pc, #0x20] /* data_5148 */
/*0x5126*/      ldrb r0, [r1, #1]
/*0x5128*/      lsls r0, r0, #0x1d
/*0x512a*/      bmi jump_5144
/*0x512c*/      ldr r0, [pc, #0x1c] /* data_514c */
/*0x512e*/      ldrb.w r0, [r0, #0x2d]
/*0x5132*/      lsls r0, r0, #0x1f
/*0x5134*/      beq jump_5144
/*0x5136*/      ldrb r0, [r1, #2]
/*0x5138*/      cmp r0, #0xe3
/*0x513a*/      beq jump_5140
/*0x513c*/      cmp r0, #0xe7
/*0x513e*/      bne jump_5144
            jump_5140:
/*0x5140*/      movs r0, #0
/*0x5142*/      strb r0, [r1, #2]
            jump_5144:
/*0x5144*/      bx lr

/*0x5146*/  .byte 0x00
/*0x5147*/  .byte 0x00

            data_5148:
/*0x5148*/  .word 0x20000058
            data_514c:
/*0x514c*/  .word 0x20000d34


            .thumb_func
            call_5150:
/*0x5150*/      push {r4, r5, r6, lr}
/*0x5152*/      ldr r5, [pc, #0x8c] /* data_51e0 */
/*0x5154*/      ldr r4, [pc, #0x8c] /* data_51e4 */
/*0x5156*/      ldrh r0, [r5]
/*0x5158*/      cmp r0, #1
/*0x515a*/      bne jump_5188
/*0x515c*/      ldr r0, [pc, #0x88] /* data_51e8 */
/*0x515e*/      ldrb r1, [r0]
/*0x5160*/      cbz r1, jump_5166
/*0x5162*/      movs r1, #9
/*0x5164*/      strb r1, [r0]
            jump_5166:
/*0x5166*/      ldrb r0, [r4]
/*0x5168*/      lsls r0, r0, #0x1b
/*0x516a*/      bpl jump_5174
/*0x516c*/      ldr r0, [pc, #0x7c] /* data_51ec */
/*0x516e*/      ldrb r0, [r0, #2]
/*0x5170*/      bl call_3c1c
            jump_5174:
/*0x5174*/      ldrb r0, [r4]
/*0x5176*/      bic r0, r0, #0x11
/*0x517a*/      strb r0, [r4]
/*0x517c*/      ldr r0, [r4]
/*0x517e*/      orr r0, r0, #0x8000000
/*0x5182*/      str r0, [r4]
/*0x5184*/      movs r0, #0
/*0x5186*/      strh r0, [r5]
            jump_5188:
/*0x5188*/      ldrb r0, [r4, #1]
/*0x518a*/      cbz r0, jump_51da
/*0x518c*/      ldrh r1, [r5, #2]
/*0x518e*/      cbnz r1, jump_51da
/*0x5190*/      .short 0x1c40 /* adds r0, r0, #1 */
/*0x5192*/      uxtb r0, r0
/*0x5194*/      strb r0, [r4, #1]
/*0x5196*/      cmp r0, #0xb
/*0x5198*/      bne jump_51a8
/*0x519a*/      movs r0, #1
/*0x519c*/      bl call_554c
/*0x51a0*/      bl call_5220
/*0x51a4*/      movs r0, #1
/*0x51a6*/      strb r0, [r4, #1]
            jump_51a8:
/*0x51a8*/      movs r0, #0xff
/*0x51aa*/      bfi r4, r0, #0x18, #8
/*0x51ae*/      ldr r6, [pc, #0x40] /* data_51f0 */
            jump_51b0:
/*0x51b0*/      bl rand
/*0x51b4*/      uxtb r0, r0
/*0x51b6*/      bfi r4, r0, #0x10, #8
/*0x51ba*/      ldrb r0, [r6, r0]
/*0x51bc*/      bfi r4, r0, #0x18, #8
/*0x51c0*/      cmp r0, #0xff
/*0x51c2*/      beq jump_51b0
/*0x51c4*/      lsrs r0, r4, #8
/*0x51c6*/      orr r1, r0, #2
/*0x51ca*/      mov r0, r4
/*0x51cc*/      bfi r0, r1, #8, #8
/*0x51d0*/      bl call_54d8
/*0x51d4*/      mov.w r0, #0x7d0
/*0x51d8*/      strh r0, [r5, #2]
            jump_51da:
/*0x51da*/      movs r0, #1
/*0x51dc*/      pop {r4, r5, r6, pc}

/*0x51de*/  .byte 0x00
/*0x51df*/  .byte 0x00

            data_51e0:
/*0x51e0*/  .word 0x20000000
            data_51e4:
/*0x51e4*/  .word 0x20000050
            data_51e8:
/*0x51e8*/  .word 0x20000064
            data_51ec:
/*0x51ec*/  .word 0x20000c90
            data_51f0:
/*0x51f0*/  .word 0x00009872 /* possible pointer */


            .thumb_func
            call_51f4:
/*0x51f4*/      ldr r0, [pc, #0xc] /* data_5204 */
/*0x51f6*/      ldrb r0, [r0]
/*0x51f8*/      lsls r0, r0, #0x1a
/*0x51fa*/      bpl jump_5200
/*0x51fc*/      b.w call_3cd4
            jump_5200:
/*0x5200*/      b.w call_3ca0

            data_5204:
/*0x5204*/  .word 0x20000050


            .thumb_func
            call_5208:
/*0x5208*/      ldr r1, [pc, #0x10] /* data_521c */
/*0x520a*/      ldrb r0, [r1]
/*0x520c*/      .short 0x1c40 /* adds r0, r0, #1 */
/*0x520e*/      strb r0, [r1]
/*0x5210*/      lsls r0, r0, #0x1e
/*0x5212*/      bne jump_5218
/*0x5214*/      b.w call_9020
            jump_5218:
/*0x5218*/      bx lr

/*0x521a*/  .byte 0x00
/*0x521b*/  .byte 0x00

            data_521c:
/*0x521c*/  .word 0x20000012


            .thumb_func
            call_5220:
/*0x5220*/      ldr r0, [pc, #0x28] /* data_524c */
/*0x5222*/      push {r4, lr}
/*0x5224*/      ldrb r0, [r0]
/*0x5226*/      lsls r0, r0, #0x1e
/*0x5228*/      bmi jump_5248
/*0x522a*/      ldr r0, [pc, #0x24] /* data_5250 */
/*0x522c*/      ldrb.w r0, [r0, #0x2e]
/*0x5230*/      cmp r0, #9
/*0x5232*/      bne jump_5240
/*0x5234*/      ldr r0, [pc, #0x1c] /* data_5254 */
/*0x5236*/      ldrb r0, [r0, #2]
/*0x5238*/      cmp r0, #2
/*0x523a*/      bne jump_5240
/*0x523c*/      bl call_6590
            jump_5240:
/*0x5240*/      pop.w {r4, lr}
/*0x5244*/      b.w call_538c
            jump_5248:
/*0x5248*/      pop {r4, pc}

/*0x524a*/  .byte 0x00
/*0x524b*/  .byte 0x00

            data_524c:
/*0x524c*/  .word 0x20000076
            data_5250:
/*0x5250*/  .word 0x20000d34
            data_5254:
/*0x5254*/  .word 0x2000006c


            .thumb_func
            call_5258:
/*0x5258*/      push {r4, r5, r6, lr}
/*0x525a*/      ldr r1, [pc, #0x7c] /* data_52d8 */
/*0x525c*/      ldr r0, [pc, #0x7c] /* data_52dc */
/*0x525e*/      movs r3, #0xa
/*0x5260*/      mov r4, r0
/*0x5262*/      add.w r2, r1, #0xd
/*0x5266*/      b jump_528e
            jump_5268:
/*0x5268*/      ldr.w r5, [r2, #7]
/*0x526c*/      str r5, [r0]
/*0x526e*/      ldr.w r5, [r2, #0xb]
/*0x5272*/      str r5, [r0, #4]
/*0x5274*/      ldrh.w r5, [r2, #0xf]
/*0x5278*/      strh r5, [r0, #8]
/*0x527a*/      ldrb r5, [r2, #0x11]
/*0x527c*/      strb r5, [r0, #0xa]
/*0x527e*/      ldrb r5, [r1], #1
/*0x5282*/      strb r5, [r0], #2
/*0x5286*/      ldrb r5, [r1], #1
/*0x528a*/      strb r5, [r0], #9
            jump_528e:
/*0x528e*/      .short 0x1e5b /* subs r3, r3, #1 */
/*0x5290*/      uxtb r3, r3
/*0x5292*/      bhs jump_5268
/*0x5294*/      ldr r5, [pc, #0x44] /* data_52dc */
/*0x5296*/      adds r5, #0x6e
/*0x5298*/      movs r6, #4
/*0x529a*/      b jump_52b4
            jump_529c:
/*0x529c*/      movs r2, #0xff
/*0x529e*/      movs r1, #0x78
/*0x52a0*/      mov r0, r5
/*0x52a2*/      bl _memset
/*0x52a6*/      movs r2, #0x6e
/*0x52a8*/      mov r1, r4
/*0x52aa*/      add.w r0, r5, #0x78
/*0x52ae*/      bl memcpy
/*0x52b2*/      adds r5, #0xe6
            jump_52b4:
/*0x52b4*/      .short 0x1e76 /* subs r6, r6, #1 */
/*0x52b6*/      uxtb r6, r6
/*0x52b8*/      bhs jump_529c
/*0x52ba*/      bl call_58ac
/*0x52be*/      ldr r1, [pc, #0x18] /* data_52d8 */
/*0x52c0*/      ldr r0, [pc, #0x18] /* data_52dc */
/*0x52c2*/      movs r2, #0x12
/*0x52c4*/      adds r1, #0x47
/*0x52c6*/      subs r0, #0x12
/*0x52c8*/      bl memcpy
/*0x52cc*/      ldr r1, [pc, #0xc] /* data_52dc */
/*0x52ce*/      movs r0, #0xfe
/*0x52d0*/      subs r1, #0x41
/*0x52d2*/      strb.w r0, [r1, #0x2e]
/*0x52d6*/      pop {r4, r5, r6, pc}

            data_52d8:
/*0x52d8*/  .word 0x00009e33 /* possible pointer */
            data_52dc:
/*0x52dc*/  .word 0x20000d75


            .thumb_func
            call_52e0:
/*0x52e0*/      ldr r1, [pc, #0x3c] /* data_5320 */
/*0x52e2*/      ldrb r1, [r1]
/*0x52e4*/      lsls r1, r1, #0x1b
/*0x52e6*/      bpl jump_52ee
/*0x52e8*/      cbz r0, jump_5316
/*0x52ea*/      ldr r1, [pc, #0x38] /* data_5324 */
/*0x52ec*/      b jump_5314
            jump_52ee:
/*0x52ee*/      ldr r1, [pc, #0x38] /* data_5328 */
/*0x52f0*/      ldrb.w r1, [r1, #0x2e]
/*0x52f4*/      cmp r1, #0xa
/*0x52f6*/      bhs jump_531a
/*0x52f8*/      cmp r1, #2
/*0x52fa*/      beq jump_531a
/*0x52fc*/      cmp r1, #9
/*0x52fe*/      beq jump_531a
/*0x5300*/      cbz r0, jump_5316
/*0x5302*/      ldr r2, [pc, #0x20] /* data_5324 */
/*0x5304*/      add.w r3, r1, r1, lsl #1
/*0x5308*/      subs r2, #0x2a
/*0x530a*/      add.w r1, r3, r1, lsl #3
/*0x530e*/      ldr r2, [r2, #8]
/*0x5310*/      adds r1, #0x7d
/*0x5312*/      add r1, r2
            jump_5314:
/*0x5314*/      str r1, [r0]
            jump_5316:
/*0x5316*/      movs r0, #1
/*0x5318*/      bx lr
            jump_531a:
/*0x531a*/      movs r0, #0
/*0x531c*/      bx lr

/*0x531e*/  .byte 0x00
/*0x531f*/  .byte 0x00

            data_5320:
/*0x5320*/  .word 0x20000050
            data_5324:
/*0x5324*/  .word 0x20001c16
            data_5328:
/*0x5328*/  .word 0x20000d34


            .thumb_func
            call_532c:
/*0x532c*/      push {r3, lr}
/*0x532e*/      movs r2, #0
/*0x5330*/      cmp r0, #0xa
/*0x5332*/      bhs jump_533c
/*0x5334*/      strb.w r0, [sp, #1]
/*0x5338*/      movs r0, #1
/*0x533a*/      b jump_536a
            jump_533c:
/*0x533c*/      cmp r0, #0xb
/*0x533e*/      bhs jump_534a
/*0x5340*/      subs r0, #0xa
/*0x5342*/      strb.w r0, [sp, #1]
/*0x5346*/      movs r0, #2
/*0x5348*/      b jump_536a
            jump_534a:
/*0x534a*/      movs r1, #5
/*0x534c*/      cmp r0, #0xd8
/*0x534e*/      blo jump_5374
/*0x5350*/      cmp r0, #0xdf
/*0x5352*/      bhi jump_535e
/*0x5354*/      subs r0, #0xd8
/*0x5356*/      strb.w r0, [sp, #1]
/*0x535a*/      movs r0, #3
/*0x535c*/      b jump_536a
            jump_535e:
/*0x535e*/      cmp r0, #0xe4
/*0x5360*/      bhs jump_5370
/*0x5362*/      subs r0, #0xe0
/*0x5364*/      strb.w r0, [sp, #1]
/*0x5368*/      movs r0, #4
            jump_536a:
/*0x536a*/      strb.w r0, [sp]
/*0x536e*/      b jump_5378
            jump_5370:
/*0x5370*/      cmp r0, #0xfe
/*0x5372*/      beq jump_537e
            jump_5374:
/*0x5374*/      strb.w r1, [sp]
            jump_5378:
/*0x5378*/      ldrh.w r0, [sp]
/*0x537c*/      pop {r3, pc}
            jump_537e:
/*0x537e*/      movs r0, #0xa
/*0x5380*/      strb.w r0, [sp, #1]
/*0x5384*/      strb.w r2, [sp]
/*0x5388*/      b jump_5378

/*0x538a*/  .byte 0x00
/*0x538b*/  .byte 0x00


            .thumb_func
            call_538c:
/*0x538c*/      push.w {r4, r5, r6, r7, r8, sb, sl, lr}
/*0x5390*/      ldr r1, [pc, #0x138] /* data_54cc */
/*0x5392*/      ldr r4, [pc, #0x134] /* data_54c8 */
/*0x5394*/      movs r5, #0
/*0x5396*/      ldrb.w r0, [r1, #0x2e]
/*0x539a*/      mov.w r8, #1
/*0x539e*/      sub.w r6, r4, #0xc
/*0x53a2*/      cmp r0, #0xd8
/*0x53a4*/      blo jump_541c
/*0x53a6*/      sub.w r2, r0, #0xe0
/*0x53aa*/      str r5, [r6]
/*0x53ac*/      cmp r2, #7
/*0x53ae*/      bhi jump_540e
/*0x53b0*/      movs r2, #0x73
/*0x53b2*/      muls r0, r2, r0
/*0x53b4*/      add.w r0, r1, r0, lsl #1
/*0x53b8*/      sub.w r0, r0, #0xc800
/*0x53bc*/      subs r0, #0x91
/*0x53be*/      movs r1, #0x78
/*0x53c0*/      str r0, [r6, #8]
/*0x53c2*/      b jump_53d6
            jump_53c4:
/*0x53c4*/      ldrb r2, [r0]
/*0x53c6*/      cmp r2, #0x20
/*0x53c8*/      bhs jump_53d4
/*0x53ca*/      ldr r7, [r6]
/*0x53cc*/      lsl.w r3, r8, r2
/*0x53d0*/      orrs r7, r3
/*0x53d2*/      str r7, [r6]
            jump_53d4:
/*0x53d4*/      .short 0x1c40 /* adds r0, r0, #1 */
            jump_53d6:
/*0x53d6*/      .short 0x1e49 /* subs r1, r1, #1 */
/*0x53d8*/      uxtb r1, r1
/*0x53da*/      bhs jump_53c4
/*0x53dc*/      movs r2, #0xa
/*0x53de*/      str r5, [r6, #4]
/*0x53e0*/      b jump_5406
            jump_53e2:
/*0x53e2*/      ldr r0, [r6]
/*0x53e4*/      lsl.w r3, r8, r2
/*0x53e8*/      tst r0, r3
/*0x53ea*/      beq jump_5406
/*0x53ec*/      add.w r1, r2, r2, lsl #1
/*0x53f0*/      add.w r1, r1, r2, lsl #3
/*0x53f4*/      ldr r0, [r6, #8]
/*0x53f6*/      adds r1, #0x80
/*0x53f8*/      add r0, r1
/*0x53fa*/      bl call_87ac
/*0x53fe*/      cbz r0, jump_5406
/*0x5400*/      ldr r0, [r6, #4]
/*0x5402*/      orrs r0, r3
/*0x5404*/      str r0, [r6, #4]
            jump_5406:
/*0x5406*/      .short 0x1e52 /* subs r2, r2, #1 */
/*0x5408*/      uxtb r2, r2
/*0x540a*/      bhs jump_53e2
/*0x540c*/      b jump_543e
            jump_540e:
/*0x540e*/      subs r0, #0xd8
/*0x5410*/      cmp r0, #7
/*0x5412*/      bhi jump_5418
/*0x5414*/      bl call_4fe8
            jump_5418:
/*0x5418*/      str r5, [r6, #8]
/*0x541a*/      b jump_543e
            jump_541c:
/*0x541c*/      ldr r2, [pc, #0xac] /* data_54cc */
/*0x541e*/      subs r2, #0x37
/*0x5420*/      str r2, [r6, #8]
/*0x5422*/      lsl.w r2, r8, r0
/*0x5426*/      str r2, [r6]
/*0x5428*/      add.w r2, r0, r0, lsl #1
/*0x542c*/      add.w r0, r2, r0, lsl #3
/*0x5430*/      add r0, r1
/*0x5432*/      adds r0, #0x49
/*0x5434*/      bl call_87ac
/*0x5438*/      cbz r0, jump_543c
/*0x543a*/      ldr r0, [r6]
            jump_543c:
/*0x543c*/      str r0, [r6, #4]
            jump_543e:
/*0x543e*/      ldr.w sb, [pc, #0x90] /* data_54d0 */
/*0x5442*/      ldr.w sl, [pc, #0x90] /* data_54d4 */
/*0x5446*/      movs r7, #0
/*0x5448*/      ldr.w r1, [sb]
/*0x544c*/      orr r1, r1, #0x8000000
/*0x5450*/      str.w r1, [sb]
            jump_5454:
/*0x5454*/      ldr r1, [r6]
/*0x5456*/      lsl.w r0, r8, r7
/*0x545a*/      tst r1, r0
/*0x545c*/      beq jump_54aa
/*0x545e*/      add.w r1, r7, r7, lsl #2
/*0x5462*/      ldr.w r0, [sl, r1, lsl #2]
/*0x5466*/      cbz r0, jump_546a
/*0x5468*/      blx r0
            jump_546a:
/*0x546a*/      add.w r0, r7, r7, lsl #1
/*0x546e*/      add.w r0, r0, r7, lsl #3
/*0x5472*/      ldr r1, [r6, #8]
/*0x5474*/      adds r0, #0x78
/*0x5476*/      ldrb r0, [r1, r0]
/*0x5478*/      cmp r0, #0x60
/*0x547a*/      bhs jump_5494
/*0x547c*/      ldr r1, [pc, #0x54] /* data_54d4 */
/*0x547e*/      adds r1, #0xc8
/*0x5480*/      ldrb.w r2, [r1, r0, lsl #1]
/*0x5484*/      add.w r0, r1, r0, lsl #1
/*0x5488*/      strb r2, [r4], #1
/*0x548c*/      ldrb r0, [r0, #1]
/*0x548e*/      strb r0, [r4], #1
/*0x5492*/      b jump_54a4
            jump_5494:
/*0x5494*/      subs r0, #0x60
/*0x5496*/      uxtb r0, r0
/*0x5498*/      add.w r0, r0, r0, lsr #1
/*0x549c*/      strb r0, [r4], #1
/*0x54a0*/      strb r5, [r4], #1
            jump_54a4:
/*0x54a4*/      strb r5, [r4], #1
/*0x54a8*/      b jump_54ac
            jump_54aa:
/*0x54aa*/      .short 0x1ce4 /* adds r4, r4, #3 */
            jump_54ac:
/*0x54ac*/      .short 0x1c7f /* adds r7, r7, #1 */
/*0x54ae*/      uxtb r7, r7
/*0x54b0*/      cmp r7, #0xa
/*0x54b2*/      blo jump_5454
/*0x54b4*/      ldrb.w r1, [sb]
/*0x54b8*/      bic r1, r1, #0x10
/*0x54bc*/      strb.w r1, [sb]
/*0x54c0*/      pop.w {r4, r5, r6, r7, r8, sb, sl, lr}
/*0x54c4*/      b.w call_5864

            data_54c8:
/*0x54c8*/  .word 0x20001bf8
            data_54cc:
/*0x54cc*/  .word 0x20000d34
            data_54d0:
/*0x54d0*/  .word 0x20000050
            data_54d4:
/*0x54d4*/  .word 0x00009e8c /* possible pointer */


            .thumb_func
            call_54d8:
/*0x54d8*/      push.w {r4, r5, r6, r7, r8, lr}
/*0x54dc*/      mov r5, r0
/*0x54de*/      lsrs r0, r0, #8
/*0x54e0*/      lsls r0, r0, #0x1e
/*0x54e2*/      bpl jump_553a
/*0x54e4*/      ldr r0, [pc, #0x58] /* data_5540 */
/*0x54e6*/      ldrb r0, [r0]
/*0x54e8*/      tst.w r0, #0xe
/*0x54ec*/      beq jump_54f8
/*0x54ee*/      mov r0, r5
/*0x54f0*/      pop.w {r4, r5, r6, r7, r8, lr}
/*0x54f4*/      b.w jump_8808
            jump_54f8:
/*0x54f8*/      lsls r1, r0, #0x1b
/*0x54fa*/      bpl jump_550e
/*0x54fc*/      mov r1, r5
/*0x54fe*/      pop.w {r4, r5, r6, r7, r8, lr}
/*0x5502*/      ubfx r0, r0, #4, #1
/*0x5506*/      .short 0x1e40 /* subs r0, r0, #1 */
/*0x5508*/      uxtb r0, r0
/*0x550a*/      b.w jump_590c
            jump_550e:
/*0x550e*/      ldr r7, [pc, #0x34] /* data_5544 */
/*0x5510*/      ldr r6, [pc, #0x34] /* data_5548 */
/*0x5512*/      movs r4, #0
/*0x5514*/      mov.w r8, #1
            jump_5518:
/*0x5518*/      ldr r1, [r7]
/*0x551a*/      lsl.w r0, r8, r4
/*0x551e*/      tst r1, r0
/*0x5520*/      beq jump_5532
/*0x5522*/      add.w r0, r4, r4, lsl #2
/*0x5526*/      add.w r0, r6, r0, lsl #2
/*0x552a*/      ldr r1, [r0, #0x10]
/*0x552c*/      cbz r1, jump_5532
/*0x552e*/      mov r0, r5
/*0x5530*/      blx r1
            jump_5532:
/*0x5532*/      .short 0x1c64 /* adds r4, r4, #1 */
/*0x5534*/      uxtb r4, r4
/*0x5536*/      cmp r4, #0xa
/*0x5538*/      blo jump_5518
            jump_553a:
/*0x553a*/      pop.w {r4, r5, r6, r7, r8, pc}

/*0x553e*/  .byte 0x00
/*0x553f*/  .byte 0x00

            data_5540:
/*0x5540*/  .word 0x20000050
            data_5544:
/*0x5544*/  .word 0x20001bec
            data_5548:
/*0x5548*/  .word 0x00009e8c /* possible pointer */


            .thumb_func
            call_554c:
/*0x554c*/      ldr r1, [pc, #0x60] /* data_55b0 */
/*0x554e*/      push {r4, r5, lr}
/*0x5550*/      sub.w r3, r1, #0x2f
/*0x5554*/      movs r2, #0
/*0x5556*/      ldrb.w r4, [r3, #0x2e]
            jump_555a:
/*0x555a*/      ldrb r5, [r1]
/*0x555c*/      cmp r5, r4
/*0x555e*/      beq jump_556a
/*0x5560*/      .short 0x1c52 /* adds r2, r2, #1 */
/*0x5562*/      uxtb r2, r2
/*0x5564*/      .short 0x1c49 /* adds r1, r1, #1 */
/*0x5566*/      cmp r2, #0x12
/*0x5568*/      blo jump_555a
            jump_556a:
/*0x556a*/      cbz r0, jump_5586
/*0x556c*/      cmp r2, #0x11
/*0x556e*/      beq jump_5580
/*0x5570*/      cmp r2, #0x12
/*0x5572*/      beq jump_5580
/*0x5574*/      ldrb r0, [r1, #1]
/*0x5576*/      cmp r0, #0xff
/*0x5578*/      beq jump_5580
            jump_557a:
/*0x557a*/      strb.w r0, [r3, #0x2e]
/*0x557e*/      pop {r4, r5, pc}
            jump_5580:
/*0x5580*/      ldrb.w r0, [r3, #0x2f]
/*0x5584*/      b jump_557a
            jump_5586:
/*0x5586*/      cbz r2, jump_5592
/*0x5588*/      cmp r2, #0x12
/*0x558a*/      beq jump_5592
/*0x558c*/      ldrb r0, [r1, #-0x1]
/*0x5590*/      b jump_557a
            jump_5592:
/*0x5592*/      ldrb.w r1, [r3, #0x40]
/*0x5596*/      movs r0, #0x12
/*0x5598*/      b jump_55a8
            jump_559a:
/*0x559a*/      ldrb r2, [r1]
/*0x559c*/      cmp r2, #0xff
/*0x559e*/      beq jump_55a6
/*0x55a0*/      strb.w r2, [r3, #0x2e]
/*0x55a4*/      b jump_55a8
            jump_55a6:
/*0x55a6*/      .short 0x1e49 /* subs r1, r1, #1 */
            jump_55a8:
/*0x55a8*/      .short 0x1e40 /* subs r0, r0, #1 */
/*0x55aa*/      uxtb r0, r0
/*0x55ac*/      bhs jump_559a
/*0x55ae*/      pop {r4, r5, pc}

            data_55b0:
/*0x55b0*/  .word 0x20000d63


            .thumb_func
            call_55b4:
/*0x55b4*/      push.w {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
/*0x55b8*/      ldr.w sb, [pc, #0x278] /* data_5834 */
/*0x55bc*/      ldrb.w r0, [sb]
/*0x55c0*/      tst.w r0, #0xe
/*0x55c4*/      beq jump_55cc
/*0x55c6*/      bl call_8844
            jump_55ca:
/*0x55ca*/      b jump_5820
            jump_55cc:
/*0x55cc*/      ldr.w r2, [sb]
/*0x55d0*/      ldr r5, [pc, #0x264] /* data_5838 */
/*0x55d2*/      lsls r2, r2, #2
/*0x55d4*/      mov.w fp, #0x400
/*0x55d8*/      bpl jump_5606
/*0x55da*/      ldrb r0, [r5, #4]
/*0x55dc*/      cbz r0, jump_55e2
/*0x55de*/      movs r2, #0xff
/*0x55e0*/      b jump_55e4
            jump_55e2:
/*0x55e2*/      movs r2, #0
            jump_55e4:
/*0x55e4*/      mov.w r1, #0x168
/*0x55e8*/      ldr r0, [pc, #0x250] /* data_583c */
/*0x55ea*/      bl _memset
/*0x55ee*/      ldrh r0, [r5, #6]
/*0x55f0*/      cmp r0, #0
/*0x55f2*/      bne jump_55ca
/*0x55f4*/      ldrb r0, [r5, #4]
/*0x55f6*/      cbz r0, jump_5602
/*0x55f8*/      movs r0, #0
            jump_55fa:
/*0x55fa*/      strb r0, [r5, #4]
/*0x55fc*/      strh.w fp, [r5, #6]
/*0x5600*/      b jump_5820
            jump_5602:
/*0x5602*/      movs r0, #1
/*0x5604*/      b jump_55fa
            jump_5606:
/*0x5606*/      ldr r1, [pc, #0x238] /* data_5840 */
/*0x5608*/      ldr r6, [pc, #0x230] /* data_583c */
/*0x560a*/      ldr r4, [pc, #0x238] /* data_5844 */
/*0x560c*/      lsls r2, r0, #0x1f
/*0x560e*/      bne jump_5638
/*0x5610*/      ldrb r2, [r1, #2]
/*0x5612*/      mov sl, r1
/*0x5614*/      cmp r2, #1
/*0x5616*/      beq jump_5638
/*0x5618*/      ldr.w r8, [pc, #0x22c] /* data_5848 */
/*0x561c*/      ldrb.w r0, [r8]
/*0x5620*/      lsls r0, r0, #0x1e
/*0x5622*/      bmi jump_5628
/*0x5624*/      bl call_8a4c
            jump_5628:
/*0x5628*/      ldr r0, [pc, #0x220] /* data_584c */
/*0x562a*/      ldrb r0, [r0]
/*0x562c*/      lsls r0, r0, #0x1b
/*0x562e*/      bpl jump_5636
/*0x5630*/      ldrb.w r0, [sb, #1]
/*0x5634*/      cbz r0, jump_569e
            jump_5636:
/*0x5636*/      b jump_5758
            jump_5638:
/*0x5638*/      ldrh r2, [r5, #6]
/*0x563a*/      cmp r2, #0
/*0x563c*/      bne jump_55ca
/*0x563e*/      ldrh r1, [r1]
/*0x5640*/      lsls r0, r0, #0x1f
/*0x5642*/      ldrb r4, [r4, r1]
/*0x5644*/      mov.w r1, #0x3e8
/*0x5648*/      strh r1, [r5, #6]
/*0x564a*/      beq jump_5654
/*0x564c*/      movs r0, #0
/*0x564e*/      bl call_89c0
/*0x5652*/      b jump_5820
            jump_5654:
/*0x5654*/      ldr r0, [pc, #0x1f8] /* data_5850 */
/*0x5656*/      ldrb r0, [r0]
/*0x5658*/      cmp r0, #1
/*0x565a*/      beq jump_566a
/*0x565c*/      cmp r0, #2
/*0x565e*/      beq jump_566a
/*0x5660*/      cmp r0, #4
/*0x5662*/      beq jump_5672
/*0x5664*/      cmp r0, #5
/*0x5666*/      bne jump_5694
/*0x5668*/      b jump_5680
            jump_566a:
/*0x566a*/      movs r0, #1
/*0x566c*/      bl call_89c0
/*0x5670*/      b jump_5694
            jump_5672:
/*0x5672*/      bl call_4fe8
/*0x5676*/      movs r0, #0xff
/*0x5678*/      adds r1, r6, r4
/*0x567a*/      strb.w r0, [r1, #0xf0]
/*0x567e*/      b jump_5694
            jump_5680:
/*0x5680*/      bl call_4fe8
/*0x5684*/      movs r0, #0
/*0x5686*/      adds r1, r6, r4
/*0x5688*/      strb.w r0, [r1, #0xf0]
/*0x568c*/      ldrb r0, [r5, #4]
/*0x568e*/      cbz r0, jump_5692
/*0x5690*/      movs r0, #0xff
            jump_5692:
/*0x5692*/      strb r0, [r6, r4]
            jump_5694:
/*0x5694*/      ldrb r0, [r5, #4]
/*0x5696*/      cbz r0, jump_56a0
/*0x5698*/      movs r0, #0
            jump_569a:
/*0x569a*/      strb r0, [r5, #4]
/*0x569c*/      b jump_5820
            jump_569e:
/*0x569e*/      b jump_56a4
            jump_56a0:
/*0x56a0*/      movs r0, #1
/*0x56a2*/      b jump_569a
            jump_56a4:
/*0x56a4*/      ldrb.w r0, [r8]
/*0x56a8*/      lsls r0, r0, #0x1f
/*0x56aa*/      bne jump_5758
/*0x56ac*/      mov r0, sp
/*0x56ae*/      bl call_52e0
/*0x56b2*/      cbz r0, jump_56e8
/*0x56b4*/      movs r1, #3
/*0x56b6*/      ldr.w ip, [sp]
/*0x56ba*/      b jump_56e2
            jump_56bc:
/*0x56bc*/      adds r0, r4, r1
/*0x56be*/      ldrb.w r3, [r0, #0x3a]
/*0x56c2*/      movs r0, #3
/*0x56c4*/      b jump_56dc
            jump_56c6:
/*0x56c6*/      cmp r1, r0
/*0x56c8*/      bne jump_56d0
/*0x56ca*/      ldrb.w r2, [ip, r0]
/*0x56ce*/      b jump_56d2
            jump_56d0:
/*0x56d0*/      movs r2, #0
            jump_56d2:
/*0x56d2*/      rsb r7, r0, r0, lsl #4
/*0x56d6*/      add.w r7, r6, r7, lsl #3
/*0x56da*/      strb r2, [r7, r3]
            jump_56dc:
/*0x56dc*/      .short 0x1e40 /* subs r0, r0, #1 */
/*0x56de*/      uxtb r0, r0
/*0x56e0*/      bhs jump_56c6
            jump_56e2:
/*0x56e2*/      .short 0x1e49 /* subs r1, r1, #1 */
/*0x56e4*/      uxtb r1, r1
/*0x56e6*/      bhs jump_56bc
            jump_56e8:
/*0x56e8*/      ldr r6, [pc, #0x168] /* data_5854 */
/*0x56ea*/      ldrb.w r0, [r6, #0x2e]
/*0x56ee*/      cmp r0, #9
/*0x56f0*/      beq jump_5758
/*0x56f2*/      ldrh r0, [r5, #6]
/*0x56f4*/      cbnz r0, jump_5702
/*0x56f6*/      strh.w fp, [r5, #6]
/*0x56fa*/      ldrb r0, [r5, #4]
/*0x56fc*/      cbz r0, jump_571a
/*0x56fe*/      movs r0, #0
            jump_5700:
/*0x5700*/      strb r0, [r5, #4]
            jump_5702:
/*0x5702*/      ldrb.w r0, [sb]
/*0x5706*/      lsls r0, r0, #0x1b
/*0x5708*/      bmi jump_5740
/*0x570a*/      ldrb.w r0, [r6, #0x2d]
/*0x570e*/      lsls r0, r0, #0x1f
/*0x5710*/      beq jump_5728
/*0x5712*/      ldrb r0, [r5, #4]
/*0x5714*/      cbz r0, jump_571e
/*0x5716*/      movs r1, #0xff
/*0x5718*/      b jump_5720
            jump_571a:
/*0x571a*/      movs r0, #1
/*0x571c*/      b jump_5700
            jump_571e:
/*0x571e*/      movs r1, #0
            jump_5720:
/*0x5720*/      ldrb.w r0, [r4, #0x42]
/*0x5724*/      bl call_3f80
            jump_5728:
/*0x5728*/      ldrb r0, [r5, #4]
/*0x572a*/      cbz r0, jump_5730
/*0x572c*/      movs r1, #0xff
/*0x572e*/      b jump_5732
            jump_5730:
/*0x5730*/      movs r1, #0
            jump_5732:
/*0x5732*/      ldr r0, [pc, #0x110] /* data_5844 */
/*0x5734*/      ldrb.w r2, [r6, #0x2c]
/*0x5738*/      adds r0, #0x3e
/*0x573a*/      ldrb r0, [r2, r0]
/*0x573c*/      bl call_3f80
            jump_5740:
/*0x5740*/      ldrb r0, [r5, #4]
/*0x5742*/      cbz r0, jump_5748
/*0x5744*/      movs r1, #0xff
/*0x5746*/      b jump_574a
            jump_5748:
/*0x5748*/      movs r1, #0
            jump_574a:
/*0x574a*/      ldr r0, [pc, #0x10c] /* data_5858 */
/*0x574c*/      ldrb r2, [r0, #2]
/*0x574e*/      ldr r0, [pc, #0x10c] /* data_585c */
/*0x5750*/      ldrb r0, [r0, r2]
/*0x5752*/      ldrb r0, [r4, r0]
/*0x5754*/      bl call_3f80
            jump_5758:
/*0x5758*/      ldrb.w r0, [sb]
/*0x575c*/      lsls r0, r0, #0x1b
/*0x575e*/      bpl jump_5772
/*0x5760*/      mov r0, sp
/*0x5762*/      bl call_52e0
/*0x5766*/      ldrb.w r0, [r4, #0xe8]
/*0x576a*/      ldr r1, [sp]
/*0x576c*/      bl call_3ef4
/*0x5770*/      b jump_5820
            jump_5772:
/*0x5772*/      ldrb.w r0, [r8]
/*0x5776*/      mov.w r7, #1
/*0x577a*/      lsls r0, r0, #0x1e
/*0x577c*/      bmi jump_57a8
/*0x577e*/      ldr.w fp, [pc, #0xdc] /* data_585c */
/*0x5782*/      movs r6, #3
/*0x5784*/      sub.w fp, fp, #3
/*0x5788*/      b jump_57a2
            jump_578a:
/*0x578a*/      ldrb r1, [r5]
/*0x578c*/      lsl.w r0, r7, r6
/*0x5790*/      tst r0, r1
/*0x5792*/      beq jump_5798
/*0x5794*/      movs r1, #1
/*0x5796*/      b jump_579a
            jump_5798:
/*0x5798*/      movs r1, #0
            jump_579a:
/*0x579a*/      ldrb.w r0, [fp, r6]
/*0x579e*/      bl call_8c24
            jump_57a2:
/*0x57a2*/      .short 0x1e76 /* subs r6, r6, #1 */
/*0x57a4*/      uxtb r6, r6
/*0x57a6*/      bhs jump_578a
            jump_57a8:
/*0x57a8*/      ldrh r0, [r5, #8]
/*0x57aa*/      cbz r0, jump_57c0
/*0x57ac*/      lsls r0, r0, #0x17
/*0x57ae*/      asrs r0, r0, #8
/*0x57b0*/      lsrs r1, r0, #0x18
/*0x57b2*/      ldr r0, [pc, #0xa4] /* data_5858 */
/*0x57b4*/      ldrb r2, [r0, #2]
/*0x57b6*/      ldr r0, [pc, #0xa4] /* data_585c */
/*0x57b8*/      ldrb r0, [r0, r2]
/*0x57ba*/      ldrb r0, [r4, r0]
/*0x57bc*/      bl call_3f80
            jump_57c0:
/*0x57c0*/      ldrb.w r0, [r8]
/*0x57c4*/      lsls r0, r0, #0x1e
/*0x57c6*/      bmi jump_5820
/*0x57c8*/      ldrb.w r0, [sl, #2]
/*0x57cc*/      cmp r0, #2
/*0x57ce*/      bne jump_5820
/*0x57d0*/      ldr r6, [pc, #0x8c] /* data_5860 */
/*0x57d2*/      movs r5, #0xf
/*0x57d4*/      b jump_581a
            jump_57d6:
/*0x57d6*/      movs r4, #8
/*0x57d8*/      .short 0x1e76 /* subs r6, r6, #1 */
/*0x57da*/      b jump_5814
            jump_57dc:
/*0x57dc*/      ldrb r0, [r6]
/*0x57de*/      lsl.w r1, r7, r4
/*0x57e2*/      tst r0, r1
/*0x57e4*/      beq jump_5814
/*0x57e6*/      add.w r0, r4, r5, lsl #3
/*0x57ea*/      uxtb r0, r0
/*0x57ec*/      mov r8, r0
/*0x57ee*/      mov r1, sp
/*0x57f0*/      bl call_3d78
/*0x57f4*/      ldrb.w r0, [sp]
/*0x57f8*/      cmp r0, #0xff
/*0x57fa*/      bne jump_580c
/*0x57fc*/      ldrb.w r0, [sp, #1]
/*0x5800*/      cmp r0, #0xff
/*0x5802*/      bne jump_580c
/*0x5804*/      ldrb.w r0, [sp, #2]
/*0x5808*/      cmp r0, #0xff
/*0x580a*/      beq jump_5830
            jump_580c:
/*0x580c*/      movs r1, #0xff
            jump_580e:
/*0x580e*/      mov r0, r8
/*0x5810*/      bl call_3f80
            jump_5814:
/*0x5814*/      .short 0x1e64 /* subs r4, r4, #1 */
/*0x5816*/      uxtb r4, r4
/*0x5818*/      bhs jump_57dc
            jump_581a:
/*0x581a*/      .short 0x1e6d /* subs r5, r5, #1 */
/*0x581c*/      uxtb r5, r5
/*0x581e*/      bhs jump_57d6
            jump_5820:
/*0x5820*/      ldr.w r1, [sb]
/*0x5824*/      orr r1, r1, #0x10000000
/*0x5828*/      str.w r1, [sb]
/*0x582c*/      pop.w {r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
            jump_5830:
/*0x5830*/      movs r1, #0
/*0x5832*/      b jump_580e

            data_5834:
/*0x5834*/  .word 0x20000050
            data_5838:
/*0x5838*/  .word 0x20000078
            data_583c:
/*0x583c*/  .word 0x200000df
            data_5840:
/*0x5840*/  .word 0x2000006c
            data_5844:
/*0x5844*/  .word 0x00009872 /* possible pointer */
            data_5848:
/*0x5848*/  .word 0x20000076
            data_584c:
/*0x584c*/  .word 0x20000058
            data_5850:
/*0x5850*/  .word 0x20000064
            data_5854:
/*0x5854*/  .word 0x20000d34
            data_5858:
/*0x5858*/  .word 0x20000c90
            data_585c:
/*0x585c*/  .word 0x00009cc7 /* possible pointer */
            data_5860:
/*0x5860*/  .word 0x200000b2


            .thumb_func
            call_5864:
/*0x5864*/      push.w {r4, r5, r6, r7, r8, lr}
/*0x5868*/      movs r4, #0
/*0x586a*/      ldr r7, [pc, #0x34] /* data_58a0 */
/*0x586c*/      ldr r6, [pc, #0x34] /* data_58a4 */
/*0x586e*/      movs r5, #1
            jump_5870:
/*0x5870*/      ldr r0, [r7]
/*0x5872*/      lsl.w r1, r5, r4
/*0x5876*/      tst r0, r1
/*0x5878*/      beq jump_5888
/*0x587a*/      add.w r0, r4, r4, lsl #2
/*0x587e*/      add.w r0, r6, r0, lsl #2
/*0x5882*/      ldr r0, [r0, #4]
/*0x5884*/      cbz r0, jump_5888
/*0x5886*/      blx r0
            jump_5888:
/*0x5888*/      .short 0x1c64 /* adds r4, r4, #1 */
/*0x588a*/      uxtb r4, r4
/*0x588c*/      cmp r4, #0xa
/*0x588e*/      blo jump_5870
/*0x5890*/      ldr r0, [pc, #0x14] /* data_58a8 */
/*0x5892*/      ldr r1, [r0]
/*0x5894*/      orr r1, r1, #0x8000000
/*0x5898*/      str r1, [r0]
/*0x589a*/      pop.w {r4, r5, r6, r7, r8, pc}

/*0x589e*/  .byte 0x00
/*0x589f*/  .byte 0x00

            data_58a0:
/*0x58a0*/  .word 0x20001bec
            data_58a4:
/*0x58a4*/  .word 0x00009e8c /* possible pointer */
            data_58a8:
/*0x58a8*/  .word 0x20000050


            .thumb_func
            call_58ac:
/*0x58ac*/      push {r4, r5, r6, lr}
/*0x58ae*/      movs r4, #1
/*0x58b0*/      ldr r5, [pc, #0x18] /* data_58cc */
/*0x58b2*/      b jump_58c4
            jump_58b4:
/*0x58b4*/      add.w r0, r5, r4, lsl #3
/*0x58b8*/      ldr.w r1, [r5, r4, lsl #3]
/*0x58bc*/      ldrb r2, [r0, #4]
/*0x58be*/      mov r0, r4
/*0x58c0*/      bl call_8cc8
            jump_58c4:
/*0x58c4*/      .short 0x1e64 /* subs r4, r4, #1 */
/*0x58c6*/      uxtb r4, r4
/*0x58c8*/      bhs jump_58b4
/*0x58ca*/      pop {r4, r5, r6, pc}

            data_58cc:
/*0x58cc*/  .word 0x00009ccc /* possible pointer */


            .thumb_func
            loc_58d0:
/*0x58d0*/      movs r1, #0xff
/*0x58d2*/      ldr r2, [pc, #8] /* data_58dc */
/*0x58d4*/      lsrs r0, r0, #0x18
/*0x58d6*/      strb r1, [r2, r0]
/*0x58d8*/      bx lr

/*0x58da*/  .byte 0x00
/*0x58db*/  .byte 0x00

            data_58dc:
/*0x58dc*/  .word 0x20001da8


            .thumb_func
            loc_58e0:
/*0x58e0*/      ubfx r0, r0, #0x10, #8
/*0x58e4*/      ldr r1, [pc, #0x20] /* data_5908 */
/*0x58e6*/      cmp r0, #0x4f
/*0x58e8*/      beq jump_5902
/*0x58ea*/      cmp r0, #0x50
/*0x58ec*/      beq jump_58fe
/*0x58ee*/      cmp r0, #0x51
/*0x58f0*/      beq jump_58fa
/*0x58f2*/      cmp r0, #0x52
/*0x58f4*/      bne jump_5906
/*0x58f6*/      movs r0, #3
/*0x58f8*/      b jump_5904
            jump_58fa:
/*0x58fa*/      movs r0, #1
/*0x58fc*/      b jump_5904
            jump_58fe:
/*0x58fe*/      movs r0, #2
/*0x5900*/      b jump_5904
            jump_5902:
/*0x5902*/      movs r0, #0
            jump_5904:
/*0x5904*/      strb r0, [r1, #7]
            jump_5906:
/*0x5906*/      bx lr

            data_5908:
/*0x5908*/  .word 0x20001f00

            jump_590c:
/*0x590c*/      push {r4, r5, r6, lr}
/*0x590e*/      ubfx r0, r1, #8, #8
/*0x5912*/      lsls r2, r0, #0x1e
/*0x5914*/      bpl jump_5982
/*0x5916*/      lsls r0, r0, #0x1d
/*0x5918*/      bmi jump_5982
/*0x591a*/      movs r0, #1
/*0x591c*/      ldr r3, [pc, #0x64] /* data_5984 */
/*0x591e*/      ubfx r2, r1, #0x10, #8
/*0x5922*/      b jump_592a
            jump_5924:
/*0x5924*/      ldrb r4, [r3, r0]
/*0x5926*/      cmp r4, r2
/*0x5928*/      beq jump_5982
            jump_592a:
/*0x592a*/      .short 0x1e40 /* subs r0, r0, #1 */
/*0x592c*/      uxtb r0, r0
/*0x592e*/      bhs jump_5924
/*0x5930*/      lsrs r0, r1, #0x18
/*0x5932*/      ldr r2, [pc, #0x54] /* data_5988 */
/*0x5934*/      add.w r1, r0, r0, lsl #1
/*0x5938*/      ldr r3, [pc, #0x50] /* data_598c */
/*0x593a*/      add r1, r2
/*0x593c*/      ldrb.w r4, [r1, #0x447]
/*0x5940*/      ldrb.w r2, [r3, #0x2a]
/*0x5944*/      addw r1, r1, #0x447
/*0x5948*/      cmp r4, r2
/*0x594a*/      bne jump_5968
/*0x594c*/      ldrb r4, [r1, #1]
/*0x594e*/      ldrb.w r5, [r3, #0x2b]
/*0x5952*/      cmp r4, r5
/*0x5954*/      bne jump_5968
/*0x5956*/      ldrb r4, [r1, #2]
/*0x5958*/      ldrb.w r5, [r3, #0x2c]
/*0x595c*/      cmp r4, r5
/*0x595e*/      bne jump_5968
/*0x5960*/      movs r2, #0
/*0x5962*/      strb r2, [r1]
/*0x5964*/      strb r2, [r1, #1]
/*0x5966*/      b jump_5972
            jump_5968:
/*0x5968*/      strb r2, [r1]
/*0x596a*/      ldrb r2, [r3, #0x2b]!
/*0x596e*/      strb r2, [r1, #1]
/*0x5970*/      ldrb r2, [r3, #1]
            jump_5972:
/*0x5972*/      strb r2, [r1, #2]
/*0x5974*/      bl call_3ef4
/*0x5978*/      ldr r0, [pc, #0x14] /* data_5990 */
/*0x597a*/      ldr r1, [r0]
/*0x597c*/      orr r1, r1, #0x10000000
/*0x5980*/      str r1, [r0]
            jump_5982:
/*0x5982*/      pop {r4, r5, r6, pc}

            data_5984:
/*0x5984*/  .word 0x00009cc0 /* possible pointer */
            data_5988:
/*0x5988*/  .word 0x20000d34
            data_598c:
/*0x598c*/  .word 0x20001bec
            data_5990:
/*0x5990*/  .word 0x20000050


            .thumb_func
            loc_5994:
/*0x5994*/      push {r4, lr}
/*0x5996*/      lsrs r1, r0, #8
/*0x5998*/      lsls r1, r1, #0x1e
/*0x599a*/      bpl jump_59de
/*0x599c*/      ldr r1, [pc, #0x40] /* data_59e0 */
/*0x599e*/      lsrs r0, r0, #0x18
/*0x59a0*/      ldrb r0, [r1, r0]
/*0x59a2*/      cmp r0, #0xff
/*0x59a4*/      beq jump_59de
/*0x59a6*/      lsrs r4, r0, #3
/*0x59a8*/      ldr r0, [pc, #0x38] /* data_59e4 */
/*0x59aa*/      ldr r0, [r0, #8]
/*0x59ac*/      ldrb.w r0, [r0, #0xb0]
/*0x59b0*/      lsls r0, r0, #0x18
/*0x59b2*/      bpl jump_59be
/*0x59b4*/      movs r2, #0xff
/*0x59b6*/      movs r1, #0
/*0x59b8*/      ldr r0, [pc, #0x2c] /* data_59e8 */
/*0x59ba*/      bl call_8bf8
            jump_59be:
/*0x59be*/      ldr r0, [pc, #0x28] /* data_59e8 */
/*0x59c0*/      ldr r2, [pc, #0x24] /* data_59e8 */
/*0x59c2*/      subs r0, #0x8a
/*0x59c4*/      add.w r1, r4, r4, lsl #1
/*0x59c8*/      subs r2, #0x21
/*0x59ca*/      add.w r0, r0, r1, lsl #1
/*0x59ce*/      ldrh r1, [r2, #0x21]!
/*0x59d2*/      strh r1, [r0]
/*0x59d4*/      ldrb r2, [r2, #2]
/*0x59d6*/      strb r2, [r0, #2]
/*0x59d8*/      strh.w r1, [r0, #3]
/*0x59dc*/      strb r2, [r0, #5]
            jump_59de:
/*0x59de*/      pop {r4, pc}

            data_59e0:
/*0x59e0*/  .word 0x00009cd4 /* possible pointer */
            data_59e4:
/*0x59e4*/  .word 0x20001bec
            data_59e8:
/*0x59e8*/  .word 0x20001da5


            .thumb_func
            loc_59ec:
/*0x59ec*/      movs r1, #0xff
/*0x59ee*/      ldr r2, [pc, #8] /* data_59f8 */
/*0x59f0*/      lsrs r0, r0, #0x18
/*0x59f2*/      strb r1, [r2, r0]
/*0x59f4*/      bx lr

/*0x59f6*/  .byte 0x00
/*0x59f7*/  .byte 0x00

            data_59f8:
/*0x59f8*/  .word 0x20001c96


            .thumb_func
            loc_59fc:
/*0x59fc*/      ldr r0, [pc, #4] /* data_5a04 */
/*0x59fe*/      b.w call_3f3c

/*0x5a02*/  .byte 0x00
/*0x5a03*/  .byte 0x00

            data_5a04:
/*0x5a04*/  .word 0x20000082


            .thumb_func
            loc_5a08:
/*0x5a08*/      ldr r0, [pc, #8] /* data_5a14 */
/*0x5a0a*/      ldrb r1, [r0, #4]
/*0x5a0c*/      .short 0x1c40 /* adds r0, r0, #1 */
/*0x5a0e*/      b.w loc_3f60

/*0x5a12*/  .byte 0x00
/*0x5a13*/  .byte 0x00

            data_5a14:
/*0x5a14*/  .word 0x20000089


            .thumb_func
            loc_5a18:
/*0x5a18*/      ldr r0, [pc, #4] /* data_5a20 */
/*0x5a1a*/      b.w call_3f3c

/*0x5a1e*/  .byte 0x00
/*0x5a1f*/  .byte 0x00

            data_5a20:
/*0x5a20*/  .word 0x20000085


            .thumb_func
            loc_5a24:
/*0x5a24*/      push {r4, r5, r6, r7, lr}
/*0x5a26*/      sub sp, #0x24
/*0x5a28*/      movs r1, #0x20
/*0x5a2a*/      mov r0, sp
/*0x5a2c*/      bl _memzero
/*0x5a30*/      bl call_4fe8
/*0x5a34*/      ldr r4, [pc, #0x78] /* data_5ab0 */
/*0x5a36*/      ldr r3, [pc, #0x74] /* data_5aac */
/*0x5a38*/      mov r5, r4
/*0x5a3a*/      movs r7, #0x78
/*0x5a3c*/      mov r6, sp
/*0x5a3e*/      b jump_5a62
            jump_5a40:
/*0x5a40*/      ldrb r1, [r3]
/*0x5a42*/      cbz r1, jump_5a5e
/*0x5a44*/      ldrb r0, [r4]
/*0x5a46*/      and r0, r0, #7
/*0x5a4a*/      add r0, r6
/*0x5a4c*/      adds r0, #0x17
/*0x5a4e*/      bl call_8db4
/*0x5a52*/      ldrb r0, [r4]
/*0x5a54*/      ldrb r1, [r3]
/*0x5a56*/      add.w r0, r6, r0, lsr #3
/*0x5a5a*/      bl call_8db4
            jump_5a5e:
/*0x5a5e*/      .short 0x1e5b /* subs r3, r3, #1 */
/*0x5a60*/      .short 0x1e64 /* subs r4, r4, #1 */
            jump_5a62:
/*0x5a62*/      .short 0x1e7f /* subs r7, r7, #1 */
/*0x5a64*/      uxtb r7, r7
/*0x5a66*/      bhs jump_5a40
/*0x5a68*/      ldr r7, [pc, #0x40] /* data_5aac */
/*0x5a6a*/      movs r4, #0x78
/*0x5a6c*/      .short 0x1c7f /* adds r7, r7, #1 */
/*0x5a6e*/      b jump_5a96
            jump_5a70:
/*0x5a70*/      ldrb r0, [r5], #-1
/*0x5a74*/      add.w r1, r6, r0, lsr #3
/*0x5a78*/      and r0, r0, #7
/*0x5a7c*/      add r0, r6
/*0x5a7e*/      ldrb r2, [r1]
/*0x5a80*/      ldrb r0, [r0, #0x17]
/*0x5a82*/      orrs.w r1, r2, r0
/*0x5a86*/      beq jump_5a96
/*0x5a88*/      cmp r2, r0
/*0x5a8a*/      bhi jump_5a8e
/*0x5a8c*/      mov r2, r0
            jump_5a8e:
/*0x5a8e*/      mov r1, r7
/*0x5a90*/      mov r0, r4
/*0x5a92*/      bl loc_3f14
            jump_5a96:
/*0x5a96*/      .short 0x1e64 /* subs r4, r4, #1 */
/*0x5a98*/      uxtb r4, r4
/*0x5a9a*/      bhs jump_5a70
/*0x5a9c*/      movs r2, #0xf
/*0x5a9e*/      mov r1, sp
/*0x5aa0*/      ldr r0, [pc, #0x10] /* data_5ab4 */
/*0x5aa2*/      bl call_8d5c
/*0x5aa6*/      add sp, #0x24
/*0x5aa8*/      pop {r4, r5, r6, r7, pc}

/*0x5aaa*/  .byte 0x00
/*0x5aab*/  .byte 0x00

            data_5aac:
/*0x5aac*/  .word 0x20001e1f
            data_5ab0:
/*0x5ab0*/  .word 0x00009d4b /* possible pointer */
            data_5ab4:
/*0x5ab4*/  .word 0x00009e52 /* possible pointer */


            .thumb_func
            loc_5ab8:
/*0x5ab8*/      ldr r0, [pc, #0x1c] /* data_5ad8 */
/*0x5aba*/      ldrh r0, [r0]
/*0x5abc*/      cbz r0, jump_5ace
/*0x5abe*/      cmp r0, #1
/*0x5ac0*/      beq jump_5ad2
/*0x5ac2*/      cmp r0, #2
/*0x5ac4*/      bls jump_5ace
/*0x5ac6*/      cmp r0, #4
/*0x5ac8*/      bls jump_5ad6
/*0x5aca*/      cmp r0, #6
/*0x5acc*/      bhi jump_5ad6
            jump_5ace:
/*0x5ace*/      b.w jump_8628
            jump_5ad2:
/*0x5ad2*/      b.w jump_5d68
            jump_5ad6:
/*0x5ad6*/      bx lr

            data_5ad8:
/*0x5ad8*/  .word 0x20001f00


            .thumb_func
            loc_5adc:
/*0x5adc*/      push.w {r4, r5, r6, r7, r8, lr}
/*0x5ae0*/      ldr r6, [pc, #0x40] /* data_5b24 */
/*0x5ae2*/      ldr r5, [pc, #0x44] /* data_5b28 */
/*0x5ae4*/      movs r4, #0x78
/*0x5ae6*/      add.w r7, r6, #0xf0
/*0x5aea*/      add.w r8, r5, #0x5c
/*0x5aee*/      b jump_5b1a
            jump_5af0:
/*0x5af0*/      ldrb r0, [r6, r4]
/*0x5af2*/      lsrs r1, r0, #3
/*0x5af4*/      and r0, r0, #7
/*0x5af8*/      ldrh.w r1, [r5, r1, lsl #2]
/*0x5afc*/      sub.w r0, r1, r0, lsl #2
/*0x5b00*/      sxth r0, r0
/*0x5b02*/      cmp r0, #0x60
/*0x5b04*/      blo jump_5b10
/*0x5b06*/      movs r1, #0
/*0x5b08*/      mov r0, r4
/*0x5b0a*/      bl call_3f80
/*0x5b0e*/      b jump_5b1a
            jump_5b10:
/*0x5b10*/      ldrb r2, [r7, r0]
/*0x5b12*/      mov r1, r8
/*0x5b14*/      mov r0, r4
/*0x5b16*/      bl loc_3f14
            jump_5b1a:
/*0x5b1a*/      .short 0x1e64 /* subs r4, r4, #1 */
/*0x5b1c*/      uxtb r4, r4
/*0x5b1e*/      bhs jump_5af0
/*0x5b20*/      pop.w {r4, r5, r6, r7, r8, pc}

            data_5b24:
/*0x5b24*/  .word 0x00009cd4 /* possible pointer */
            data_5b28:
/*0x5b28*/  .word 0x20001e24


            .thumb_func
            call_5b2c:
/*0x5b2c*/      push {r4, r5, r6, lr}
/*0x5b2e*/      rsb r0, r0, r0, lsl #4
/*0x5b32*/      ldr r1, [pc, #0x24] /* data_5b58 */
/*0x5b34*/      add.w r0, r0, r0, lsl #1
/*0x5b38*/      add.w r5, r1, r0, lsl #3
/*0x5b3c*/      movs r4, #0x78
/*0x5b3e*/      addw r5, r5, #0x5ac
/*0x5b42*/      b jump_5b4e
            jump_5b44:
/*0x5b44*/      mov r1, r5
/*0x5b46*/      mov r0, r4
/*0x5b48*/      bl call_3ef4
/*0x5b4c*/      .short 0x1eed /* subs r5, r5, #3 */
            jump_5b4e:
/*0x5b4e*/      .short 0x1e64 /* subs r4, r4, #1 */
/*0x5b50*/      uxtb r4, r4
/*0x5b52*/      bhs jump_5b44
/*0x5b54*/      pop {r4, r5, r6, pc}

/*0x5b56*/  .byte 0x00
/*0x5b57*/  .byte 0x00

            data_5b58:
/*0x5b58*/  .word 0x20000d34


            .thumb_func
            loc_5b5c:
/*0x5b5c*/      push {r3, r4, r5, lr}
/*0x5b5e*/      bl call_4fe8
/*0x5b62*/      movs r4, #0x17
/*0x5b64*/      b jump_5bc4
            jump_5b66:
/*0x5b66*/      ldr r1, [pc, #0x64] /* data_5bcc */
/*0x5b68*/      add.w r0, r4, r4, lsl #1
/*0x5b6c*/      add.w r1, r1, r0, lsl #1
/*0x5b70*/      ldrb r0, [r1]
/*0x5b72*/      cbnz r0, jump_5b7c
/*0x5b74*/      ldrb r0, [r1, #1]
/*0x5b76*/      cbnz r0, jump_5b7c
/*0x5b78*/      ldrb r0, [r1, #2]
/*0x5b7a*/      cbz r0, jump_5bae
            jump_5b7c:
/*0x5b7c*/      ldrb r0, [r1, #3]
/*0x5b7e*/      cbnz r0, jump_5b88
/*0x5b80*/      ldrb r0, [r1, #4]
/*0x5b82*/      cbnz r0, jump_5b88
/*0x5b84*/      ldrb r0, [r1, #5]
/*0x5b86*/      cbz r0, jump_5baa
            jump_5b88:
/*0x5b88*/      movs r2, #3
/*0x5b8a*/      mov r5, sp
/*0x5b8c*/      b jump_5b9c
            jump_5b8e:
/*0x5b8e*/      adds r3, r1, r2
/*0x5b90*/      ldrb r0, [r1, r2]
/*0x5b92*/      ldrb r3, [r3, #3]
/*0x5b94*/      cmp r0, r3
/*0x5b96*/      bhi jump_5b9a
/*0x5b98*/      mov r0, r3
            jump_5b9a:
/*0x5b9a*/      strb r0, [r5, r2]
            jump_5b9c:
/*0x5b9c*/      .short 0x1e52 /* subs r2, r2, #1 */
/*0x5b9e*/      uxtb r2, r2
/*0x5ba0*/      bhs jump_5b8e
/*0x5ba2*/      movs r2, #0xf8
/*0x5ba4*/      mov r1, r5
            jump_5ba6:
/*0x5ba6*/      mov r0, r4
/*0x5ba8*/      b jump_5bc0
            jump_5baa:
/*0x5baa*/      movs r2, #0xf8
/*0x5bac*/      b jump_5ba6
            jump_5bae:
/*0x5bae*/      ldrb r0, [r1, #3]
/*0x5bb0*/      cbnz r0, jump_5bba
/*0x5bb2*/      ldrb r0, [r1, #4]
/*0x5bb4*/      cbnz r0, jump_5bba
/*0x5bb6*/      ldrb r0, [r1, #5]
/*0x5bb8*/      cbz r0, jump_5bc4
            jump_5bba:
/*0x5bba*/      movs r2, #0xf8
/*0x5bbc*/      mov r0, r4
/*0x5bbe*/      .short 0x1cc9 /* adds r1, r1, #3 */
            jump_5bc0:
/*0x5bc0*/      bl call_8960
            jump_5bc4:
/*0x5bc4*/      .short 0x1e64 /* subs r4, r4, #1 */
/*0x5bc6*/      uxtb r4, r4
/*0x5bc8*/      bhs jump_5b66
/*0x5bca*/      pop {r3, r4, r5, pc}

            data_5bcc:
/*0x5bcc*/  .word 0x20001d1b


            .thumb_func
            loc_5bd0:
/*0x5bd0*/      ldr r0, [pc, #0xc] /* data_5be0 */
/*0x5bd2*/      ldr r1, [pc, #0xc] /* data_5be0 */
/*0x5bd4*/      ldr r0, [r0, #8]
/*0x5bd6*/      adds r1, #0xaa
/*0x5bd8*/      adds r0, #0x9e
/*0x5bda*/      b.w loc_3ec0

/*0x5bde*/  .byte 0x00
/*0x5bdf*/  .byte 0x00

            data_5be0:
/*0x5be0*/  .word 0x20001bec


            .thumb_func
            loc_5be4:
/*0x5be4*/      push {r4, r5, lr}
/*0x5be6*/      sub sp, #0x7c
/*0x5be8*/      movs r1, #0x78
/*0x5bea*/      mov r0, sp
/*0x5bec*/      ldr r2, [pc, #0x2c] /* data_5c1c */
/*0x5bee*/      movs r4, #0xfe
/*0x5bf0*/      b jump_5c06
            jump_5bf2:
/*0x5bf2*/      ldrb r3, [r2]
/*0x5bf4*/      lsls r5, r3, #0x18
/*0x5bf6*/      bpl jump_5bfe
/*0x5bf8*/      sub.w r3, r4, r3, lsl #1
/*0x5bfc*/      b jump_5c00
            jump_5bfe:
/*0x5bfe*/      lsls r3, r3, #1
            jump_5c00:
/*0x5c00*/      strb r3, [r0], #1
/*0x5c04*/      .short 0x1c52 /* adds r2, r2, #1 */
            jump_5c06:
/*0x5c06*/      .short 0x1e49 /* subs r1, r1, #1 */
/*0x5c08*/      uxtb r1, r1
/*0x5c0a*/      bhs jump_5bf2
/*0x5c0c*/      ldr r0, [pc, #0xc] /* data_5c1c */
/*0x5c0e*/      mov r1, sp
/*0x5c10*/      adds r0, #0x78
/*0x5c12*/      bl loc_3ec0
/*0x5c16*/      add sp, #0x7c
/*0x5c18*/      pop {r4, r5, pc}

/*0x5c1a*/  .byte 0x00
/*0x5c1b*/  .byte 0x00

            data_5c1c:
/*0x5c1c*/  .word 0x20001e84


            .thumb_func
            loc_5c20:
/*0x5c20*/      push {r4, r5, r6, r7, lr}
/*0x5c22*/      ldr r0, [pc, #0xc0] /* data_5ce4 */
/*0x5c24*/      sub sp, #0x54
/*0x5c26*/      add r2, sp, #0x48
/*0x5c28*/      ldrh r1, [r0, #0xa]
/*0x5c2a*/      strh.w r1, [sp, #0x42]
/*0x5c2e*/      ldrb r1, [r0, #0xc]
/*0x5c30*/      strb.w r1, [sp, #0x44]
/*0x5c34*/      ldr.w r1, [r0, #0xd]
/*0x5c38*/      str r1, [sp, #0x48]
/*0x5c3a*/      ldr.w r1, [r0, #0x11]
/*0x5c3e*/      str r1, [sp, #0x4c]
/*0x5c40*/      ldrb r0, [r0, #0x15]
/*0x5c42*/      strb.w r0, [sp, #0x50]
/*0x5c46*/      movs r0, #3
/*0x5c48*/      movs r1, #0x10
/*0x5c4a*/      subs r4, r2, #6
/*0x5c4c*/      b jump_5c56
            jump_5c4e:
/*0x5c4e*/      add.w r3, r0, r0, lsl #1
/*0x5c52*/      add r3, r2
/*0x5c54*/      strb r1, [r3, #1]
            jump_5c56:
/*0x5c56*/      .short 0x1e40 /* subs r0, r0, #1 */
/*0x5c58*/      uxtb r0, r0
/*0x5c5a*/      bhs jump_5c4e
/*0x5c5c*/      movs r5, #0x16
/*0x5c5e*/      b jump_5c6c
            jump_5c60:
/*0x5c60*/      add r2, sp, #0x48
/*0x5c62*/      mov r1, r4
/*0x5c64*/      subs r0, r4, #3
/*0x5c66*/      bl loc_3f9c
/*0x5c6a*/      .short 0x1ee4 /* subs r4, r4, #3 */
            jump_5c6c:
/*0x5c6c*/      .short 0x1e6d /* subs r5, r5, #1 */
/*0x5c6e*/      uxtb r5, r5
/*0x5c70*/      bhs jump_5c60
/*0x5c72*/      ldr r6, [pc, #0x70] /* data_5ce4 */
/*0x5c74*/      ldr r4, [pc, #0x70] /* data_5ce8 */
/*0x5c76*/      adds r6, #0xa
/*0x5c78*/      mov r7, sp
/*0x5c7a*/      ldrb r0, [r6, #0xc]
/*0x5c7c*/      cbz r0, jump_5c8e
/*0x5c7e*/      cmp r0, #2
/*0x5c80*/      beq jump_5c8a
/*0x5c82*/      cmp r0, #4
/*0x5c84*/      beq jump_5c8e
/*0x5c86*/      cmp r0, #6
/*0x5c88*/      bne jump_5cb6
            jump_5c8a:
/*0x5c8a*/      movs r5, #0x78
/*0x5c8c*/      b jump_5cdc
            jump_5c8e:
/*0x5c8e*/      movs r5, #0x78
/*0x5c90*/      b jump_5cb0
            jump_5c92:
/*0x5c92*/      ldrb r0, [r4], #-1
/*0x5c96*/      lsrs r0, r0, #3
/*0x5c98*/      cmp r0, #0x17
/*0x5c9a*/      bhs jump_5cb0
/*0x5c9c*/      ldrb r1, [r6, #0xc]
/*0x5c9e*/      cbz r1, jump_5ca4
/*0x5ca0*/      rsb.w r0, r0, #0x16
            jump_5ca4:
/*0x5ca4*/      add.w r0, r0, r0, lsl #1
/*0x5ca8*/      adds r1, r0, r7
/*0x5caa*/      mov r0, r5
/*0x5cac*/      bl call_3ef4
            jump_5cb0:
/*0x5cb0*/      .short 0x1e6d /* subs r5, r5, #1 */
/*0x5cb2*/      uxtb r5, r5
/*0x5cb4*/      bhs jump_5c92
            jump_5cb6:
/*0x5cb6*/      add sp, #0x54
/*0x5cb8*/      pop {r4, r5, r6, r7, pc}
            jump_5cba:
/*0x5cba*/      ldrb r0, [r4], #-1
/*0x5cbe*/      and r0, r0, #7
/*0x5cc2*/      cmp r0, #6
/*0x5cc4*/      bhs jump_5cdc
/*0x5cc6*/      ldrb r1, [r6, #0xc]
/*0x5cc8*/      cmp r1, #6
/*0x5cca*/      bne jump_5cd0
/*0x5ccc*/      rsb.w r0, r0, #5
            jump_5cd0:
/*0x5cd0*/      add.w r0, r0, r0, lsl #1
/*0x5cd4*/      adds r1, r0, r7
/*0x5cd6*/      mov r0, r5
/*0x5cd8*/      bl call_3ef4
            jump_5cdc:
/*0x5cdc*/      .short 0x1e6d /* subs r5, r5, #1 */
/*0x5cde*/      uxtb r5, r5
/*0x5ce0*/      bhs jump_5cba
/*0x5ce2*/      b jump_5cb6

            data_5ce4:
/*0x5ce4*/  .word 0x20001d04
            data_5ce8:
/*0x5ce8*/  .word 0x00009d4b /* possible pointer */


            .thumb_func
            loc_5cec:
/*0x5cec*/      ldr r0, [pc, #0x10] /* data_5d00 */
/*0x5cee*/      ldr r1, [pc, #0x14] /* data_5d04 */
/*0x5cf0*/      ldr r0, [r0, #8]
/*0x5cf2*/      ldrh r2, [r0, #0x7d]!
/*0x5cf6*/      strh r2, [r1, #0xa]
/*0x5cf8*/      ldrb r0, [r0, #2]
/*0x5cfa*/      strb r0, [r1, #0xc]
/*0x5cfc*/      bx lr

/*0x5cfe*/  .byte 0x00
/*0x5cff*/  .byte 0x00

            data_5d00:
/*0x5d00*/  .word 0x20001bec
            data_5d04:
/*0x5d04*/  .word 0x20000078


            .thumb_func
            loc_5d08:
/*0x5d08*/      ldr r1, [pc, #0x1c] /* data_5d28 */
/*0x5d0a*/      movs r0, #0
/*0x5d0c*/      ldr r2, [pc, #0x1c] /* data_5d2c */
/*0x5d0e*/      strh.w r0, [r1, #0x15]
/*0x5d12*/      strb r0, [r1, #0x17]
/*0x5d14*/      ldr r2, [r2, #8]
/*0x5d16*/      ldrh r3, [r2, #0x88]!
/*0x5d1a*/      strh r3, [r1, #0x12]
/*0x5d1c*/      ldrb r2, [r2, #2]
/*0x5d1e*/      strb r2, [r1, #0x14]
/*0x5d20*/      adds r1, #0x11
/*0x5d22*/      strb r0, [r1]
/*0x5d24*/      bx lr

/*0x5d26*/  .byte 0x00
/*0x5d27*/  .byte 0x00

            data_5d28:
/*0x5d28*/  .word 0x20000078
            data_5d2c:
/*0x5d2c*/  .word 0x20001bec


            .thumb_func
            loc_5d30:
/*0x5d30*/      ldr r1, [pc, #8] /* data_5d3c */
/*0x5d32*/      movs r0, #0
/*0x5d34*/      strb r0, [r1, #3]
/*0x5d36*/      b.w jump_8dc0

/*0x5d3a*/  .byte 0x00
/*0x5d3b*/  .byte 0x00

            data_5d3c:
/*0x5d3c*/  .word 0x20000085


            .thumb_func
            loc_5d40:
/*0x5d40*/      push {r4, lr}
/*0x5d42*/      movs r1, #0x7b
/*0x5d44*/      ldr r0, [pc, #0x18] /* data_5d60 */
/*0x5d46*/      bl _memzero
/*0x5d4a*/      ldr r0, [pc, #0x18] /* data_5d64 */
/*0x5d4c*/      ldr r1, [pc, #0x10] /* data_5d60 */
/*0x5d4e*/      ldr r0, [r0, #8]
/*0x5d50*/      adds r1, #0x5c
/*0x5d52*/      ldrh r2, [r0, #0xbf]!
/*0x5d56*/      strh r2, [r1, #0x1c]
/*0x5d58*/      ldrb r0, [r0, #2]
/*0x5d5a*/      strb r0, [r1, #0x1e]
/*0x5d5c*/      pop {r4, pc}

/*0x5d5e*/  .byte 0x00
/*0x5d5f*/  .byte 0x00

            data_5d60:
/*0x5d60*/  .word 0x20001da8
            data_5d64:
/*0x5d64*/  .word 0x20001bec

            jump_5d68:
/*0x5d68*/      push {r4, r5, r6, lr}
/*0x5d6a*/      bl call_4fe8
/*0x5d6e*/      ldr r4, [pc, #0x6c] /* data_5ddc */
/*0x5d70*/      movs r5, #0
/*0x5d72*/      movs r0, #2
/*0x5d74*/      strb r5, [r4, #3]
/*0x5d76*/      strb r5, [r4, #4]
/*0x5d78*/      strb r0, [r4, #5]
/*0x5d7a*/      strb r0, [r4, #6]
/*0x5d7c*/      bl rand
/*0x5d80*/      asrs r1, r0, #0x1f
/*0x5d82*/      add.w r1, r0, r1, lsr #30
/*0x5d86*/      bic r1, r1, #3
/*0x5d8a*/      subs r0, r0, r1
/*0x5d8c*/      strb r0, [r4, #7]
/*0x5d8e*/      bl rand
/*0x5d92*/      movs r1, #0xa
/*0x5d94*/      sdiv r2, r0, r1
/*0x5d98*/      mls r0, r1, r2, r0
/*0x5d9c*/      strb r0, [r4, #8]
/*0x5d9e*/      bl rand
/*0x5da2*/      movs r1, #5
/*0x5da4*/      sdiv r2, r0, r1
/*0x5da8*/      mls r0, r1, r2, r0
/*0x5dac*/      strb r0, [r4, #9]
/*0x5dae*/      adds r0, r4, #4
/*0x5db0*/      movs r2, #0xff
/*0x5db2*/      str r5, [r0, #7]!
/*0x5db6*/      movs r1, #0x32
/*0x5db8*/      str r5, [r0, #4]
/*0x5dba*/      strh r5, [r0, #8]
/*0x5dbc*/      add.w r0, r4, #0x15
/*0x5dc0*/      bl _memset
/*0x5dc4*/      movs r4, #2
/*0x5dc6*/      b jump_5dcc
            jump_5dc8:
/*0x5dc8*/      bl call_8718
            jump_5dcc:
/*0x5dcc*/      .short 0x1e64 /* subs r4, r4, #1 */
/*0x5dce*/      uxtb r4, r4
/*0x5dd0*/      bhs jump_5dc8
/*0x5dd2*/      pop.w {r4, r5, r6, lr}
/*0x5dd6*/      b.w call_8688

/*0x5dda*/  .byte 0x00
/*0x5ddb*/  .byte 0x00

            data_5ddc:
/*0x5ddc*/  .word 0x20001f00


            .thumb_func
            loc_5de0:
/*0x5de0*/      push {r4, r5, r6, lr}
/*0x5de2*/      ldr r4, [pc, #0x34] /* data_5e18 */
/*0x5de4*/      movs r5, #0x17
/*0x5de6*/      sub.w r0, r4, #0x238
/*0x5dea*/      sub.w r1, r4, #0x20
/*0x5dee*/      ldr r0, [r0, #8]
/*0x5df0*/      movs r6, #0
/*0x5df2*/      ldrh r2, [r0, #0xca]!
/*0x5df6*/      strh r2, [r1, #0x7c]!
/*0x5dfa*/      ldrb r0, [r0, #2]
/*0x5dfc*/      strb r0, [r1, #2]
/*0x5dfe*/      b jump_5e10
            jump_5e00:
/*0x5e00*/      bl call_8d38
/*0x5e04*/      strh r0, [r4]
/*0x5e06*/      bl call_8d20
/*0x5e0a*/      strb r0, [r4, #2]
/*0x5e0c*/      strb r6, [r4, #3]
/*0x5e0e*/      .short 0x1d24 /* adds r4, r4, #4 */
            jump_5e10:
/*0x5e10*/      .short 0x1e6d /* subs r5, r5, #1 */
/*0x5e12*/      uxtb r5, r5
/*0x5e14*/      bhs jump_5e00
/*0x5e16*/      pop {r4, r5, r6, pc}

            data_5e18:
/*0x5e18*/  .word 0x20001e24


            .thumb_func
            loc_5e1c:
/*0x5e1c*/      push {r4, lr}
/*0x5e1e*/      movs r1, #0x8d
/*0x5e20*/      ldr r0, [pc, #0x18] /* data_5e3c */
/*0x5e22*/      bl _memzero
/*0x5e26*/      ldr r0, [pc, #0x18] /* data_5e40 */
/*0x5e28*/      ldr r1, [pc, #0x10] /* data_5e3c */
/*0x5e2a*/      ldr r0, [r0, #8]
/*0x5e2c*/      adds r1, #0x69
/*0x5e2e*/      ldrh r2, [r0, #0xb4]!
/*0x5e32*/      strh r2, [r1, #0x21]!
/*0x5e36*/      ldrb r0, [r0, #2]
/*0x5e38*/      strb r0, [r1, #2]
/*0x5e3a*/      pop {r4, pc}

            data_5e3c:
/*0x5e3c*/  .word 0x20001d1b
            data_5e40:
/*0x5e40*/  .word 0x20001bec


            .thumb_func
            loc_5e44:
/*0x5e44*/      movs r1, #0x78
/*0x5e46*/      ldr r0, [pc, #4] /* data_5e4c */
/*0x5e48*/      b.w _memzero

            data_5e4c:
/*0x5e4c*/  .word 0x20001c96


            .thumb_func
            loc_5e50:
/*0x5e50*/      push {r4, lr}
/*0x5e52*/      movs r1, #0x78
/*0x5e54*/      ldr r0, [pc, #0x18] /* data_5e70 */
/*0x5e56*/      bl _memzero
/*0x5e5a*/      ldr r0, [pc, #0x18] /* data_5e74 */
/*0x5e5c*/      ldr r1, [pc, #0x10] /* data_5e70 */
/*0x5e5e*/      ldr r0, [r0, #8]
/*0x5e60*/      ldrh r2, [r0, #0xd5]!
/*0x5e64*/      strh r2, [r1, #0x78]!
/*0x5e68*/      ldrb r0, [r0, #2]
/*0x5e6a*/      strb r0, [r1, #2]
/*0x5e6c*/      pop {r4, pc}

/*0x5e6e*/  .byte 0x00
/*0x5e6f*/  .byte 0x00

            data_5e70:
/*0x5e70*/  .word 0x20001e84
            data_5e74:
/*0x5e74*/  .word 0x20001bec


            .thumb_func
            loc_5e78:
/*0x5e78*/      push {r4, r5, r6, lr}
/*0x5e7a*/      ldr r1, [pc, #0x44] /* data_5ec0 */
/*0x5e7c*/      movs r0, #3
/*0x5e7e*/      add.w r2, r1, #0x122
/*0x5e82*/      movs r5, #1
/*0x5e84*/      ldrb r4, [r1, #0x19]
/*0x5e86*/      ldr r3, [r1, #8]
/*0x5e88*/      b jump_5e9c
            jump_5e8a:
/*0x5e8a*/      add.w r1, r0, #0xa9
/*0x5e8e*/      ldrb r6, [r3, r1]
/*0x5e90*/      add.w r1, r0, r0, lsl #1
/*0x5e94*/      add r1, r2
/*0x5e96*/      strb r6, [r1, #3]
/*0x5e98*/      strb r4, [r1, #4]
/*0x5e9a*/      strb r5, [r1, #5]
            jump_5e9c:
/*0x5e9c*/      .short 0x1e40 /* subs r0, r0, #1 */
/*0x5e9e*/      uxtb r0, r0
/*0x5ea0*/      bhs jump_5e8a
/*0x5ea2*/      movs r0, #0
/*0x5ea4*/      strb r0, [r2, #8]
/*0x5ea6*/      ldrb r1, [r2, #3]
/*0x5ea8*/      strb r1, [r2]
/*0x5eaa*/      strb r0, [r2, #1]
/*0x5eac*/      ldrb r0, [r2, #9]
/*0x5eae*/      lsrs r0, r0, #1
/*0x5eb0*/      strb r0, [r2, #2]
/*0x5eb2*/      ldrb.w r0, [r3, #0xa5]
/*0x5eb6*/      and r0, r0, #0x1f
/*0x5eba*/      strb r0, [r2, #0xc]
/*0x5ebc*/      pop {r4, r5, r6, pc}

/*0x5ebe*/  .byte 0x00
/*0x5ebf*/  .byte 0x00

            data_5ec0:
/*0x5ec0*/  .word 0x20001bec


            .thumb_func
            loc_5ec4:
/*0x5ec4*/      ldr r2, [pc, #0x2c] /* data_5ef4 */
/*0x5ec6*/      ldr r0, [pc, #0x30] /* data_5ef8 */
/*0x5ec8*/      mov r1, r2
/*0x5eca*/      ldrb r3, [r2]
/*0x5ecc*/      ldrb r1, [r1, #4]
/*0x5ece*/      ldrb r0, [r0, #0x10]
/*0x5ed0*/      cbz r3, jump_5ee0
/*0x5ed2*/      cmp r1, r0
/*0x5ed4*/      bhi jump_5edc
/*0x5ed6*/      movs r0, #0
/*0x5ed8*/      strb r0, [r2, #4]
/*0x5eda*/      b jump_5eec
            jump_5edc:
/*0x5edc*/      subs r0, r1, r0
/*0x5ede*/      b jump_5ef0
            jump_5ee0:
/*0x5ee0*/      add r0, r1
/*0x5ee2*/      cmp r0, #0xff
/*0x5ee4*/      blo jump_5ef0
/*0x5ee6*/      movs r0, #0xff
/*0x5ee8*/      strb r0, [r2, #4]
/*0x5eea*/      movs r0, #1
            jump_5eec:
/*0x5eec*/      strb r0, [r2]
/*0x5eee*/      bx lr
            jump_5ef0:
/*0x5ef0*/      strb r0, [r2, #4]
/*0x5ef2*/      bx lr

            data_5ef4:
/*0x5ef4*/  .word 0x20000089
            data_5ef8:
/*0x5ef8*/  .word 0x20001bec


            .thumb_func
            loc_5efc:
/*0x5efc*/      ldr r1, [pc, #0x2c] /* data_5f2c */
/*0x5efe*/      ldrb r0, [r1, #1]
/*0x5f00*/      .short 0x1c40 /* adds r0, r0, #1 */
/*0x5f02*/      strb r0, [r1, #1]
/*0x5f04*/      lsls r0, r0, #0x1f
/*0x5f06*/      bne jump_5f28
/*0x5f08*/      ldr r0, [pc, #0x24] /* data_5f30 */
/*0x5f0a*/      adds r1, #0xd
/*0x5f0c*/      ldrb r0, [r0, #0x13]
/*0x5f0e*/      cmp r0, #1
/*0x5f10*/      bls jump_5f1c
/*0x5f12*/      ldrb r2, [r1, #3]
/*0x5f14*/      add r0, r2
/*0x5f16*/      uxtb r0, r0
/*0x5f18*/      strb r0, [r1, #3]
/*0x5f1a*/      b jump_5f1e
            jump_5f1c:
/*0x5f1c*/      movs r0, #1
            jump_5f1e:
/*0x5f1e*/      ldrb r2, [r1, #3]
/*0x5f20*/      add r0, r2
/*0x5f22*/      strb r0, [r1, #3]
/*0x5f24*/      b.w jump_8dc0
            jump_5f28:
/*0x5f28*/      bx lr

/*0x5f2a*/  .byte 0x00
/*0x5f2b*/  .byte 0x00

            data_5f2c:
/*0x5f2c*/  .word 0x20000078
            data_5f30:
/*0x5f30*/  .word 0x20001bec


            .thumb_func
            loc_5f34:
/*0x5f34*/      push {r4, r5, r6, r7, lr}
/*0x5f36*/      ldr r0, [pc, #0x40] /* data_5f78 */
/*0x5f38*/      movs r1, #0x78
/*0x5f3a*/      movs r5, #1
/*0x5f3c*/      subw r4, r0, #0x233
/*0x5f40*/      ldr r6, [pc, #0x38] /* data_5f7c */
/*0x5f42*/      movs r7, #0
/*0x5f44*/      b jump_5f6e
            jump_5f46:
/*0x5f46*/      ldrb r2, [r0]
/*0x5f48*/      cbz r2, jump_5f6c
/*0x5f4a*/      add.w r3, r6, r1, lsr #3
/*0x5f4e*/      and ip, r1, #7
/*0x5f52*/      ldrb r3, [r3]
/*0x5f54*/      lsl.w ip, r5, ip
/*0x5f58*/      tst.w r3, ip
/*0x5f5c*/      beq jump_5f6c
/*0x5f5e*/      ldrb r3, [r4, #0x1f]
/*0x5f60*/      cmp r2, r3
/*0x5f62*/      bls jump_5f6a
/*0x5f64*/      subs r2, r2, r3
/*0x5f66*/      strb r2, [r0]
/*0x5f68*/      b jump_5f6c
            jump_5f6a:
/*0x5f6a*/      strb r7, [r0]
            jump_5f6c:
/*0x5f6c*/      .short 0x1e40 /* subs r0, r0, #1 */
            jump_5f6e:
/*0x5f6e*/      .short 0x1e49 /* subs r1, r1, #1 */
/*0x5f70*/      uxtb r1, r1
/*0x5f72*/      bhs jump_5f46
/*0x5f74*/      pop {r4, r5, r6, r7, pc}

/*0x5f76*/  .byte 0x00
/*0x5f77*/  .byte 0x00

            data_5f78:
/*0x5f78*/  .word 0x20001e1f
            data_5f7c:
/*0x5f7c*/  .word 0x20000094


            .thumb_func
            loc_5f80:
/*0x5f80*/      push {r4, r5, r6, lr}
/*0x5f82*/      ldr r1, [pc, #0x98] /* data_601c */
/*0x5f84*/      ldrb r0, [r1, #3]
/*0x5f86*/      .short 0x1c40 /* adds r0, r0, #1 */
/*0x5f88*/      strb r0, [r1, #3]
/*0x5f8a*/      lsls r0, r0, #0x1d
/*0x5f8c*/      bne jump_5f98
/*0x5f8e*/      ldr r4, [pc, #0x90] /* data_6020 */
/*0x5f90*/      ldrh r0, [r4]
/*0x5f92*/      cbz r0, jump_5f9a
/*0x5f94*/      .short 0x1e40 /* subs r0, r0, #1 */
/*0x5f96*/      strh r0, [r4]
            jump_5f98:
/*0x5f98*/      pop {r4, r5, r6, pc}
            jump_5f9a:
/*0x5f9a*/      ldrb r0, [r4, #2]
/*0x5f9c*/      .short 0x1c40 /* adds r0, r0, #1 */
/*0x5f9e*/      strb r0, [r4, #2]
/*0x5fa0*/      ldrb r0, [r4, #6]
/*0x5fa2*/      movs r5, #8
/*0x5fa4*/      cbz r0, jump_5fb0
/*0x5fa6*/      bl call_8718
/*0x5faa*/      cbz r0, jump_5fb4
/*0x5fac*/      movs r0, #0
/*0x5fae*/      strb r0, [r4, #6]
            jump_5fb0:
/*0x5fb0*/      strh r5, [r4]
/*0x5fb2*/      pop {r4, r5, r6, pc}
            jump_5fb4:
/*0x5fb4*/      ldr r1, [pc, #0x68] /* data_6020 */
/*0x5fb6*/      ldrb r2, [r4, #3]
/*0x5fb8*/      adds r1, #0x15
/*0x5fba*/      ldrb r0, [r4, #0xa]
/*0x5fbc*/      ldrb r1, [r2, r1]
/*0x5fbe*/      cmp r0, r1
/*0x5fc0*/      bne jump_5fde
/*0x5fc2*/      ldrb r1, [r4, #4]
/*0x5fc4*/      movs r2, #3
/*0x5fc6*/      .short 0x1c49 /* adds r1, r1, #1 */
/*0x5fc8*/      uxtb r1, r1
/*0x5fca*/      strb r1, [r4, #4]
/*0x5fcc*/      udiv r1, r1, r2
/*0x5fd0*/      .short 0x1c89 /* adds r1, r1, #2 */
/*0x5fd2*/      strb r1, [r4, #6]
/*0x5fd4*/      movs r1, #4
/*0x5fd6*/      bl call_86f0
/*0x5fda*/      bl call_8688
            jump_5fde:
/*0x5fde*/      ldrb r0, [r4, #5]
/*0x5fe0*/      ldrb r1, [r4, #6]
/*0x5fe2*/      cmp r0, r1
/*0x5fe4*/      bne jump_6016
/*0x5fe6*/      ldrb r0, [r4, #3]
/*0x5fe8*/      b jump_5ff0
            jump_5fea:
/*0x5fea*/      cbz r0, jump_6012
/*0x5fec*/      .short 0x1e40 /* subs r0, r0, #1 */
/*0x5fee*/      uxtb r0, r0
            jump_5ff0:
/*0x5ff0*/      .short 0x1e49 /* subs r1, r1, #1 */
/*0x5ff2*/      uxtb r1, r1
/*0x5ff4*/      bhs jump_5fea
/*0x5ff6*/      add r0, r4
/*0x5ff8*/      ldr r1, [pc, #0x28] /* data_6024 */
/*0x5ffa*/      ldrb r0, [r0, #0x15]
/*0x5ffc*/      ldrb r0, [r1, r0]
/*0x5ffe*/      and r1, r0, #0x1f
/*0x6002*/      add r1, r4
/*0x6004*/      lsrs r3, r0, #5
/*0x6006*/      ldrb r2, [r1, #0xb]
/*0x6008*/      movs r0, #1
/*0x600a*/      lsls r0, r3
/*0x600c*/      bics r2, r0
/*0x600e*/      strb r2, [r1, #0xb]
/*0x6010*/      pop {r4, r5, r6, pc}
            jump_6012:
/*0x6012*/      movs r0, #0x31
/*0x6014*/      b jump_5ff0
            jump_6016:
/*0x6016*/      .short 0x1c40 /* adds r0, r0, #1 */
/*0x6018*/      strb r0, [r4, #5]
/*0x601a*/      pop {r4, r5, r6, pc}

            data_601c:
/*0x601c*/  .word 0x20000078
            data_6020:
/*0x6020*/  .word 0x20001f00
            data_6024:
/*0x6024*/  .word 0x00009d4c /* possible pointer */


            .thumb_func
            loc_6028:
/*0x6028*/      push {r4, r5, r6, lr}
/*0x602a*/      ldr r4, [pc, #0x4c] /* data_6078 */
/*0x602c*/      movs r5, #0x17
/*0x602e*/      b jump_606e
            jump_6030:
/*0x6030*/      ldrb r0, [r4, #3]
/*0x6032*/      .short 0x1c40 /* adds r0, r0, #1 */
/*0x6034*/      uxtb r0, r0
/*0x6036*/      strb r0, [r4, #3]
/*0x6038*/      ldrb r1, [r4, #2]
/*0x603a*/      cmp r0, r1
/*0x603c*/      blo jump_606c
/*0x603e*/      movs r0, #0
/*0x6040*/      strb r0, [r4, #3]
/*0x6042*/      ldrh r0, [r4]
/*0x6044*/      .short 0x1c40 /* adds r0, r0, #1 */
/*0x6046*/      sxth r0, r0
/*0x6048*/      strh r0, [r4]
/*0x604a*/      cmp r0, #0xbc
/*0x604c*/      ble jump_6056
/*0x604e*/      bl call_8d38
/*0x6052*/      strh r0, [r4]
/*0x6054*/      b jump_6066
            jump_6056:
/*0x6056*/      bl rand
/*0x605a*/      movs r1, #0x64
/*0x605c*/      sdiv r2, r0, r1
/*0x6060*/      mls r0, r1, r2, r0
/*0x6064*/      cbnz r0, jump_606c
            jump_6066:
/*0x6066*/      bl call_8d20
/*0x606a*/      strb r0, [r4, #2]
            jump_606c:
/*0x606c*/      .short 0x1d24 /* adds r4, r4, #4 */
            jump_606e:
/*0x606e*/      .short 0x1e6d /* subs r5, r5, #1 */
/*0x6070*/      uxtb r5, r5
/*0x6072*/      bhs jump_6030
/*0x6074*/      pop {r4, r5, r6, pc}

/*0x6076*/  .byte 0x00
/*0x6077*/  .byte 0x00

            data_6078:
/*0x6078*/  .word 0x20001e24


            .thumb_func
            loc_607c:
/*0x607c*/      ldr r1, [pc, #0x5c] /* data_60dc */
/*0x607e*/      push {r4, lr}
/*0x6080*/      ldrb r0, [r1, #2]
/*0x6082*/      .short 0x1c40 /* adds r0, r0, #1 */
/*0x6084*/      strb r0, [r1, #2]
/*0x6086*/      lsls r0, r0, #0x1e
/*0x6088*/      bne jump_60d8
/*0x608a*/      ldr r2, [pc, #0x54] /* data_60e0 */
/*0x608c*/      movs r0, #1
            jump_608e:
/*0x608e*/      add.w r1, r0, r0, lsl #1
/*0x6092*/      add.w r1, r2, r1, lsl #1
/*0x6096*/      .short 0x1c40 /* adds r0, r0, #1 */
/*0x6098*/      ldrh r3, [r1], #-6
/*0x609c*/      uxtb r0, r0
/*0x609e*/      strh r3, [r1]
/*0x60a0*/      ldrb r3, [r1, #8]
/*0x60a2*/      strb r3, [r1, #2]
/*0x60a4*/      cmp r0, #0x17
/*0x60a6*/      blo jump_608e
/*0x60a8*/      ldr r0, [pc, #0x34] /* data_60e0 */
/*0x60aa*/      movs r3, #0
/*0x60ac*/      adds r0, #0x69
/*0x60ae*/      strh.w r3, [r0, #0x1b]
/*0x60b2*/      strb r3, [r0, #0x1d]
/*0x60b4*/      movs r0, #0x17
/*0x60b6*/      b jump_60ca
            jump_60b8:
/*0x60b8*/      add.w r1, r0, r0, lsl #1
/*0x60bc*/      add.w r1, r2, r1, lsl #1
/*0x60c0*/      ldrh r4, [r1, #-0x3]!
/*0x60c4*/      strh r4, [r1, #6]
/*0x60c6*/      ldrb r4, [r1, #2]
/*0x60c8*/      strb r4, [r1, #8]
            jump_60ca:
/*0x60ca*/      .short 0x1e40 /* subs r0, r0, #1 */
/*0x60cc*/      uxtb r0, r0
/*0x60ce*/      bhs jump_60b8
/*0x60d0*/      ldr r0, [pc, #0xc] /* data_60e0 */
/*0x60d2*/      subs r0, #0x17
/*0x60d4*/      strh r3, [r0, #0x1a]
/*0x60d6*/      strb r3, [r0, #0x1c]
            jump_60d8:
/*0x60d8*/      pop {r4, pc}

/*0x60da*/  .byte 0x00
/*0x60db*/  .byte 0x00

            data_60dc:
/*0x60dc*/  .word 0x20000078
            data_60e0:
/*0x60e0*/  .word 0x20001d1b


            .thumb_func
            loc_60e4:
/*0x60e4*/      push {r4, r5, r6, r7, lr}
/*0x60e6*/      ldr r0, [pc, #0x40] /* data_6128 */
/*0x60e8*/      movs r1, #0x78
/*0x60ea*/      movs r5, #1
/*0x60ec*/      subw r4, r0, #0x121
/*0x60f0*/      ldr r6, [pc, #0x38] /* data_612c */
/*0x60f2*/      movs r7, #0
/*0x60f4*/      b jump_611e
            jump_60f6:
/*0x60f6*/      ldrb r2, [r0]
/*0x60f8*/      cbz r2, jump_611c
/*0x60fa*/      add.w r3, r6, r1, lsr #3
/*0x60fe*/      and ip, r1, #7
/*0x6102*/      ldrb r3, [r3]
/*0x6104*/      lsl.w ip, r5, ip
/*0x6108*/      tst.w r3, ip
/*0x610c*/      beq jump_611c
/*0x610e*/      ldrb r3, [r4, #0x16]
/*0x6110*/      cmp r2, r3
/*0x6112*/      bls jump_611a
/*0x6114*/      subs r2, r2, r3
/*0x6116*/      strb r2, [r0]
/*0x6118*/      b jump_611c
            jump_611a:
/*0x611a*/      strb r7, [r0]
            jump_611c:
/*0x611c*/      .short 0x1e40 /* subs r0, r0, #1 */
            jump_611e:
/*0x611e*/      .short 0x1e49 /* subs r1, r1, #1 */
/*0x6120*/      uxtb r1, r1
/*0x6122*/      bhs jump_60f6
/*0x6124*/      pop {r4, r5, r6, r7, pc}

/*0x6126*/  .byte 0x00
/*0x6127*/  .byte 0x00

            data_6128:
/*0x6128*/  .word 0x20001d0d
            data_612c:
/*0x612c*/  .word 0x20000094


            .thumb_func
            loc_6130:
/*0x6130*/      push.w {r4, r5, r6, r7, r8, lr}
/*0x6134*/      bl rand
/*0x6138*/      ldr r5, [pc, #0x74] /* data_61b0 */
/*0x613a*/      ldr r1, [r5, #8]
/*0x613c*/      ldrb.w r1, [r1, #0xd2]
/*0x6140*/      sdiv r2, r0, r1
/*0x6144*/      mls r0, r1, r2, r0
/*0x6148*/      cbnz r0, jump_6188
/*0x614a*/      bl rand
/*0x614e*/      asrs r1, r0, #0x1f
/*0x6150*/      add.w r1, r0, r1, lsr #29
/*0x6154*/      bic r1, r1, #7
/*0x6158*/      subs r0, r0, r1
/*0x615a*/      adds r0, #8
/*0x615c*/      uxtb r4, r0
/*0x615e*/      movs r6, #0x78
/*0x6160*/      add.w r7, r5, #0x298
/*0x6164*/      mov.w r8, #0xff
/*0x6168*/      b jump_6184
            jump_616a:
/*0x616a*/      bl rand
/*0x616e*/      sdiv r1, r0, r6
/*0x6172*/      mls r0, r6, r1, r0
/*0x6176*/      add r0, r7
/*0x6178*/      ldrb r1, [r0]
/*0x617a*/      cbnz r1, jump_6180
/*0x617c*/      strb.w r8, [r0]
            jump_6180:
/*0x6180*/      .short 0x1e64 /* subs r4, r4, #1 */
/*0x6182*/      uxtb r4, r4
            jump_6184:
/*0x6184*/      cmp r4, #0
/*0x6186*/      bne jump_616a
            jump_6188:
/*0x6188*/      movs r1, #0x78
/*0x618a*/      ldr r0, [pc, #0x28] /* data_61b4 */
/*0x618c*/      movs r4, #0
/*0x618e*/      b jump_61a6
            jump_6190:
/*0x6190*/      ldrb r2, [r0]
/*0x6192*/      cbz r2, jump_61a4
/*0x6194*/      ldrb.w r3, [r5, #0x25]
/*0x6198*/      cmp r2, r3
/*0x619a*/      bhi jump_61a0
/*0x619c*/      strb r4, [r0]
/*0x619e*/      b jump_61a4
            jump_61a0:
/*0x61a0*/      subs r2, r2, r3
/*0x61a2*/      strb r2, [r0]
            jump_61a4:
/*0x61a4*/      .short 0x1e40 /* subs r0, r0, #1 */
            jump_61a6:
/*0x61a6*/      .short 0x1e49 /* subs r1, r1, #1 */
/*0x61a8*/      uxtb r1, r1
/*0x61aa*/      bhs jump_6190
/*0x61ac*/      pop.w {r4, r5, r6, r7, r8, pc}

            data_61b0:
/*0x61b0*/  .word 0x20001bec
            data_61b4:
/*0x61b4*/  .word 0x20001efb


            .thumb_func
            loc_61b8:
/*0x61b8*/      ldr r2, [pc, #8] /* r2 = 0x20001d11 */
/*0x61ba*/      subs r1, r2, #3 ; r1 = 0x20001d0e
/*0x61bc*/      mov r0, r1      ; r0 = 0x20001d0e
/*0x61be*/      b.w loc_3f9c

/*0x61c2*/  .byte 0x00
/*0x61c3*/  .byte 0x00

            data_61c4:
/*0x61c4*/  .word 0x20001d11


            .thumb_func
            setup_intr_priority:
/*0x61c8*/      push {r4, lr}
/*0x61ca*/      mov.w r1, #0x3400   ; r1 = 0x3400
/*0x61ce*/      movs r0, #0         ; r0 = 0
/*0x61d0*/      bl NVIC_SetVectorTable
/*0x61d4*/      ldr r1, [pc, #0x70] /* r1 = NVIC.AIRCR_6248 */
/*0x61d6*/      ldr r0, [r1]        ; r0 = *NVIC_AIRCR
/*0x61d8*/      movw r2, #0xf8ff    ; r2 = 0xf8ff
/*0x61dc*/      ands r0, r2         ; r0 = r0 & 0xf8ff
/*0x61de*/      ldr r2, [pc, #0x6c] /* r2 = VECTKEY */
/*0x61e0*/      orr r0, r0, #0x300  ; r0 = r0 | 0x300
/*0x61e4*/      orrs r0, r2         ; r0 = r0 | VECTKEY
/*0x61e6*/      str r0, [r1]        ; *NVIC_AIRCR = r0
/*0x61e8*/      movs r2, #0
/*0x61ea*/      mov r1, r2
/*0x61ec*/      movs r0, #3
/*0x61ee*/      bl NVIC_EncodePriority
/*0x61f2*/      mov r1, r0
/*0x61f4*/      movs r0, #0x2b
/*0x61f6*/      bl NVIC_SetPriority
/*0x61fa*/      movs r2, #0
/*0x61fc*/      mov r1, r2
/*0x61fe*/      movs r0, #3
/*0x6200*/      bl NVIC_EncodePriority
/*0x6204*/      mov r1, r0
/*0x6206*/      movs r0, #0x2c
/*0x6208*/      bl NVIC_SetPriority
/*0x620c*/      movs r2, #0
/*0x620e*/      movs r1, #1
/*0x6210*/      movs r0, #3
/*0x6212*/      bl NVIC_EncodePriority
/*0x6216*/      mov r1, r0
/*0x6218*/      movs r0, #0x2a
/*0x621a*/      bl NVIC_SetPriority
/*0x621e*/      movs r2, #0
/*0x6220*/      movs r1, #2
/*0x6222*/      movs r0, #3
/*0x6224*/      bl NVIC_EncodePriority
/*0x6228*/      mov r1, r0
/*0x622a*/      movs r0, #0x29
/*0x622c*/      bl NVIC_SetPriority
/*0x6230*/      movs r2, #0
/*0x6232*/      movs r1, #2
/*0x6234*/      movs r0, #3
/*0x6236*/      bl NVIC_EncodePriority
/*0x623a*/      mov r1, r0
/*0x623c*/      pop.w {r4, lr}
/*0x6240*/      movs r0, #0x35
/*0x6242*/      b.w NVIC_SetPriority

/*0x6246*/  .byte 0x00
/*0x6247*/  .byte 0x00

            NVIC.AIRCR_6248:
/*0x6248*/  .word 0xe000ed0c
            VECTKEY:
/*0x624c*/  .word 0x05fa0000


            .thumb_func
            nvic_disable_interrupt:
/*0x6250*/      and r2, r0, #0x1f           ; r2 = arg1 & 0x1f
/*0x6254*/      movs r1, #1                 ; r1 = 1
/*0x6256*/      lsls r1, r2                 ; r1 = 1 << r2
/*0x6258*/      lsrs r0, r0, #5             ; r0 = arg1 >> 5
/*0x625a*/      lsls r0, r0, #2             ; r0 = r0 << 2
/*0x625c*/      add.w r0, r0, #-0x1fff2000  ; r0 = r0 - 0x1fff2000
/*0x6260*/      str.w r1, [r0, #0x180]      ; *(r0+0x180) = r1
/*0x6264*/      bx lr

            .thumb_func
            NVIC_EncodePriority:
/*0x6266*/      push {r4, r5, lr}
/*0x6268*/      and r3, r0, #7      ; r3 = r0 & 0b111
/*0x626c*/      rsb.w r4, r3, #7
/*0x6270*/      cmp r4, #4
/*0x6272*/      bls jump_6276
/*0x6274*/      movs r4, #4
            jump_6276:
/*0x6276*/      adds r0, r3, #4
/*0x6278*/      cmp r0, #7
/*0x627a*/      bhs jump_6280
/*0x627c*/      movs r3, #0
/*0x627e*/      b jump_6282
            jump_6280:
/*0x6280*/      .short 0x1edb /* subs r3, r3, #3 */
            jump_6282:
/*0x6282*/      movs r5, #1
/*0x6284*/      lsl.w r0, r5, r4
/*0x6288*/      .short 0x1e40 /* subs r0, r0, #1 */
/*0x628a*/      ands r0, r1
/*0x628c*/      lsls r0, r3
/*0x628e*/      lsls r5, r3
/*0x6290*/      .short 0x1e6d /* subs r5, r5, #1 */
/*0x6292*/      ands r5, r2
/*0x6294*/      orrs r0, r5
/*0x6296*/      pop {r4, r5, pc}

            .thumb_func
            NVIC_SetPriority:
/*0x6298*/      lsls r1, r1, #0x1c
/*0x629a*/      lsrs r1, r1, #0x18
/*0x629c*/      cmp r0, #0
/*0x629e*/      bge jump_62ae
/*0x62a0*/      and r0, r0, #0xf
/*0x62a4*/      add.w r0, r0, #-0x1fff2000
/*0x62a8*/      strb.w r1, [r0, #0xd14]
/*0x62ac*/      bx lr
            jump_62ae:
/*0x62ae*/      add.w r0, r0, #-0x1fff2000
/*0x62b2*/      strb.w r1, [r0, #0x400]
/*0x62b6*/      bx lr

            .thumb_func
            NVIC_SetVectorTable:
/*0x62b8*/      ldr r2, [pc, #8] /* data_62c4 */
/*0x62ba*/      ands r1, r2
/*0x62bc*/      orrs r1, r0
/*0x62be*/      ldr r0, [pc, #8] /* NVIC.VTOR_62c8 */
/*0x62c0*/      str r1, [r0]
/*0x62c2*/      bx lr

            data_62c4:
/*0x62c4*/  .word 0x1fffff80
            NVIC.VTOR_62c8:
/*0x62c8*/  .word 0xe000ed08


            .thumb_func
            spi_flash_init:
/*0x62cc*/      push {r4, lr}
/*0x62ce*/      bl spi_flash_init_gpio
/*0x62d2*/      ldr r4, [pc, #0x24] /* r4 = 0x20000011 */
/*0x62d4*/      ldrb r0, [r4]       ; r0 = (uint8_t)*r4
/*0x62d6*/      cmp r0, #1
/*0x62d8*/      bne jump_62f4       ; r0 != 1 ? jump_62f4 : continue
/*0x62da*/      bl spi_flash_config ; r0 = 1 on completion
/*0x62de*/      cmp r0, #1
/*0x62e0*/      bne jump_62ec       ; r0 != 1 ? jump_62ec : continue
/*0x62e2*/      movs r0, #2         ; r0 = 2
/*0x62e4*/      bl spi_flash_check_set_wel ; r0 = WEL_status
/*0x62e8*/      cmp r0, #1
/*0x62ea*/      beq jump_62f0       ; r0 == 1 ? jump_62f0 : continue
            jump_62ec:
                ; wel is not set or config error (?)
/*0x62ec*/      movs r0, #0         ; r0 = 0
/*0x62ee*/      pop {r4, pc}        ; return 0
            jump_62f0:
                ; write enable latch is set
/*0x62f0*/      movs r0, #2         ; r0 = 2
/*0x62f2*/      strb r0, [r4]       ; return 2
            jump_62f4:
                ; flash not initialized
/*0x62f4*/      movs r0, #1         ; r0 = 1
/*0x62f6*/      pop {r4, pc}        ; return 1

            data_62f8:
/*0x62f8*/  .word 0x20000011


            .thumb_func
            spi_flash_init_gpio:
/*0x62fc*/      push {r4, lr}
/*0x62fe*/      ldr r4, [pc, #0x10] /* r4 = 0x20000011 */
/*0x6300*/      ldrb r0, [r4]       ; r0 = (uint8_t)*r4
/*0x6302*/      cbnz r0, jump_630c  ; r0 != 0 ? jump_630c : continue
                ; configure spi flash gpio if not configured
/*0x6304*/      bl spi_flash_gpio_config
/*0x6308*/      movs r0, #1         ; r0 = 1
                ; mark 0x20000011 to indicate flash is configured
/*0x630a*/      strb r0, [r4]       ; *(uint8_t*)r4 = 1
            jump_630c:
/*0x630c*/      movs r0, #1         ; r0 = 1
/*0x630e*/      pop {r4, pc}

            data_6310:
/*0x6310*/  .word 0x20000011


            .thumb_func
            spi_flash_disable:
/*0x6314*/      b.w _spi_flash_disable

            .thumb_func
            call_6318:
/*0x6318*/      push.w {r4, r5, r6, r7, r8, lr}
/*0x631c*/      ldr r6, [pc, #0xdc] /* data_63fc */
/*0x631e*/      movs r4, #0
/*0x6320*/      adds r7, r6, #4
/*0x6322*/      ldrb r0, [r6, #2]
/*0x6324*/      sub.w r5, r6, #8
/*0x6328*/      cmp r0, #1
/*0x632a*/      beq jump_6344
/*0x632c*/      cmp r0, #2
/*0x632e*/      beq jump_63b2
/*0x6330*/      cmp r0, #3
/*0x6332*/      bne jump_6340
/*0x6334*/      movs r0, #1
/*0x6336*/      bl call_459c
/*0x633a*/      cmp r0, #0
/*0x633c*/      beq jump_6340
/*0x633e*/      strb r4, [r6, #2]
            jump_6340:
/*0x6340*/      pop.w {r4, r5, r6, r7, r8, pc}
            jump_6344:
/*0x6344*/      ldr r0, [pc, #0xb8] /* data_6400 */
/*0x6346*/      ldrb r0, [r0, #1]
/*0x6348*/      lsls r0, r0, #0x1e
/*0x634a*/      bmi jump_6362
/*0x634c*/      ldrb r0, [r5]
/*0x634e*/      cmp r0, #1
/*0x6350*/      bne jump_6362
/*0x6352*/      bl call_4b70
/*0x6356*/      cmp r0, #1
/*0x6358*/      bne jump_6362
/*0x635a*/      movs r0, #2
/*0x635c*/      strb r0, [r5]
/*0x635e*/      ldr r0, [pc, #0xa4] /* data_6404 */
/*0x6360*/      strh r4, [r0]
            jump_6362:
/*0x6362*/      ldr r1, [r5, #4]
/*0x6364*/      ldr r0, [pc, #0xa0] /* data_6408 */
/*0x6366*/      cmp r1, r0
/*0x6368*/      blo jump_637a
/*0x636a*/      ldrb r0, [r5]
/*0x636c*/      cmp r0, #8
/*0x636e*/      bne jump_6386
/*0x6370*/      ldr r0, [r5, #4]
/*0x6372*/      mvn r1, #0xfa0
/*0x6376*/      cmp r0, r1
/*0x6378*/      bhs jump_6386
            jump_637a:
/*0x637a*/      movs r0, #9
/*0x637c*/      strb r0, [r5]
/*0x637e*/      movs r0, #0
/*0x6380*/      bl call_459c
/*0x6384*/      b jump_6394
            jump_6386:
/*0x6386*/      ldrb r0, [r7, #5]
/*0x6388*/      lsls r0, r0, #0x1f
/*0x638a*/      beq jump_6394
/*0x638c*/      mvn r0, #2
/*0x6390*/      str r0, [r5, #4]
/*0x6392*/      strb r4, [r7, #5]
            jump_6394:
/*0x6394*/      ldrb r0, [r5]
/*0x6396*/      cmp r0, #6
/*0x6398*/      beq jump_63a2
/*0x639a*/      cmp r0, #7
/*0x639c*/      beq jump_63a2
/*0x639e*/      cmp r0, #9
/*0x63a0*/      bne jump_6340
            jump_63a2:
/*0x63a2*/      bl call_4b70
/*0x63a6*/      cmp r0, #1
/*0x63a8*/      bne jump_6340
/*0x63aa*/      pop.w {r4, r5, r6, r7, r8, lr}
/*0x63ae*/      b.w jump_64c4
            jump_63b2:
/*0x63b2*/      ldrh r0, [r7]
/*0x63b4*/      cbz r0, jump_63da
/*0x63b6*/      ldr r1, [r5, #4]
/*0x63b8*/      cmp r1, #0
/*0x63ba*/      bne jump_6340
/*0x63bc*/      cmp r0, #0xc8
/*0x63be*/      bhs jump_63d0
/*0x63c0*/      ldr r1, [pc, #0x48] /* data_640c */
/*0x63c2*/      add.w r0, r1, r0, lsl #2
/*0x63c6*/      movs r1, #7
/*0x63c8*/      ldrb r0, [r0, #1]
/*0x63ca*/      cmp.w r1, r0, lsr #5
/*0x63ce*/      bne jump_63ea
            jump_63d0:
/*0x63d0*/      ldrb r0, [r6, #3]
/*0x63d2*/      cmp r0, #1
/*0x63d4*/      beq jump_63f2
/*0x63d6*/      strh r4, [r7]
/*0x63d8*/      b jump_63ea
            jump_63da:
/*0x63da*/      ldrb r0, [r7, #4]
/*0x63dc*/      movs r1, #0
/*0x63de*/      bl call_3b68
/*0x63e2*/      movs r1, #0xf
/*0x63e4*/      ldr r0, [pc, #0x28] /* data_6410 */
/*0x63e6*/      bl _memzero
            jump_63ea:
/*0x63ea*/      pop.w {r4, r5, r6, r7, r8, lr}
/*0x63ee*/      b.w jump_8f24
            jump_63f2:
/*0x63f2*/      pop.w {r4, r5, r6, r7, r8, lr}
/*0x63f6*/      b.w call_6590

/*0x63fa*/  .byte 0x00
/*0x63fb*/  .byte 0x00

            data_63fc:
/*0x63fc*/  .word 0x2000006c
            data_6400:
/*0x6400*/  .word 0x20000058
            data_6404:
/*0x6404*/  .word 0x20000014
            data_6408:
/*0x6408*/  .word 0xfffe2b3f
            data_640c:
/*0x640c*/  .word 0x20001764
            data_6410:
/*0x6410*/  .word 0x200000a3


            .thumb_func
            call_6414:
/*0x6414*/      push {r4, r5, r6, lr}
/*0x6416*/      ldr r5, [pc, #0xa0] /* data_64b8 */
/*0x6418*/      ldr r6, [pc, #0xa0] /* data_64bc */
/*0x641a*/      ldrb r0, [r5, #2]
/*0x641c*/      cbz r0, jump_642c
/*0x641e*/      cmp r0, #1
/*0x6420*/      beq jump_64aa
/*0x6422*/      cmp r0, #2
/*0x6424*/      beq jump_6470
/*0x6426*/      cmp r0, #3
/*0x6428*/      bne jump_64b2
/*0x642a*/      b jump_649e
            jump_642c:
/*0x642c*/      bl call_8dd0
/*0x6430*/      mov r4, r0
/*0x6432*/      cmp r0, #0x14
/*0x6434*/      bhs jump_64b2
/*0x6436*/      ldrb r0, [r6, #1]
/*0x6438*/      lsls r0, r0, #0x1e
/*0x643a*/      bpl jump_64a6
/*0x643c*/      ldrb r0, [r5, #2]
/*0x643e*/      cbz r0, jump_6446
/*0x6440*/      movs r0, #0
/*0x6442*/      bl call_459c
            jump_6446:
/*0x6446*/      bl call_8df8
/*0x644a*/      strh r0, [r5]
/*0x644c*/      movs r0, #2
/*0x644e*/      strb r0, [r5, #2]
/*0x6450*/      ldr r0, [pc, #0x64] /* data_64b8 */
/*0x6452*/      ldr r2, [pc, #0x6c] /* data_64c0 */
/*0x6454*/      .short 0x1d00 /* adds r0, r0, #4 */
/*0x6456*/      movs r1, #0
/*0x6458*/      add.w r2, r2, r4, lsl #1
/*0x645c*/      strb r1, [r0, #5]
/*0x645e*/      ldrb r2, [r2, #3]
/*0x6460*/      lsrs r2, r2, #5
/*0x6462*/      strb r2, [r5, #3]
/*0x6464*/      strh r1, [r0]
/*0x6466*/      strb r4, [r0, #4]
/*0x6468*/      movs r0, #1
/*0x646a*/      bl call_7310
/*0x646e*/      b jump_64a6
            jump_6470:
/*0x6470*/      ldrb r0, [r6, #1]
/*0x6472*/      lsls r0, r0, #0x1e
/*0x6474*/      bpl jump_648c
/*0x6476*/      bl call_8df8
/*0x647a*/      ldrh r1, [r5]
/*0x647c*/      cmp r0, r1
/*0x647e*/      bne jump_642c
/*0x6480*/      ldrb r0, [r5, #3]
/*0x6482*/      cmp r0, #3
/*0x6484*/      bne jump_642c
            jump_6486:
/*0x6486*/      bl call_6590
/*0x648a*/      b jump_64a6
            jump_648c:
/*0x648c*/      bl call_8df8
/*0x6490*/      ldrh r1, [r5]
/*0x6492*/      cmp r0, r1
/*0x6494*/      bne jump_64b2
/*0x6496*/      ldrb r0, [r5, #3]
/*0x6498*/      cmp r0, #2
/*0x649a*/      beq jump_6486
/*0x649c*/      b jump_64a6
            jump_649e:
/*0x649e*/      bl call_8dd0
/*0x64a2*/      cmp r0, #0x14
/*0x64a4*/      bhs jump_64b2
            jump_64a6:
/*0x64a6*/      movs r0, #1
/*0x64a8*/      pop {r4, r5, r6, pc}
            jump_64aa:
/*0x64aa*/      pop.w {r4, r5, r6, lr}
/*0x64ae*/      b.w jump_8e10
            jump_64b2:
/*0x64b2*/      movs r0, #0
/*0x64b4*/      pop {r4, r5, r6, pc}

/*0x64b6*/  .byte 0x00
/*0x64b7*/  .byte 0x00

            data_64b8:
/*0x64b8*/  .word 0x2000006c
            data_64bc:
/*0x64bc*/  .word 0x20000058
            data_64c0:
/*0x64c0*/  .word 0x20000d34

            jump_64c4:
/*0x64c4*/      push.w {r4, r5, r6, r7, r8, lr}
/*0x64c8*/      ldr r4, [pc, #0x8c] /* data_6558 */
/*0x64ca*/      add.w r5, r4, #8
/*0x64ce*/      ldrb r0, [r4]
/*0x64d0*/      cmp r0, #9
/*0x64d2*/      beq jump_653e
/*0x64d4*/      adds r3, r5, #4
/*0x64d6*/      ldr r1, [pc, #0x84] /* data_655c */
/*0x64d8*/      ldrb r0, [r3, #4]
/*0x64da*/      add.w r2, r1, r0, lsl #1
/*0x64de*/      ldrb r0, [r5, #3]
/*0x64e0*/      .short 0x1c92 /* adds r2, r2, #2 */
/*0x64e2*/      cmp r0, #1
/*0x64e4*/      beq jump_6536
/*0x64e6*/      ldr r1, [r4, #4]
/*0x64e8*/      mvns r1, r1
/*0x64ea*/      ubfx r1, r1, #1, #0x10
            jump_64ee:
/*0x64ee*/      ldrh r7, [r3]
/*0x64f0*/      ldr r6, [pc, #0x6c] /* data_6560 */
/*0x64f2*/      add.w r7, r6, r7, lsl #2
/*0x64f6*/      strh r1, [r7, #-0x2]
/*0x64fa*/      ldrh r1, [r5]
/*0x64fc*/      mov.w r7, #0x1c00
/*0x6500*/      orr.w r0, r7, r0, lsl #13
/*0x6504*/      orrs r1, r0
/*0x6506*/      strh r1, [r2]
/*0x6508*/      ldrh r0, [r3]
/*0x650a*/      cmp r0, #0xc8
/*0x650c*/      bhs jump_6516
/*0x650e*/      mov.w r1, #0xfc00
/*0x6512*/      strh.w r1, [r6, r0, lsl #2]
            jump_6516:
/*0x6516*/      ldrb r0, [r3, #4]
/*0x6518*/      movs r1, #1
/*0x651a*/      bl call_3b68
/*0x651e*/      bl call_3d28
/*0x6522*/      ldrb r0, [r4]
/*0x6524*/      cmp r0, #7
/*0x6526*/      beq jump_653a
/*0x6528*/      movs r0, #0
/*0x652a*/      bl call_459c
/*0x652e*/      movs r0, #1
/*0x6530*/      strb r0, [r4]
            jump_6532:
/*0x6532*/      pop.w {r4, r5, r6, r7, r8, pc}
            jump_6536:
/*0x6536*/      movs r1, #0
/*0x6538*/      b jump_64ee
            jump_653a:
/*0x653a*/      movs r0, #9
/*0x653c*/      strb r0, [r4]
            jump_653e:
/*0x653e*/      movs r6, #0
/*0x6540*/      strb r6, [r5, #2]
/*0x6542*/      mov r0, r6
/*0x6544*/      bl call_459c
/*0x6548*/      str r6, [r4, #4]
/*0x654a*/      ldr r0, [pc, #0x18] /* data_6564 */
/*0x654c*/      strb r6, [r4]
/*0x654e*/      ldr r1, [r0]
/*0x6550*/      orr r1, r1, #0x8000000
/*0x6554*/      str r1, [r0]
/*0x6556*/      b jump_6532

            data_6558:
/*0x6558*/  .word 0x20000064
            data_655c:
/*0x655c*/  .word 0x20000d34
            data_6560:
/*0x6560*/  .word 0x20001764
            data_6564:
/*0x6564*/  .word 0x20000050


            .thumb_func
            call_6568:
/*0x6568*/      ldr r0, [pc, #0x20] /* data_658c */
/*0x656a*/      ldrb r1, [r0, #2]
/*0x656c*/      cmp r1, #0
/*0x656e*/      bne jump_6588
/*0x6570*/      movs r1, #1
/*0x6572*/      strb r1, [r0, #2]
/*0x6574*/      subs r2, r1, #2
/*0x6576*/      subs r0, #8
/*0x6578*/      str r2, [r0, #4]
/*0x657a*/      strb r1, [r0]
/*0x657c*/      ldr r1, [pc, #0xc] /* data_658c */
/*0x657e*/      movs r0, #0
/*0x6580*/      .short 0x1d09 /* adds r1, r1, #4 */
/*0x6582*/      strh r0, [r1]
/*0x6584*/      b.w call_459c
            jump_6588:
/*0x6588*/      bx lr

/*0x658a*/  .byte 0x00
/*0x658b*/  .byte 0x00

            data_658c:
/*0x658c*/  .word 0x2000006c


            .thumb_func
            call_6590:
/*0x6590*/      ldr r1, [pc, #8]    /* r1 = 0x2000006c */
/*0x6592*/      movs r0, #3         ; r0 = 3
/*0x6594*/      strb r0, [r1, #2]   ; *(0x2000006e) = 3
/*0x6596*/      movs r0, #2         ; r0 = 2
/*0x6598*/      b.w call_7310

            data_659c:
/*0x659c*/  .word 0x2000006c


            .thumb_func
            call_65a0:
/*0x65a0*/      push {r4, lr}
/*0x65a2*/      bl call_8dd0
/*0x65a6*/      cmp r0, #0x14
/*0x65a8*/      bhs jump_65be
/*0x65aa*/      ldr r2, [pc, #0x18] /* r2 = 0x20000d34 */
/*0x65ac*/      movw r1, #0xffff
/*0x65b0*/      add.w r0, r2, r0, lsl #1
/*0x65b4*/      strh r1, [r0, #2]
/*0x65b6*/      bl call_3d28
/*0x65ba*/      movs r0, #1
/*0x65bc*/      pop {r4, pc}
            jump_65be:
/*0x65be*/      movs r0, #0
/*0x65c0*/      pop {r4, pc}

/*0x65c2*/  .byte 0x00
/*0x65c3*/  .byte 0x00

            data_65c4:
/*0x65c4*/  .word 0x20000d34


            .thumb_func
            loc_65c8:
/*0x65c8*/      ldr r1, [pc, #0xc] /* r1 = 0x20000078 */
/*0x65ca*/      strb r0, [r1]       ; *(0x20000078) = arg1
/*0x65cc*/      ldr r0, [pc, #0xc] /* r0 = 0x20000050 */
/*0x65ce*/      ldr r1, [r0]        ; *(0x20000050) = 0x20000078
/*0x65d0*/      orr r1, r1, #0x8000000 ; r1 = r1 | 0x8000000
/*0x65d4*/      str r1, [r0]        ; *(0x20000050) = r1
/*0x65d6*/      bx lr

            data_65d8:
/*0x65d8*/  .word 0x20000078
            data_65dc:
/*0x65dc*/  .word 0x20000050


            .thumb_func
            mbia_init_gclk:
/*0x65e0*/      push {r4, r5, r6, lr}
/*0x65e2*/      sub sp, #0x18       ; sp = sp - 0x18
/*0x65e4*/      bl mbia_enable_gpio_port_c_clk
/*0x65e8*/      ldr r5, [pc, #0x60] /* r5 = 0x20000041 */
/*0x65ea*/      ldrb r0, [r5]       ; r0 = *(uint8_t*)0x20000041
/*0x65ec*/      cmp r0, #1
/*0x65ee*/      bne jump_6644       ; r0 != 1 ? jump_6644 : continue
/*0x65f0*/      movs r1, #1         ; r1 = 1
/*0x65f2*/      lsls r0, r0, #9     ; r0 = 0x200
                ; enable GPTM1 clock
/*0x65f4*/      bl call_ckcu_set_APBCCR1
/*0x65f8*/      add r0, sp, #0xc    ; r0 = sp + 0xc
/*0x65fa*/      bl call_4554
/*0x65fe*/      movs r0, #0x65      ; r0 = 0x65
/*0x6600*/      ldr r6, [pc, #0x4c] /* r6 = GPTM1_BASE_6650 */
/*0x6602*/      strh.w r0, [sp, #0xc] ; *(sp + 0xc) = 0x65
/*0x6606*/      add r1, sp, #0xc    ; r1 = sp + 0xc
/*0x6608*/      mov r0, r6          ; r0 = GPTM1_BASE
/*0x660a*/      bl TM_TimeBaseInit
/*0x660e*/      mov r0, sp          ; r0 = sp
/*0x6610*/      bl TM_OutputStructInit
/*0x6614*/      movs r0, #1         ; r0 = 1
                ; enable channel
/*0x6616*/      strb.w r0, [sp, #4] ; *(uint16_t*)(sp+4) = 1
/*0x661a*/      movs r4, #0         ; r4 = 0
                ; channel 0
/*0x661c*/      strb.w r4, [sp]     ; *(uint16_t*)sp = 0
/*0x6620*/      movs r0, #7         ; r0 = 7
                ; pwm2 output mode
/*0x6622*/      strh.w r0, [sp, #2] ; *(uint16_t*)(sp+2) = 7
                ; set compare to 0
/*0x6626*/      strh.w r4, [sp, #6] ; *(uint16_t*)(sp+6) = 0
/*0x662a*/      mov r1, sp          ; r1 = sp
/*0x662c*/      mov r0, r6          ; r0 = GPTM1_BASE
                ; configure GPTM1 timer
/*0x662e*/      bl TM_OutputInit
                ; clear timer interrupt status
/*0x6632*/      str r4, [r6, #0x7c] ; *(GPTM1_BASE->INTSCR) = 0
/*0x6634*/      movs r1, #1         ; r1 = 1
/*0x6636*/      mov r0, r6          ; r0 = GPTM1_BASE
                ; enable GPTM1 timer
/*0x6638*/      bl TM_Cmd
/*0x663c*/      bl _mbia_gclk_enable; enable MBIA_GCLK (at PC0)
/*0x6640*/      movs r0, #2         ; r0 = 2
                ; mark 0x20000041 as MBIA_GCLK enabled (2)
/*0x6642*/      strb r0, [r5]       ; *(uint8_t*)0x20000041 = 2
            jump_6644:
/*0x6644*/      add sp, #0x18
/*0x6646*/      movs r0, #1         ; r0 = 1
/*0x6648*/      pop {r4, r5, r6, pc}

/*0x664a*/  .byte 0x00
/*0x664b*/  .byte 0x00

            data_664c:
/*0x664c*/  .word 0x20000041
            GPTM1_BASE_6650:
/*0x6650*/  .word 0x4006f000


            .thumb_func
            mbia_enable_gpio_port_c_clk:
/*0x6654*/      push {r4, lr}
/*0x6656*/      ldr r4, [pc, #0x14] /* r4 = 0x20000041 */
/*0x6658*/      ldrb r0, [r4]       ; r0 = *(uint8_t*)0x20000041
/*0x665a*/      cbnz r0, jump_6668  ; r0 != 0 ? jump_6668 : continue
/*0x665c*/      movs r1, #1         ; r1 = 1
/*0x665e*/      lsls r0, r1, #0x12  ; r0 = 0x40000
                ; enable GPIO Port C clock
/*0x6660*/      bl ckcu_set_AHBCCR
/*0x6664*/      movs r0, #1         ; r0 = 1
/*0x6666*/      strb r0, [r4]       ; *(uint8_t*)0x20000041 = 1
            jump_6668:
/*0x6668*/      movs r0, #1         ; r0 = 1
/*0x666a*/      pop {r4, pc}

            data_666c:
/*0x666c*/  .word 0x20000041

            mbia_gclk_disable:
/*0x6670*/      cbz r0, jump_6676
/*0x6672*/      b.w _mbia_gclk_disable
            jump_6676:
/*0x6676*/      b.w _mbia_gclk_enable

/*0x667a*/  .byte 0x00
/*0x667b*/  .byte 0x00


            .thumb_func
            _mbia_gclk_enable:
/*0x667c*/      push {r4, lr}
/*0x667e*/      movs r2, #2     ; r2 = 2
/*0x6680*/      movs r1, #1     ; r1 = 1
/*0x6682*/      ldr r0, [pc, #0x14] /* r0 = GPIOC_BASE_6698 */
                ; disable pull register on PC0/MBIA_GCLK
/*0x6684*/      bl gpio_set_pin_pull_up_down_disable
/*0x6688*/      movs r2, #4     ; r2 = 4 (AF4/GT_CH0)
/*0x668a*/      movs r1, #0     ; r1 = 0 (EXTI_PIN0)
/*0x668c*/      pop.w {r4, lr}
/*0x6690*/      movs r0, #2     ; r0 = 2 (PORTC)
/*0x6692*/      b.w AFIO_GPxConfig

/*0x6696*/  .byte 0x00
/*0x6697*/  .byte 0x00

            GPIOC_BASE_6698:
/*0x6698*/  .word 0x400b4000

            _mbia_gclk_disable:
/*0x669c*/      push {r4, lr}
/*0x669e*/      movs r2, #0     ; r2 = 0
/*0x66a0*/      movs r1, #1     ; r1 = 1
/*0x66a2*/      ldr r0, [pc, #0x14] /* r0 = GPIOC_BASE_66b8 */
                ; pull up on PC0/MBIA_GCLK
/*0x66a4*/      bl gpio_set_pin_pull_up_down_disable
/*0x66a8*/      movs r2, #0     ; r2 = 0 (AF0/PC0)
/*0x66aa*/      pop.w {r4, lr}
/*0x66ae*/      mov r1, r2      ; r1 = 0
/*0x66b0*/      movs r0, #2     ; r0 = 2 (PORTC)
/*0x66b2*/      b.w AFIO_GPxConfig

/*0x66b6*/  .byte 0x00
/*0x66b7*/  .byte 0x00

            GPIOC_BASE_66b8:
/*0x66b8*/  .word 0x400b4000


            .thumb_func
            mcu_enter_deep_sleep1:
/*0x66bc*/      push {r4, r5, r6, lr}
/*0x66be*/      ldr r1, [pc, #0x34] /* r1 = CKCU.APBCCR1.BKPREN_66f4 */
                ; get RTC clock enable status
/*0x66c0*/      ldr r4, [r1]        ; r4 = *r1
/*0x66c2*/      ldr r5, [pc, #0x30] /* r5 = CKCU.APBCCR1.BKPREN_66f4 */
/*0x66c4*/      adds r5, #0x48      ; r5 = CKCU.APBCCR1.ADCCEN
                ; get ADC clock enable status
/*0x66c6*/      ldr r3, [r5]        ; r3 = *r5
/*0x66c8*/      movs r2, #1         ; r2 = 1
                ; enable RTC clock
/*0x66ca*/      str r2, [r1]        ; *(CKCU.APBCCR1.BKPREN) = 1
/*0x66cc*/      movs r2, #0         ; r2 = 0
                ; disable ADC clock
/*0x66ce*/      str r2, [r5]        ; *(CKCU.APBCCR1.ADCCEN) = 0
/*0x66d0*/      ldr r6, [pc, #0x24] /* r6 = PWRCU.BAKSR.BAKPORF_66f8 */
                ; set DMOSON to 0
/*0x66d2*/      str.w r2, [r6, #0x9c] ; *(PWRCU.BAKCR.DMOSON) = 0
                ; set LDOOFF to 0
/*0x66d6*/      str.w r2, [r6, #0x8c] ; *(PWRCU.BAKCR.LDOOFF) = 0
                ; restore RTC clock enable status
/*0x66da*/      str r4, [r1]        ; *(CKCU.APBCCR1.BKPREN) = r4
/*0x66dc*/      ldr r1, [pc, #0x1c] /* r1 = NVIC.SCR_66fc */
/*0x66de*/      ldr r2, [r1]        ; r2 = *(NVIC.SCR)
/*0x66e0*/      orr r2, r2, #4      ; r2  = r2 | 4 (deep sleep)
                ; set SLEEPDEEP to 1
/*0x66e4*/      str r2, [r1]        ; *(NVIC.SCR) = r2
                ; enter deep-sleep1
/*0x66e6*/      cbz r0, jump_66ee   ; arg1 == 0 ? jump_66ee : continue
/*0x66e8*/      wfi
            jump_66ea:
                ; restore ADC clock enable status
/*0x66ea*/      str r3, [r5]        ; *(CKCU.APBCCR1.ADCCEN) = r3
/*0x66ec*/      pop {r4, r5, r6, pc}
            jump_66ee:
/*0x66ee*/      wfe
/*0x66f0*/      b jump_66ea

/*0x66f2*/  .byte 0x00
/*0x66f3*/  .byte 0x00

            CKCU.APBCCR1.BKPREN_66f4:
/*0x66f4*/  .word 0x43100618
            PWRCU.BAKSR.BAKPORF_66f8:
/*0x66f8*/  .word 0x42d42000
            NVIC.SCR_66fc:
/*0x66fc*/  .word 0xe000ed10

            jump_6700:
/*0x6700*/      push.w {r4, r5, r6, r7, r8, sb, sl, lr}
/*0x6704*/      ldr r4, [pc, #0x38] /* r4 = CKCU.APBCCR1.BKPREN_6740 */
/*0x6706*/      ldr r7, [r4]        ; r7 = *(CKCU.APBCCR1.BKPREN)
/*0x6708*/      ldr r5, [pc, #0x34] /* r5 = CKCU.APBCCR1.BKPREN_6740 */
/*0x670a*/      adds r5, #0x48      ; r5 = CKCU.APBCCR1.ADCCEN
/*0x670c*/      ldr r6, [r5]        ; r6 = *(CKCU.APBCCR1.ADCCEN)
/*0x670e*/      mov.w sb, #1        ; sb = 1
/*0x6712*/      str.w sb, [r4]      ; *(CKCU.APBCCR1.BKPREN) = 1
/*0x6716*/      mov.w r8, #0        ; r8 = 0
/*0x671a*/      str.w r8, [r5]      ; *(CKCU.APBCCR1.ADCCEN) = 0
/*0x671e*/      bl call_6a04
/*0x6722*/      ldr r0, [pc, #0x20] /* r0 = PWRCU.BAKSR.BAKPORF_6744 */
/*0x6724*/      str.w r8, [r0, #0x9c] ; *(PWRCU.BAKCR.DMOSON) = 0
/*0x6728*/      str.w sb, [r0, #0x8c] ; *(PWRCU.BAKCR.LDOOFF) = 1
/*0x672c*/      str r7, [r4]        ; *(CKCU.APBCCR1.BKPREN) = r7
/*0x672e*/      ldr r0, [pc, #0x18] /* r0 = NVIC.SCR_6748 */
/*0x6730*/      ldr r1, [r0]        ; r1 = *(NVIC.SCR)
/*0x6732*/      orr r1, r1, #4      ; r1 = r1 | 4
/*0x6736*/      str r1, [r0]        ; *(NVIC.SCR) = r1
/*0x6738*/      wfe
/*0x673a*/      str r6, [r5]        ; *(CKCU.APBCCR1.ADCCEN) = r6
/*0x673c*/      pop.w {r4, r5, r6, r7, r8, sb, sl, pc}

            CKCU.APBCCR1.BKPREN_6740:
/*0x6740*/  .word 0x43100618
            PWRCU.BAKSR.BAKPORF_6744:
/*0x6744*/  .word 0x42d42000
            NVIC.SCR_6748:
/*0x6748*/  .word 0xe000ed10


            .thumb_func
            call_674c:
/*0x674c*/      ldr r1, [pc, #0x10] /* NVIC.SCR_6760 */
/*0x674e*/      ldr r2, [r1]
/*0x6750*/      bic r2, r2, #4
/*0x6754*/      str r2, [r1]
/*0x6756*/      cbz r0, jump_675c
/*0x6758*/      wfi
/*0x675a*/      bx lr
            jump_675c:
/*0x675c*/      wfe
/*0x675e*/      bx lr

            NVIC.SCR_6760:
/*0x6760*/  .word 0xe000ed10


            .thumb_func
            loc_6764:
/*0x6764*/      ldr r1, [pc, #0x34] /* FMC_BASE_679c */
/*0x6766*/      ldr.w r2, [r1, #0x180]
/*0x676a*/      uxth r2, r2
/*0x676c*/      orr r2, r2, #0x11000000
/*0x6770*/      str r2, [r0]
/*0x6772*/      ldr.w r2, [r1, #0x188]
/*0x6776*/      mov.w r3, #0x3400
/*0x677a*/      orr.w r2, r3, r2, lsl #16
/*0x677e*/      str r2, [r0, #4]
/*0x6780*/      ldr.w r2, [r1, #0x184]
/*0x6784*/      ldr.w r1, [r1, #0x184]
/*0x6788*/      subs r1, #0xc
/*0x678a*/      subs r2, #0xc
/*0x678c*/      orr.w r1, r2, r1, lsl #16
/*0x6790*/      str r1, [r0, #8]
/*0x6792*/      mov.w r1, #0x3000
/*0x6796*/      str r1, [r0, #0xc]
/*0x6798*/      bx lr

/*0x679a*/  .byte 0x00
/*0x679b*/  .byte 0x00

            FMC_BASE_679c:
/*0x679c*/  .word 0x40080000


            .thumb_func
            handle_frame:
/*0x67a0*/      push.w {r4, r5, r6, r7, r8, lr}
/*0x67a4*/      ldr r5, [pc, #0x128] /* data_68d0 */
/*0x67a6*/      ldr r0, [r5]
/*0x67a8*/      lsrs r0, r0, #0x1e
/*0x67aa*/      beq jump_688c
/*0x67ac*/      ldr r6, [pc, #0x124] /* USB_BASE_68d4 */
/*0x67ae*/      cmp r0, #1
/*0x67b0*/      beq jump_67bc
/*0x67b2*/      cmp r0, #2
/*0x67b4*/      beq jump_687c
/*0x67b6*/      cmp r0, #3
/*0x67b8*/      bne jump_688e
/*0x67ba*/      b jump_68b6
            jump_67bc:
/*0x67bc*/      ldr r4, [pc, #0x118] /* data_68d8 */
/*0x67be*/      movs r7, #1
/*0x67c0*/      ldrb r1, [r4]
/*0x67c2*/      cmp r1, #0x40
/*0x67c4*/      blo jump_67ce
/*0x67c6*/      bl call_7388
/*0x67ca*/      cbz r0, jump_6822
/*0x67cc*/      b jump_686c
            jump_67ce:
/*0x67ce*/      ldr r0, [pc, #0x108] /* data_68d8 */
/*0x67d0*/      movs r2, #0
/*0x67d2*/      cmp r1, #0x10
/*0x67d4*/      ldrb r0, [r0, #1]
/*0x67d6*/      beq jump_67e2
/*0x67d8*/      cmp r1, #0x11
/*0x67da*/      beq jump_67ec
/*0x67dc*/      cmp r1, #0x12
/*0x67de*/      bne jump_6822
/*0x67e0*/      b jump_67f2
            jump_67e2:
/*0x67e2*/      cmp r0, #2
/*0x67e4*/      bne jump_6822
/*0x67e6*/      movs r1, #4
/*0x67e8*/      str r2, [r4, #4]
/*0x67ea*/      b jump_6894
            jump_67ec:
/*0x67ec*/      bl call_691c
/*0x67f0*/      b jump_6822
            jump_67f2:
/*0x67f2*/      mov.w r3, #0x400
/*0x67f6*/      cmp r0, #0x20
/*0x67f8*/      blo jump_6818
/*0x67fa*/      sub.w r1, r0, #0x1f
/*0x67fe*/      rsb r1, r1, r1, lsl #4
/*0x6802*/      cmp.w r3, r1, lsl #2
/*0x6806*/      blt jump_6818
/*0x6808*/      rsb r0, r0, r0, lsl #4
/*0x680c*/      mov.w r1, #0x2880
/*0x6810*/      add.w r0, r1, r0, lsl #2
/*0x6814*/      movs r1, #0x3c
/*0x6816*/      b jump_6868
            jump_6818:
/*0x6818*/      cbz r0, jump_6834
/*0x681a*/      cmp r0, #1
/*0x681c*/      beq jump_6884
/*0x681e*/      cmp r0, #2
/*0x6820*/      beq jump_6890
            jump_6822:
/*0x6822*/      ldr r0, [r4]
/*0x6824*/      str r0, [r4, #4]
/*0x6826*/      movw r0, #0xaaff
/*0x682a*/      str r0, [r4]
/*0x682c*/      ldr r0, [pc, #0xa8] /* data_68d8 */
/*0x682e*/      movs r1, #0x38
/*0x6830*/      adds r0, #8
/*0x6832*/      b jump_6878
            jump_6834:
/*0x6834*/      ldrb.w r0, [r2, #0x10f]
/*0x6838*/      cmp r0, #0xaa
/*0x683a*/      beq jump_6860
/*0x683c*/      ldrb r2, [r3]
/*0x683e*/      mov r0, r3
/*0x6840*/      cmp r2, #4
/*0x6842*/      beq jump_6866
/*0x6844*/      movs r2, #0x20
/*0x6846*/      mov r1, r3
/*0x6848*/      adds r0, r4, #4
/*0x684a*/      bl memcpy
/*0x684e*/      ldr r0, [pc, #0x8c] /* FMC_BASE_68dc */
/*0x6850*/      ldr.w r1, [r0, #0x180]
/*0x6854*/      str r1, [r4, #0x24]
/*0x6856*/      ldr.w r0, [r0, #0x18c]
/*0x685a*/      movs r1, #0x28
/*0x685c*/      str r0, [r4, #0x28]
/*0x685e*/      b jump_6894
            jump_6860:
/*0x6860*/      movs r1, #0x10
/*0x6862*/      lsls r0, r1, #4
/*0x6864*/      b jump_6868
            jump_6866:
/*0x6866*/      movs r1, #0x34
            jump_6868:
/*0x6868*/      bl call_6998
            jump_686c:
/*0x686c*/      ldr r0, [r5]
/*0x686e*/      cmp.w r7, r0, lsr #30
/*0x6872*/      bne jump_687c
/*0x6874*/      movs r1, #0x3c
/*0x6876*/      adds r0, r4, #4
            jump_6878:
/*0x6878*/      bl _memzero
            jump_687c:
/*0x687c*/      ldr r1, [pc, #0x60] /* EP_SRAM.off_0d0_68e0 */
/*0x687e*/      ldr r2, [pc, #0x58] /* data_68d8 */
/*0x6880*/      movs r0, #0x10
/*0x6882*/      b jump_689c
            jump_6884:
/*0x6884*/      movs r1, #0x20
/*0x6886*/      mov.w r0, #0x5000
/*0x688a*/      b jump_6868
            jump_688c:
/*0x688c*/      b jump_68c4
            jump_688e:
/*0x688e*/      b jump_68cc
            jump_6890:
/*0x6890*/      strb r7, [r4, #4]
/*0x6892*/      movs r1, #1
            jump_6894:
/*0x6894*/      adds r0, r4, #4
/*0x6896*/      b jump_6868
            jump_6898:
/*0x6898*/      ldm r2!, {r3}
/*0x689a*/      stm r1!, {r3}
            jump_689c:
/*0x689c*/      .short 0x1e40 /* subs r0, r0, #1 */
/*0x689e*/      uxtb r0, r0
/*0x68a0*/      bhs jump_6898
/*0x68a2*/      movs r0, #0x10
/*0x68a4*/      str r0, [r6, #0x58]
/*0x68a6*/      movs r0, #0x40
/*0x68a8*/      str r0, [r6, #0x5c]
/*0x68aa*/      movs r0, #2
/*0x68ac*/      str r0, [r6, #0x50]
/*0x68ae*/      ldr r0, [r5]
/*0x68b0*/      orr r0, r0, #0xc0000000
/*0x68b4*/      str r0, [r5]
            jump_68b6:
/*0x68b6*/      ldr r0, [r6, #0x58]
/*0x68b8*/      lsls r0, r0, #0x1b
/*0x68ba*/      bpl jump_68cc
/*0x68bc*/      ldr r0, [r5]
/*0x68be*/      bic r0, r0, #0xc0000000
/*0x68c2*/      str r0, [r5]
            jump_68c4:
/*0x68c4*/      pop.w {r4, r5, r6, r7, r8, lr}
/*0x68c8*/      b.w jump_7260
            jump_68cc:
/*0x68cc*/      pop.w {r4, r5, r6, r7, r8, pc}

            data_68d0:
/*0x68d0*/  .word 0x20000050
            USB_BASE_68d4:
/*0x68d4*/  .word 0x400a8000
            data_68d8:
/*0x68d8*/  .word 0x20000ad0
            FMC_BASE_68dc:
/*0x68dc*/  .word 0x40080000
            EP_SRAM.off_0d0_68e0:
/*0x68e0*/  .word 0x400aa0d0


            .thumb_func
            call_68e4:
/*0x68e4*/      push {r4, r5}
/*0x68e6*/      lsls r3, r1, #0x1e
/*0x68e8*/      beq jump_68f2
/*0x68ea*/      pop {r4, r5}
/*0x68ec*/      mov r1, r2
/*0x68ee*/      b.w _memzero
            jump_68f2:
/*0x68f2*/      lsrs r2, r2, #2
/*0x68f4*/      mov.w r4, #0x3400
/*0x68f8*/      movs r3, #0
/*0x68fa*/      add.w r1, r1, #0x3000
/*0x68fe*/      b jump_6910
            jump_6900:
/*0x6900*/      cmp r1, r4
/*0x6902*/      bhs jump_690a
/*0x6904*/      ldr r5, [r1]
/*0x6906*/      str r5, [r0]
/*0x6908*/      b jump_690c
            jump_690a:
/*0x690a*/      str r3, [r0]
            jump_690c:
/*0x690c*/      .short 0x1d00 /* adds r0, r0, #4 */
/*0x690e*/      .short 0x1d09 /* adds r1, r1, #4 */
            jump_6910:
/*0x6910*/      .short 0x1e52 /* subs r2, r2, #1 */
/*0x6912*/      uxtb r2, r2
/*0x6914*/      bhs jump_6900
/*0x6916*/      pop {r4, r5}
/*0x6918*/      bx lr

/*0x691a*/  .byte 0x00
/*0x691b*/  .byte 0x00


            .thumb_func
            call_691c:
/*0x691c*/      push {r4, lr}
/*0x691e*/      ldr r1, [pc, #0x64] /* FMC_BASE_6984 */
/*0x6920*/      cbz r0, jump_693c
/*0x6922*/      cmp r0, #1
/*0x6924*/      beq jump_6940
/*0x6926*/      cmp r0, #2
/*0x6928*/      bne jump_6982
/*0x692a*/      movs r0, #0x35
/*0x692c*/      bl nvic_disable_interrupt
/*0x6930*/      bl usb_disable_dp_pull_up
/*0x6934*/      pop.w {r4, lr}
/*0x6938*/      b.w jump_6700
            jump_693c:
/*0x693c*/      ldr r0, [pc, #0x48] /* data_6988 */
/*0x693e*/      b jump_6944
            jump_6940:
/*0x6940*/      ldr r0, [pc, #0x44] /* data_6988 */
/*0x6942*/      .short 0x1f40 /* subs r0, r0, #5 */
            jump_6944:
/*0x6944*/      str.w r0, [r1, #0x304]
/*0x6948*/      movs r1, #1
/*0x694a*/      lsls r0, r1, #0x10
/*0x694c*/      bl ckcu_set_AHBCCR
/*0x6950*/      ldr r1, [pc, #0x38] /* GPIOA_BASE_698c */
/*0x6952*/      mov.w r0, #0x200
/*0x6956*/      str r0, [r1, #0x24]
/*0x6958*/      movs r0, #0x35
/*0x695a*/      bl nvic_disable_interrupt
/*0x695e*/      bl usb_disable_dp_pull_up
/*0x6962*/      movw r0, #0x4e20
/*0x6966*/      bl sleep
/*0x696a*/      dsb sy
/*0x696e*/      ldr r0, [pc, #0x20] /* NVIC.AIRCR_6990 */
/*0x6970*/      ldr r1, [r0]
/*0x6972*/      ldr r2, [pc, #0x20] /* data_6994 */
/*0x6974*/      and r1, r1, #0x700
/*0x6978*/      orrs r1, r2
/*0x697a*/      str r1, [r0]
/*0x697c*/      dsb sy
            jump_6980:
/*0x6980*/      b jump_6980
            jump_6982:
/*0x6982*/      pop {r4, pc}

            FMC_BASE_6984:
/*0x6984*/  .word 0x40080000
            data_6988:
/*0x6988*/  .word 0x55aafaf5
            GPIOA_BASE_698c:
/*0x698c*/  .word 0x400b0000
            NVIC.AIRCR_6990:
/*0x6990*/  .word 0xe000ed0c
            data_6994:
/*0x6994*/  .word 0x05fa0004


            .thumb_func
            call_6998:
/*0x6998*/      push {r4, r5, r6, lr}
/*0x699a*/      mov r4, r1
/*0x699c*/      mov r1, r0
/*0x699e*/      ldr r0, [pc, #0x2c] /* data_69cc */
/*0x69a0*/      ldr r2, [r0]
/*0x69a2*/      bic r2, r2, #0xc0000000
/*0x69a6*/      add.w r2, r2, #-0x80000000
/*0x69aa*/      str r2, [r0]
/*0x69ac*/      ldr r0, [pc, #0x20] /* data_69d0 */
/*0x69ae*/      subs r5, r0, #4
/*0x69b0*/      cmp r1, r0
/*0x69b2*/      beq jump_69bc
/*0x69b4*/      mov r2, r4
/*0x69b6*/      adds r0, r5, #4
/*0x69b8*/      bl memcpy
            jump_69bc:
/*0x69bc*/      adds r0, r5, r4
/*0x69be*/      rsb.w r1, r4, #0x3c
/*0x69c2*/      pop.w {r4, r5, r6, lr}
/*0x69c6*/      .short 0x1d00 /* adds r0, r0, #4 */
/*0x69c8*/      b.w _memzero

            data_69cc:
/*0x69cc*/  .word 0x20000050
            data_69d0:
/*0x69d0*/  .word 0x20000ad4

            reset_peripherals:
/*0x69d4*/      push {r4, r5, r6, r7, lr}
/*0x69d6*/      ldr r7, [pc, #0x28] /* CKCU_RSTCU_BASE_6a00 */
/*0x69d8*/      ldr.w r4, [r7, #0x104]  ; r4 = *RSTCU.AHBPRSTR
/*0x69dc*/      ldr.w r5, [r7, #0x108]  ; r5 = *RSTCU.APBPRSTR0
/*0x69e0*/      ldr.w r6, [r7, #0x10c]  ; r6 = *RSTCU.APBPRSTR1
/*0x69e4*/      bics r4, r0             ; r4 = r4 & ~arg1
/*0x69e6*/      bics r5, r1             ; r5 = r5 & ~arg2
/*0x69e8*/      bics r6, r2             ; r6 = r6 & ~arg3
/*0x69ea*/      cbz r3, jump_69f2       ; arg4 == 0 ? jump_69f2 : continue
/*0x69ec*/      orrs r4, r0             ; r4 = r4 | arg1
/*0x69ee*/      orrs r5, r1             ; r5 = r5 | arg2
/*0x69f0*/      orrs r6, r2             ; r6 = r6 | arg3
            jump_69f2:
/*0x69f2*/      str.w r4, [r7, #0x104]  ; *RSTCU.AHBPRSTR = r4
/*0x69f6*/      str.w r5, [r7, #0x108]  ; *RSTCU.APBPRSTR0 = r5
/*0x69fa*/      str.w r6, [r7, #0x10c]  ; *RSTCU.APBPRSTR1 = r6
/*0x69fe*/      pop {r4, r5, r6, r7, pc}

            CKCU_RSTCU_BASE_6a00:
/*0x6a00*/  .word 0x40088000


            .thumb_func
            call_6a04:
/*0x6a04*/      ldr r2, [pc, #0x1c]     /* r2 = RTC_PWRCU_ALIAS_BASE_6a24 */
/*0x6a06*/      movs r1, #0             ; r1 = 0
/*0x6a08*/      mov.w r0, #0x1c20       ; r0 = 0x1c20
/*0x6a0c*/      str.w r1, [r2, #0x108]  ; *(RTC.RTCCR.LSIEN)
            jump_6a10:
/*0x6a10*/      .short 0x1e40 /* subs r0, r0, #1 */ ; r0 = r0 - 1
/*0x6a12*/      bhs jump_6a10           ; r0 >= 0 ? jump_6a10 : continue
/*0x6a14*/      movs r0, #1             ; r0 = 1
/*0x6a16*/      str.w r0, [r2, #0x108]  ; *(RTC.RTCCR.LSIEN) = 1
/*0x6a1a*/      ldr r0, [pc, #0xc] /* r0 = CKCU_RSTCU_BASE_6a28 */
            jump_6a1c:
/*0x6a1c*/      ldr r1, [r0, #8]        ; r1 = *(RTC.RTCCR.CMPCLR)
/*0x6a1e*/      lsls r1, r1, #0x1a      ; r1 = r1 << 0x1a
/*0x6a20*/      bpl jump_6a1c           ; r1 >= 0 ? jump_6a1c : continue
/*0x6a22*/      bx lr

            RTC_PWRCU_ALIAS_BASE_6a24:
/*0x6a24*/  .word 0x42d40000
            CKCU_RSTCU_BASE_6a28:
/*0x6a28*/  .word 0x40088000


            .thumb_func
            call_6a2c:
/*0x6a2c*/      push.w {r4, r5, r6, r7, r8, sb, sl, lr}
/*0x6a30*/      movs r7, #0xf
/*0x6a32*/      ldr r5, [pc, #0x70] /* data_6aa4 */
/*0x6a34*/      b jump_6a90
            jump_6a36:
/*0x6a36*/      ldr r1, [pc, #0x6c] /* data_6aa4 */
/*0x6a38*/      add.w r0, r7, r7, lsl #1
/*0x6a3c*/      adds r1, #0xf
/*0x6a3e*/      add r0, r1
/*0x6a40*/      ldrb r1, [r5, #-0x1]!
/*0x6a44*/      ldrb r0, [r0, #2]
/*0x6a46*/      movs r4, #0x80
/*0x6a48*/      eor.w sb, r0, r1
/*0x6a4c*/      movs r6, #8
/*0x6a4e*/      b jump_6a8a
            jump_6a50:
/*0x6a50*/      tst.w sb, r4
/*0x6a54*/      beq jump_6a88
/*0x6a56*/      ldrb r0, [r5]
/*0x6a58*/      eors r0, r4
/*0x6a5a*/      strb r0, [r5]
/*0x6a5c*/      tst r0, r4
/*0x6a5e*/      bne jump_6a64
/*0x6a60*/      movs r0, #1
/*0x6a62*/      b jump_6a66
            jump_6a64:
/*0x6a64*/      movs r0, #0
            jump_6a66:
/*0x6a66*/      mov r8, r0
/*0x6a68*/      add.w r0, r6, r7, lsl #3
/*0x6a6c*/      uxtb r0, r0
/*0x6a6e*/      mov r1, r8
/*0x6a70*/      bl call_4914
/*0x6a74*/      cbz r0, jump_6a9a
/*0x6a76*/      movs r0, #0x30
/*0x6a78*/      bl call_7310
            jump_6a7c:
/*0x6a7c*/      movs.w r0, r8
/*0x6a80*/      beq jump_6a84
/*0x6a82*/      movs r0, #1
            jump_6a84:
/*0x6a84*/      ldr r1, [pc, #0x20] /* data_6aa8 */
/*0x6a86*/      strh r0, [r1, #2]
            jump_6a88:
/*0x6a88*/      lsrs r4, r4, #1
            jump_6a8a:
/*0x6a8a*/      .short 0x1e76 /* subs r6, r6, #1 */
/*0x6a8c*/      uxtb r6, r6
/*0x6a8e*/      bhs jump_6a50
            jump_6a90:
/*0x6a90*/      .short 0x1e7f /* subs r7, r7, #1 */
/*0x6a92*/      uxtb r7, r7
/*0x6a94*/      bhs jump_6a36
/*0x6a96*/      pop.w {r4, r5, r6, r7, r8, sb, sl, pc}
            jump_6a9a:
/*0x6a9a*/      ldrb r0, [r5]
/*0x6a9c*/      eors r0, r4
/*0x6a9e*/      strb r0, [r5]
/*0x6aa0*/      b jump_6a7c

/*0x6aa2*/  .byte 0x00
/*0x6aa3*/  .byte 0x00

            data_6aa4:
/*0x6aa4*/  .word 0x200000a3
            data_6aa8:
/*0x6aa8*/  .word 0x20000012

            jump_6aac:
/*0x6aac*/      ldr r1, [pc, #0x18] /* data_6ac8 */
/*0x6aae*/      movs r2, #0xf
/*0x6ab0*/      add.w r0, r1, #0x1e
/*0x6ab4*/      b jump_6abe
            jump_6ab6:
/*0x6ab6*/      ldrb r3, [r0, #2]
/*0x6ab8*/      strb r3, [r1], #1
/*0x6abc*/      .short 0x1cc0 /* adds r0, r0, #3 */
            jump_6abe:
/*0x6abe*/      .short 0x1e52 /* subs r2, r2, #1 */
/*0x6ac0*/      uxtb r2, r2
/*0x6ac2*/      bhs jump_6ab6
/*0x6ac4*/      bx lr

/*0x6ac6*/  .byte 0x00
/*0x6ac7*/  .byte 0x00

            data_6ac8:
/*0x6ac8*/  .word 0x20000094


            .thumb_func
            call_6acc:
/*0x6acc*/      push.w {r4, r5, r6, r7, r8, lr}
/*0x6ad0*/      mov r6, r0
/*0x6ad2*/      movs r4, #2
/*0x6ad4*/      ldr r5, [pc, #0x40] /* data_6b18 */
/*0x6ad6*/      mov.w r7, #0x1f4
            jump_6ada:
/*0x6ada*/      bl call_9020
/*0x6ade*/      movs r0, #0xf
/*0x6ae0*/      b jump_6aea
            jump_6ae2:
/*0x6ae2*/      add.w r1, r0, r0, lsl #1
/*0x6ae6*/      ldrb r1, [r5, r1]
/*0x6ae8*/      cbnz r1, jump_6af0
            jump_6aea:
/*0x6aea*/      .short 0x1e40 /* subs r0, r0, #1 */
/*0x6aec*/      uxtb r0, r0
/*0x6aee*/      bhs jump_6ae2
            jump_6af0:
/*0x6af0*/      cmp r0, #0xff
/*0x6af2*/      beq jump_6b04
/*0x6af4*/      cmp r4, #0
/*0x6af6*/      bne jump_6ada
            jump_6af8:
/*0x6af8*/      cmp r6, #0
/*0x6afa*/      beq jump_6b14
/*0x6afc*/      pop.w {r4, r5, r6, r7, r8, lr}
/*0x6b00*/      b.w jump_6aac
            jump_6b04:
/*0x6b04*/      .short 0x1e64 /* subs r4, r4, #1 */
/*0x6b06*/      ands r4, r4, #0xff
/*0x6b0a*/      beq jump_6af8
/*0x6b0c*/      mov r0, r7
/*0x6b0e*/      bl sleep
/*0x6b12*/      b jump_6ada
            jump_6b14:
/*0x6b14*/      pop.w {r4, r5, r6, r7, r8, pc}

            data_6b18:
/*0x6b18*/  .word 0x200000b2


            .thumb_func
            gpio_config_key_groups:
/*0x6b1c*/      push.w {r4, r5, r6, r7, r8, sb, sl, lr}
/*0x6b20*/      movs r1, #1         ; r1 = 1 (enable)
/*0x6b22*/      mov.w r0, #0xf0000  ; r0 = 0xf0000 (Enable GPIO clocks)
/*0x6b26*/      bl ckcu_set_AHBCCR
/*0x6b2a*/      ldr r5, [pc, #0x150] /* r5 = GPIOC_BASE_6c7c */
/*0x6b2c*/      mov.w r4, #0x200    ; r4 = 0x200
/*0x6b30*/      movs r2, #0         ; r2 = 0 (pull up)
/*0x6b32*/      mov r1, r4          ; r1 = 0x200 (pin 9)
/*0x6b34*/      mov r0, r5          ; r0 = GPIOC_BASE
                ; set GPIOC9/KEY_A1 as pull up
/*0x6b36*/      bl gpio_set_pin_pull_up_down_disable
/*0x6b3a*/      ldr r6, [pc, #0x144] /* r6 = GPIOA_BASE_6c80 */
/*0x6b3c*/      movs r2, #0         ; r2 = 0 (pull up)
/*0x6b3e*/      movs r1, #0x20      ; r1 = 0x20 (pin 5)
/*0x6b40*/      mov r0, r6          ; r0 = GPIOA_BASE
                ; set GPIOA5/KEY_A2 as pull up
/*0x6b42*/      bl gpio_set_pin_pull_up_down_disable
/*0x6b46*/      movs r2, #0         ; r2 = 0 (pull up)
/*0x6b48*/      movs r1, #0x40      ; r1 = 0x40 (pin 6)
/*0x6b4a*/      mov r0, r6          ; r0 = GPIOA_BASE
                ; set GPIOA6/KEY_A3 as pull up
/*0x6b4c*/      bl gpio_set_pin_pull_up_down_disable
/*0x6b50*/      movs r2, #0         ; r2 = 0 (pull up)
/*0x6b52*/      movs r1, #0x80      ; r1 = 0x80 (pin 7)
/*0x6b54*/      mov r0, r6          ; r0 = GPIOA_BASE
                ; set GPIOA7/KEY_A4 as pull up
/*0x6b56*/      bl gpio_set_pin_pull_up_down_disable
/*0x6b5a*/      lsls r7, r4, #2     ; r7 = 0x800
/*0x6b5c*/      movs r2, #0         ; r2 = 0 (pull up)
/*0x6b5e*/      mov r1, r7          ; r1 = 0x800 (pin 11)
/*0x6b60*/      mov r0, r5          ; r0 = GPIOC_BASE
                ; set GPIOC11/KEY_A5 as pull up
/*0x6b62*/      bl gpio_set_pin_pull_up_down_disable
/*0x6b66*/      mov.w r8, #0x2000   ; r8 = 0x2000
/*0x6b6a*/      movs r2, #0         ; r2 = 0 (pull up)
/*0x6b6c*/      mov r1, r8          ; r1 = 0x2000 (pin 13)
/*0x6b6e*/      mov r0, r5          ; r0 = GPIOC_BASE
                ; set GPIOC13/KEY_A6 as pull up
/*0x6b70*/      bl gpio_set_pin_pull_up_down_disable
/*0x6b74*/      mov.w sb, #0x4000   ; sb = 0x4000
/*0x6b78*/      movs r2, #0         ; r2 = 0 (pull up)
/*0x6b7a*/      mov r1, sb          ; r1 = 0x4000 (pin 14)
/*0x6b7c*/      mov r0, r5          ; r0 = GPIOC_BASE
                ; set GPIOC14/KEY_A7 as pull up
/*0x6b7e*/      bl gpio_set_pin_pull_up_down_disable
/*0x6b82*/      mov.w sl, #0x8000   ; sl = 0x8000
/*0x6b86*/      movs r2, #0         ; r2 = 0 (pull up)
/*0x6b88*/      mov r1, sl          ; r1 = 0x8000 (pin 15)
/*0x6b8a*/      mov r0, r5          ; r0 = GPIOC_BASE
                ; set GPIOC15/KEY_A8 as pull up
/*0x6b8c*/      bl gpio_set_pin_pull_up_down_disable
/*0x6b90*/      movs r2, #1         ; r2 = 1
/*0x6b92*/      mov r1, r4          ; r1 = 0x200 (pin 9)
/*0x6b94*/      mov r0, r5          ; r0 = GPIOC_BASE
                ; enable input on GPIOC9/KEY_A1
/*0x6b96*/      bl gpio_set_pin_input_enable
/*0x6b9a*/      movs r2, #1         ; r2 = 1
/*0x6b9c*/      movs r1, #0x20      ; r1 = 0x20 (pin 5)
/*0x6b9e*/      mov r0, r6          ; r0 = GPIOA_BASE
                ; enable input on GPIOA5/KEY_A2
/*0x6ba0*/      bl gpio_set_pin_input_enable
/*0x6ba4*/      movs r2, #1         ; r2 = 1
/*0x6ba6*/      movs r1, #0x40      ; r1 = 0x40 (pin 6)
/*0x6ba8*/      mov r0, r6          ; r0 = GPIOA_BASE
                ; enable input on GPIOA6/KEY_A3
/*0x6baa*/      bl gpio_set_pin_input_enable
/*0x6bae*/      movs r2, #1         ; r2 = 1
/*0x6bb0*/      movs r1, #0x80      ; r1 = 0x80 (pin 7)
/*0x6bb2*/      mov r0, r6          ; r0 = GPIOA_BASE
                ; enable input on GPIOA6/KEY_A4
/*0x6bb4*/      bl gpio_set_pin_input_enable
/*0x6bb8*/      movs r2, #1         ; r2 = 1
/*0x6bba*/      mov r1, r7          ; r1 = 0x800 (pin 11)
/*0x6bbc*/      mov r0, r5          ; r0 = GPIOC_BASE
                ; enable input on GPIOC11/KEY_A5
/*0x6bbe*/      bl gpio_set_pin_input_enable
/*0x6bc2*/      movs r2, #1         ; r2 = 1
/*0x6bc4*/      mov r1, r8          ; r1 = 0x2000 (pin 13)
/*0x6bc6*/      mov r0, r5          ; r0 = GPIOC_BASE
                ; enable input on GPIOC13/KEY_A6
/*0x6bc8*/      bl gpio_set_pin_input_enable
/*0x6bcc*/      movs r2, #1         ; r2 = 1
/*0x6bce*/      mov r1, sb          ; r1 = 0x4000 (pin 14)
/*0x6bd0*/      mov r0, r5          ; r0 = GPIOC_BASE
                ; enable input on GPIOC14/KEY_A7
/*0x6bd2*/      bl gpio_set_pin_input_enable
/*0x6bd6*/      movs r2, #1         ; r2 = 1
/*0x6bd8*/      mov r1, sl          ; r1 = 0x8000 (pin 15)
/*0x6bda*/      mov r0, r5          ; r0 = GPIOC_BASE
                ; enable input on GPIOC15/KEY_A8
/*0x6bdc*/      bl gpio_set_pin_input_enable
/*0x6be0*/      movs r1, #2         ; r1 = 2 (PORTC)
/*0x6be2*/      movs r0, #9         ; r0 = 9 (EXTI9)
/*0x6be4*/      bl afio_set_exti_pin_mux
/*0x6be8*/      movs r1, #0         ; r1 = 0 (PORTA)
/*0x6bea*/      movs r0, #5         ; r0 = 5 (EXTI5)
/*0x6bec*/      bl afio_set_exti_pin_mux
/*0x6bf0*/      movs r1, #0         ; r1 = 0 (PORTA)
/*0x6bf2*/      movs r0, #6         ; r0 = 6 (EXTI6)
/*0x6bf4*/      bl afio_set_exti_pin_mux
/*0x6bf8*/      movs r1, #0         ; r1 = 0 (PORTA)
/*0x6bfa*/      movs r0, #7         ; r0 = 7 (EXTI7)
/*0x6bfc*/      bl afio_set_exti_pin_mux
/*0x6c00*/      movs r1, #2         ; r1 = 2 (PORTC)
/*0x6c02*/      movs r0, #0xb       ; r0 = 0xb (EXTI11)
/*0x6c04*/      bl afio_set_exti_pin_mux
/*0x6c08*/      movs r1, #2         ; r1 = 2 (PORTC)
/*0x6c0a*/      movs r0, #0xd       ; r0 = 0xd (EXTI13)
/*0x6c0c*/      bl afio_set_exti_pin_mux
/*0x6c10*/      movs r1, #2         ; r1 = 2 (PORTC)
/*0x6c12*/      movs r0, #0xe       ; r0 = 0xe (EXTI14)
/*0x6c14*/      bl afio_set_exti_pin_mux
/*0x6c18*/      movs r1, #2         ; r1 = 2 (PORTC)
/*0x6c1a*/      movs r0, #0xf       ; r0 = 0xf (EXTI15)
/*0x6c1c*/      bl afio_set_exti_pin_mux
/*0x6c20*/      ldr r7, [pc, #0x60] /* r7 = key_gpio_map */
/*0x6c22*/      movs r4, #0         ; r4 = 0
            jump_6c24:
/*0x6c24*/      add.w r1, r7, r4, lsl #3    ; r1 = key_gpio_map + (r4*8)
/*0x6c28*/      ldr r6, [r1]        ; r6 = *(r1) (gpio_base in map)
/*0x6c2a*/      ldrh r5, [r1, #4]   ; r5 = *(r1+4) (pin in map)
/*0x6c2c*/      mov r0, r6          ; (gpio_base) r0 = r6
/*0x6c2e*/      uxth r1, r5         ; (pin) r1 = r5
                ; set KEY_Bn pin
/*0x6c30*/      bl _gpio_set_reset_pin
/*0x6c34*/      uxth r1, r5         ; r1 = r5
/*0x6c36*/      mov r0, r6          ; r0 = r6
/*0x6c38*/      movs r2, #0         ; r2 = 0 (CMOS output)
                ; set KEY_Bn pin to CMOS type output (not open-drain)
/*0x6c3a*/      bl gpio_set_pin_open_drain
/*0x6c3e*/      uxth r1, r5         ; r1 = r5
/*0x6c40*/      mov r0, r6          ; r0 = r6
/*0x6c42*/      movs r2, #1         ; r2 = 1 (OUT)
                ; set KEY_Bn pin direction to OUT
/*0x6c44*/      bl gpio_set_pin_direction
                ; move to next pin in map...
/*0x6c48*/      .short 0x1c64 /* adds r4, r4, #1 */
/*0x6c4a*/      uxtb r4, r4
/*0x6c4c*/      cmp r4, #0xf
/*0x6c4e*/      blo jump_6c24       ; r4 < 15 ? jump_6c24 : continue
/*0x6c50*/      movs r2, #0xff      ; (value) r2 = 0xff
/*0x6c52*/      movs r1, #0xf       ; (len) r1 = 0xf
/*0x6c54*/      ldr r0, [pc, #0x30] /* (ptr) r0 = 0x20000094 */
                ; clear 0x20000094 to 0x200000a3 with 0xff's
/*0x6c56*/      bl _memset
/*0x6c5a*/      ldr r0, [pc, #0x2c] /* (ptr) r0 = 0x20000094 */
/*0x6c5c*/      movs r1, #0xf       ; r1 = 0xf
/*0x6c5e*/      adds r0, #0x1e      ; r0 = 0x200000b2
/*0x6c60*/      movs r3, #0         ; r3 = 0
/*0x6c62*/      movs r2, #0xff      ; r2 = 0xff
/*0x6c64*/      b jump_6c72
            jump_6c66:
/*0x6c66*/      strb r3, [r0], #1   ; *(r0++) = 0
/*0x6c6a*/      strb r2, [r0], #1   ; *(r0++) = 0xff
/*0x6c6e*/      strb r2, [r0], #1   ; *(r0++) = 0xff
            jump_6c72:
/*0x6c72*/      .short 0x1e49 /* subs r1, r1, #1 */
/*0x6c74*/      uxtb r1, r1         ; r1 = r1
/*0x6c76*/      bhs jump_6c66       ; r1 >= 0 ? jump_6c66 : continue
/*0x6c78*/      pop.w {r4, r5, r6, r7, r8, sb, sl, pc}

            GPIOC_BASE_6c7c:
/*0x6c7c*/  .word 0x400b4000
            GPIOA_BASE_6c80:
/*0x6c80*/  .word 0x400b0000
            data_6c84:
/*0x6c84*/  .word key_gpio_map
            data_6c88:
/*0x6c88*/  .word 0x20000094


            .thumb_func
            call_6c8c:
/*0x6c8c*/      ldr r1, [pc, #0x28] /* r1 = 0x20000094 */
/*0x6c8e*/      push {r4, lr}
/*0x6c90*/      add.w r0, r1, #0x1e ; r0 = 0x200000b2
/*0x6c94*/      movs r2, #0xf       ; r2 = 0xf
/*0x6c96*/      b jump_6cac
            jump_6c98:
/*0x6c98*/      ldrb r3, [r0]       ; r3 = *(uint8_t*)r0
/*0x6c9a*/      cbnz r3, jump_6ca4  ; r3 != 0 ? jump_6ca4 : continue
/*0x6c9c*/      ldrb r3, [r0, #2]   ; r3 = *(uint8_t*)(r0+2)
/*0x6c9e*/      ldrb r4, [r1]       ; r4 = *(uint8_t*)(r1)
/*0x6ca0*/      cmp r3, r4
/*0x6ca2*/      beq jump_6ca8       ; r3 == r4 ? jump_6ca8 : continue
            jump_6ca4:
/*0x6ca4*/      movs r0, #0         ; r0 = 0
/*0x6ca6*/      pop {r4, pc}        ; return 0
            jump_6ca8:
/*0x6ca8*/      .short 0x1cc0 /* adds r0, r0, #3 */
/*0x6caa*/      .short 0x1c49 /* adds r1, r1, #1 */
            jump_6cac:
/*0x6cac*/      .short 0x1e52 /* subs r2, r2, #1 */
/*0x6cae*/      uxtb r2, r2         ; r2 = r2
/*0x6cb0*/      bhs jump_6c98       ; r2 >= 0 ? jump_6c98 : continue
/*0x6cb2*/      movs r0, #1         ; r0 = 1
/*0x6cb4*/      pop {r4, pc}        ; return 1

/*0x6cb6*/  .byte 0x00
/*0x6cb7*/  .byte 0x00

            data_6cb8:
/*0x6cb8*/  .word 0x20000094


            .thumb_func
            gpio_set_reset_key_groups:
/*0x6cbc*/      push.w {r4, r5, r6, r7, r8, lr}
/*0x6cc0*/      movs r4, #0xf       ; r4 (num_key_groups) = 0xf
/*0x6cc2*/      cbz r0, jump_6cca   ; arg1 == 0 ? jump_6cca (set) : continue (reset)
/*0x6cc4*/      movs r7, #0         ; r7 = 0
            jump_6cc6:
/*0x6cc6*/      ldr r6, [pc, #0x2c] /* r6 = key_gpio_map */
/*0x6cc8*/      b jump_6cea
            jump_6cca:
/*0x6cca*/      movs r7, #1         ; r7 = 1
/*0x6ccc*/      b jump_6cc6
            jump_6cce:
/*0x6cce*/      add.w r5, r6, r4, lsl #3    ; r5 = key_gpio_map + (r4*8)
/*0x6cd2*/      mov r2, r7                  ; r2 (set) = r7 (1 or 0)
/*0x6cd4*/      ldrh r0, [r5, #4]           ; r0 = (uint16_t)*(r5+4) ; pin
/*0x6cd6*/      uxth r1, r0                 ; r1 (pin) = r0
/*0x6cd8*/      ldr r0, [r5]                ; r0 (gpio_base) = *(r5) ; gpio_base
/*0x6cda*/      bl gpio_set_reset_pin
/*0x6cde*/      ldrh r0, [r5, #4]           ; r0 = (uint16_t)*(r5+4)
/*0x6ce0*/      movs r2, #1                 ; r2 (out) = 1
/*0x6ce2*/      uxth r1, r0                 ; r1 (pin) = r0
/*0x6ce4*/      ldr r0, [r5]                ; r0 (gpio_base) = *(r5)
/*0x6ce6*/      bl gpio_set_pin_direction
            jump_6cea:
/*0x6cea*/      .short 0x1e64 /* subs r4, r4, #1 */ ; r4 = r4 - 1
/*0x6cec*/      uxtb r4, r4         ; r4 = r4
/*0x6cee*/      bhs jump_6cce       ; r4 >= 0 ? jump_6cce : return
/*0x6cf0*/      pop.w {r4, r5, r6, r7, r8, pc}

            data_6cf4:
/*0x6cf4*/  .word key_gpio_map


            .thumb_func
            mbia_init:
/*0x6cf8*/      push {r3, r4, r5, r6, r7, lr}
/*0x6cfa*/      movs r1, #1             ; r1 = 1
/*0x6cfc*/      lsls r0, r1, #0x11      ; r0 = 0x20000
                ; enable BFTM1 clock
/*0x6cfe*/      bl call_ckcu_set_APBCCR1
/*0x6d02*/      movw r1, #0xea60        ; r1 = 0xea60
/*0x6d06*/      ldr r0, [pc, #0xbc] /* r0 = BFTM1_BASE_6dc4 */
/*0x6d08*/      bl bftm_set_compare_value
/*0x6d0c*/      movs r1, #1             ; r1 = 1
/*0x6d0e*/      mov.w r0, #0x70000      ; 0x70000
                ; enable clocks for GPIO Ports A, B, and C
/*0x6d12*/      bl ckcu_set_AHBCCR
/*0x6d16*/      ldr r4, [pc, #0xb0] /* r4 = GPIOC_BASE_6dc8 */
/*0x6d18*/      movs r1, #2         ; r1 = 2
/*0x6d1a*/      mov r0, r4          ; r0 = GPIOC_BASE
                ; set PC1/MBIAPWRCTL
/*0x6d1c*/      bl _gpio_set_reset_pin
/*0x6d20*/      movs r2, #0         ; r2 = 0
/*0x6d22*/      movs r1, #2         ; r1 = 2
/*0x6d24*/      mov r0, r4          ; r0 = GPIOC_BASE
                ; set PC1/MBIAPWRCTL output type to CMOS output
/*0x6d26*/      bl gpio_set_pin_open_drain
/*0x6d2a*/      movs r2, #1         ; r2 = 1
/*0x6d2c*/      movs r1, #2         ; r1 = 2
/*0x6d2e*/      mov r0, r4          ; r0 = GPIOC_BASE
                ; set PC1/MBIAPWRCTL direction to output
/*0x6d30*/      bl gpio_set_pin_direction
/*0x6d34*/      movs r1, #4         ; r1 = 4
/*0x6d36*/      mov r0, r4          ; r0 = GPIOC_BASE
                ; set PC2/MBIA_SDI
/*0x6d38*/      bl _gpio_set_reset_pin
/*0x6d3c*/      ldr r6, [pc, #0x8c] /* r6 = GPIOA_BASE_6dcc */
/*0x6d3e*/      mov.w r5, #0x4000   ; r5 = 0x4000
/*0x6d42*/      mov r1, r5          ; r1 = 0x4000
/*0x6d44*/      mov r0, r6          ; r0 = GPIOA_BASE
                ; set PA14/MBIA_DCLK
/*0x6d46*/      bl _gpio_set_reset_pin
/*0x6d4a*/      lsls r7, r5, #1     ; r7 = 0x8000
/*0x6d4c*/      mov r1, r7          ; r1 = 0x8000
/*0x6d4e*/      mov r0, r6          ; r0 = GPIOA_BASE
                ; set PA15/MBIA_LE
/*0x6d50*/      bl _gpio_set_reset_pin
/*0x6d54*/      movs r2, #0         ; r2 = 0
/*0x6d56*/      movs r1, #4         ; r1 = 4
/*0x6d58*/      mov r0, r4          ; r0 = GPIOC_BASE
                ; set PC2/MBIA_SDI output type to CMOS output
/*0x6d5a*/      bl gpio_set_pin_open_drain
/*0x6d5e*/      movs r2, #0         ; r2 = 0
/*0x6d60*/      mov r1, r5          ; r1 = 0x4000
/*0x6d62*/      mov r0, r6          ; r0 = GPIOA_BASE
                ; set PA14/MBIA_DCLK output type to CMOS output
/*0x6d64*/      bl gpio_set_pin_open_drain
/*0x6d68*/      movs r2, #0         ; r2 = 0
/*0x6d6a*/      mov r1, r7          ; r1 = 0x8000
/*0x6d6c*/      mov r0, r6          ; r0 = GPIOA_BASE
                ; set PA15/MBIA_LE output type to CMOS output
/*0x6d6e*/      bl gpio_set_pin_open_drain
/*0x6d72*/      movs r2, #1         ; r2 = 1
/*0x6d74*/      movs r1, #4         ; r1 = 4
/*0x6d76*/      mov r0, r4          ; r0 = GPIOC_BASE
                ; set PC2/MBIA_SDI direction to output
/*0x6d78*/      bl gpio_set_pin_direction
/*0x6d7c*/      movs r2, #1         ; r2 = 1
/*0x6d7e*/      mov r1, r5          ; r1 = 0x4000
/*0x6d80*/      mov r0, r6          ; r0 = GPIOA_BASE
                ; set PA14/MBIA_DCLK direction to output
/*0x6d82*/      bl gpio_set_pin_direction
/*0x6d86*/      movs r2, #1         ; r2 = 1
/*0x6d88*/      mov r1, r7          ; r1 = 0x8000
/*0x6d8a*/      mov r0, r6          ; r0 = GPIOA_BASE
                ; set PA15/MBIA_LE direction to output
/*0x6d8c*/      bl gpio_set_pin_direction
/*0x6d90*/      movs r2, #1         ; r2 = 1
/*0x6d92*/      mov r1, r2          ; r1 = 1
/*0x6d94*/      ldr r0, [pc, #0x38] /* r0 = GPIOB_BASE_6dd0 */
                ; enable input on PB0/MBIA_SDO
/*0x6d96*/      bl gpio_set_pin_input_enable
                ; enable GPIO Port C clock
/*0x6d9a*/      bl mbia_enable_gpio_port_c_clk
/*0x6d9e*/      movs r0, #4         ; r0 = 4
                ; set CLK_REF prescaler to CK_PLL/10
/*0x6da0*/      bl ckcu_set_ref_clk_prescaler
/*0x6da4*/      movs r0, #0         ; r0 = 0
/*0x6da6*/      strb.w r0, [sp]     ; *(sp) = 0
/*0x6daa*/      mov r0, sp          ; r0 = sp
                ; set CK_REF as CKOUT source
/*0x6dac*/      bl ckcu_set_CKOUT_source
/*0x6db0*/      movs r1, #1         ; r1 = 1
/*0x6db2*/      lsls r0, r1, #0xb   ; r0 = 0x800
                ; enable CK_REF clock
/*0x6db4*/      bl ckcu_set_AHBCCR
/*0x6db8*/      bl mbia_init_gclk
/*0x6dbc*/      pop.w {r3, r4, r5, r6, r7, lr}
/*0x6dc0*/      b.w jump_9078

            BFTM1_BASE_6dc4:
/*0x6dc4*/  .word 0x40077000
            GPIOC_BASE_6dc8:
/*0x6dc8*/  .word 0x400b4000
            GPIOA_BASE_6dcc:
/*0x6dcc*/  .word 0x400b0000
            GPIOB_BASE_6dd0:
/*0x6dd0*/  .word 0x400b2000


            .thumb_func
            call_6dd4:
/*0x6dd4*/      push.w {r0, r4, r5, r6, r7, r8, sb, sl, fp, lr}
/*0x6dd8*/      ldr r7, [pc, #0x104] /* r7 = BFTM1_BASE_6ee0 */
/*0x6dda*/      ldr.w sl, [pc, #0x108] /* sl = NVIC.ICTR_6ee4 */
/*0x6dde*/      ldr r4, [pc, #0x108] /* r4 = GPIOC_BASE_6ee8 */
/*0x6de0*/      ldr r5, [pc, #0x108] /* r5 = GPIOA_BASE_6eec */
/*0x6de2*/      ldr r0, [sp]        ; r0 = *(sp) = arg1
/*0x6de4*/      mov.w sb, #0x400    ; sb = 0x400
/*0x6de8*/      mov.w fp, #2        ; fp = 2
/*0x6dec*/      mov.w r6, #0x4000   ; r6 = 0x4000
/*0x6df0*/      mov.w r8, #0x8000   ; r8 = 0x8000
/*0x6df4*/      cbz r0, jump_6e40   ; arg1 == 0 ? jump_6e40 : continue
/*0x6df6*/      movs r1, #0         ; r1 = 0
/*0x6df8*/      mov r0, r7          ; r0 = BFTM1_BASE
                ; disable compare match
/*0x6dfa*/      bl bftm_enable_compare_match
/*0x6dfe*/      movs r1, #0         ; r1 = 0
/*0x6e00*/      mov r0, r7          ; r0 = BFTM1_BASE
                ; disable counter
/*0x6e02*/      bl bftm_enable_counter
/*0x6e06*/      mov r0, r7          ; r0 = BFTM1_BASE
                ; clear compare match interrupt
/*0x6e08*/      bl bftm_clear_compare_match_interrupt
                ; disable interrupt 42
/*0x6e0c*/      str.w sb, [sl, #0x180]
/*0x6e10*/      movs r1, #0         ; r1 = 0
/*0x6e12*/      ldr r0, [pc, #0xdc] /* r0 = GPTM1_BASE_6ef0 */
                ; disable GPTM1 timer
/*0x6e14*/      bl TM_Cmd
/*0x6e18*/      str.w fp, [r4, #0x24] ; *(GPIOC.PCSRR) = 2
/*0x6e1c*/      bl gpio_config_led_groups
/*0x6e20*/      movs r2, #1         ; r2 = 1
/*0x6e22*/      movs r1, #4         ; r1 = 4
/*0x6e24*/      mov r0, r4          ; r0 = GPIOC_BASE
                ; set PC2/MBIA_SDI to open drain
/*0x6e26*/      bl gpio_set_pin_open_drain
/*0x6e2a*/      movs r2, #1         ; r2 = 1
/*0x6e2c*/      mov r1, r6          ; r1 = 0x4000
/*0x6e2e*/      mov r0, r5          ; r0 = GPIOA_BASE
                ; set PA14/MBIA_DCLK to open drain
/*0x6e30*/      bl gpio_set_pin_open_drain
/*0x6e34*/      movs r2, #1         ; r2 = 1
/*0x6e36*/      mov r1, r8          ; r1 = 0x8000
/*0x6e38*/      mov r0, r5          ; r0 = GPIOA_BASE
                ; set PA15/MBIA_LE to open drain
/*0x6e3a*/      bl gpio_set_pin_open_drain
                ; disable MBIA_GCLK
/*0x6e3e*/      b jump_6ed6
            jump_6e40:
/*0x6e40*/      bl gpio_config_led_groups
/*0x6e44*/      movs r1, #4         ; r1 = 4
/*0x6e46*/      ldr r0, [pc, #0xa0] /* r0 = GPIOC_BASE_6ee8 */
                ; set PC2/MBIA_SDI pin
/*0x6e48*/      bl _gpio_set_reset_pin
/*0x6e4c*/      mov r1, r6          ; r1 = 0x4000
/*0x6e4e*/      mov r0, r5          ; r0 = GPIOA_BASE
                ; set PA14/MBIA_DCLK pin
/*0x6e50*/      bl _gpio_set_reset_pin
/*0x6e54*/      mov r4, r8          ; r4 = 0x8000
/*0x6e56*/      mov r1, r8          ; r1 = 0x8000
/*0x6e58*/      mov r0, r5          ; r0 = GPIOA_BASE
                ; set PA15/MBIA_DCLK pin
/*0x6e5a*/      bl _gpio_set_reset_pin
/*0x6e5e*/      movs r2, #0         ; r2 = 0
/*0x6e60*/      movs r1, #4         ; r1 = 4
/*0x6e62*/      ldr r0, [pc, #0x84] /* r0 = GPIOC_BASE_6ee8 */
                ; CMOS output type on PC2/MBIA_SDI
/*0x6e64*/      bl gpio_set_pin_open_drain
/*0x6e68*/      movs r2, #0         ; r2 = 0
/*0x6e6a*/      mov r1, r6          ; r1 = 0x4000
/*0x6e6c*/      mov r0, r5          ; r0 = GPIOA_BASE
                ; CMOS output type on PA14/MBIA_DCLK
/*0x6e6e*/      bl gpio_set_pin_open_drain
/*0x6e72*/      movs r2, #0         ; r2 = 0
/*0x6e74*/      mov r1, r4          ; r1 = 0x8000
/*0x6e76*/      mov r0, r5          ; r0 = GPIOA_BASE
                ; CMOS output type on PA15/MBIA_LE
/*0x6e78*/      bl gpio_set_pin_open_drain
/*0x6e7c*/      movw r0, #0x2710    ; r0 = 0x2710
/*0x6e80*/      bl sleep
/*0x6e84*/      ldr r1, [pc, #0x60] /* r1 = GPIOC_BASE_6ee8 */
/*0x6e86*/      str.w fp, [r1, #0x28] ; *(GPIOC.PARR) = 2
/*0x6e8a*/      mov.w r1, #0x300    ; r1 = 0x300
/*0x6e8e*/      ldr r0, [pc, #0x64] /* r0 = 0x20000248 */
                ; clear 0x300 bytes starting at 0x20000248
/*0x6e90*/      bl _memzero
/*0x6e94*/      ldr r1, [pc, #0x60] /* r1 = 0x20000016 */
/*0x6e96*/      movs r0, #0         ; r0 = 0
/*0x6e98*/      strb r0, [r1, #1]   ; *(uint8_t*)0x20000017 = 0
/*0x6e9a*/      movs r0, #0x64      ; r0 = 0x64
/*0x6e9c*/      bl sleep
/*0x6ea0*/      bl call_6f50
/*0x6ea4*/      movs r0, #2
                ; Overall latch instruction
/*0x6ea6*/      bl mbia_send_instruction
/*0x6eaa*/      str r4, [r5, #0x24]
/*0x6eac*/      movs r1, #1
/*0x6eae*/      ldr r0, [pc, #0x40] /* GPTM1_BASE_6ef0 */
/*0x6eb0*/      bl TM_Cmd
/*0x6eb4*/      movs r1, #0
/*0x6eb6*/      mov r0, r7
/*0x6eb8*/      bl bftm_set_counter
/*0x6ebc*/      mov r0, r7
/*0x6ebe*/      bl bftm_clear_compare_match_interrupt
/*0x6ec2*/      movs r1, #1
/*0x6ec4*/      mov r0, r7
/*0x6ec6*/      bl bftm_enable_counter
/*0x6eca*/      movs r1, #1
/*0x6ecc*/      mov r0, r7
/*0x6ece*/      bl bftm_enable_compare_match
/*0x6ed2*/      str.w sb, [sl, #0x100]
            jump_6ed6:
/*0x6ed6*/      ldr r0, [sp]
/*0x6ed8*/      pop.w {r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
/*0x6edc*/      b.w mbia_gclk_disable

            BFTM1_BASE_6ee0:
/*0x6ee0*/  .word 0x40077000
            NVIC.ICTR_6ee4:
/*0x6ee4*/  .word 0xe000e004
            GPIOC_BASE_6ee8:
/*0x6ee8*/  .word 0x400b4000
            GPIOA_BASE_6eec:
/*0x6eec*/  .word 0x400b0000
            GPTM1_BASE_6ef0:
/*0x6ef0*/  .word 0x4006f000
            data_6ef4:
/*0x6ef4*/  .word 0x20000248
            data_6ef8:
/*0x6ef8*/  .word 0x20000016


            .thumb_func
            call_6efc:
/*0x6efc*/      push {r4, r5, lr}
/*0x6efe*/      movs r0, #0x12      ; r0 = 18
/*0x6f00*/      bl mbia_send_instruction
/*0x6f04*/      mov.w r4, #0x300    ; r4 = 0x300
/*0x6f08*/      movs r1, #0xa       ; r1 = 0xa
/*0x6f0a*/      mov r0, r4          ; r0 = 0x300
/*0x6f0c*/      bl mbia_shift_data
/*0x6f10*/      movs r1, #0xa       ; r1 = 0xa
/*0x6f12*/      mov r0, r4          ; r0 = 0x300
/*0x6f14*/      bl mbia_shift_data
/*0x6f18*/      movs r1, #2         ; r1 = 0x2
/*0x6f1a*/      movs r0, #0         ; r0 = 0
/*0x6f1c*/      bl mbia_shift_data
/*0x6f20*/      ldr r4, [pc, #0x24] /* r4 = GPIOA_BASE_6f48 */
/*0x6f22*/      mov.w r0, #0x4000   ; r0 = 0x4000
                ; reset PA14/MBIA_DCLK
/*0x6f26*/      str r0, [r4, #0x28] ; *(GPIOA.PARR) = 0x4000
/*0x6f28*/      lsls r5, r0, #1     ; r5 = 0x8000
                ; set PA15/MBIA_LE
/*0x6f2a*/      str r5, [r4, #0x24] ; *(GPIOA.PASRR) = 0x8000
/*0x6f2c*/      movs r1, #8         ; r1 = 8
/*0x6f2e*/      mov.w r0, #0xc00    ; r0 = 0xc00
/*0x6f32*/      bl mbia_shift_data
/*0x6f36*/      ldr r1, [pc, #0x14] /* r1 = GPIOC_BASE_6f4c */
/*0x6f38*/      movs r0, #4         ; r0 = 4
                ; reset PC2/MBIA_SDI
/*0x6f3a*/      str r0, [r1, #0x24] ; *(GPIOC.PCSRR) = 4
                ; reset PA15/MBIA_LE
/*0x6f3c*/      str r5, [r4, #0x28] ; *(GPIOA.PARR) = 0x8000
/*0x6f3e*/      nop
/*0x6f40*/      nop
                ; set PA15/MBIA_LE
/*0x6f42*/      str r5, [r4, #0x24]
/*0x6f44*/      pop {r4, r5, pc}

/*0x6f46*/  .byte 0x00
/*0x6f47*/  .byte 0x00

            GPIOA_BASE_6f48:
/*0x6f48*/  .word 0x400b0000
            GPIOC_BASE_6f4c:
/*0x6f4c*/  .word 0x400b4000


            .thumb_func
            call_6f50:
/*0x6f50*/      push.w {r4, r5, r6, r7, r8, sb, sl, fp, lr}
/*0x6f54*/      ldr r1, [pc, #0x80] /* r1 = 0x20000016 */
/*0x6f56*/      ldr r2, [pc, #0x84] /* r2 = 0x20000248 */
/*0x6f58*/      movs r5, #0x10      ; r5 = 0x10
                ; get Qn from 0x20000017
/*0x6f5a*/      ldrb r0, [r1, #1]   ; (Qn) r0 = *(uint8_t*)0x20000017
/*0x6f5c*/      movs r7, #4         ; r7 = 4
/*0x6f5e*/      add.w r0, r0, r0, lsl #1 ; r0 = Qn*3
/*0x6f62*/      add.w r4, r2, r0, lsl #5 ; r4 = 0x20000248 + (Qn*0x60)
/*0x6f66*/      ldrb r0, [r1]       ; r0 = *(uint8_t*)0x20000016
/*0x6f68*/      ldr.w sl, [pc, #0x74] /* sl = GPIOC_BASE_6fe0 */
/*0x6f6c*/      ldr r6, [pc, #0x74] /* r6 = GPIOA_BASE_6fe4 */
/*0x6f6e*/      mov.w fp, #0x4000   ; fp = 0x4000
/*0x6f72*/      adds r4, #0x5e      ; r4 = r4 + 0x5e
/*0x6f74*/      cbz r0, jump_6f84   ; r0 == 0 ? jump_6f84 : continue
/*0x6f76*/      .short 0x1e40 /* subs r0, r0, #1 */ ; r0 = r0 - 1
/*0x6f78*/      ands r0, r0, #0xff  ; r0 = r0 & 0xff
/*0x6f7c*/      strb r0, [r1]       ; *(uint8_t*)0x20000016 = r0
/*0x6f7e*/      bne jump_6f84       ; r0 != 0 ? jump_6f84 : continue
/*0x6f80*/      bl call_6efc
            jump_6f84:
/*0x6f84*/      mov sb, r7          ; sb = 4
            jump_6f86:
/*0x6f86*/      .short 0x1e6d /* subs r5, r5, #1 */ ; r5 = r5 - 1
/*0x6f88*/      uxtb r5, r5
/*0x6f8a*/      blo jump_6fd0       ; r5 < 0 ? jump_6fd0 : continue
/*0x6f8c*/      mov.w r8, #0x8000   ; r8 = 0x8000
                ; reset PA15/MBIA_LE
/*0x6f90*/      str.w r8, [r6, #0x28] ; *(GPIOA.PARR) = 0x8000
/*0x6f94*/      ldrh r0, [r4]       ; r0 = *(uint16_t*)r4
/*0x6f96*/      subs r7, r4, #2     ; r7 = r4 - 2
/*0x6f98*/      movs r1, #0xa       ; r1 = 0xa
/*0x6f9a*/      bl mbia_shift_data
/*0x6f9e*/      ldrh r0, [r7]       ; r0 = *(uint16_t*)r7
/*0x6fa0*/      movs r1, #0xa       ; r1 = 0xa
/*0x6fa2*/      bl mbia_shift_data
/*0x6fa6*/      ldrh r0, [r4, #-0x4] ; r0 = *(uint16_t*)(r4-0x4)
/*0x6faa*/      movs r1, #9         ; r1 = 9
/*0x6fac*/      ubfx r7, r0, #6, #1 ; r7 = r0[6]
/*0x6fb0*/      .short 0x1fa4 /* subs r4, r4, #6 */ ; r4 = r4 - 6
/*0x6fb2*/      bl mbia_shift_data
/*0x6fb6*/      mov r1, fp          ; r1 = 0x4000
                ; reset PA14/MBIA_DCLK
/*0x6fb8*/      str.w fp, [r6, #0x28] ; *(GPIOA.PARR) = 0x4000
                ; set PA15/MBIA_DCLK
/*0x6fbc*/      str.w r8, [r6, #0x24] ; *(GPIOA.PASRR) = 0x8000
/*0x6fc0*/      mov r0, sb          ; r0 = 4
/*0x6fc2*/      mov r2, sl          ; r2 = GPIOC_BASE
/*0x6fc4*/      cbz r7, jump_6fca   ; r7 == 0 ?jump_6fca : continue
                ; set PC2/MBIA_SDI
/*0x6fc6*/      str r0, [r2, #0x24] ; *(GPIOC.PCSRR) = 4
/*0x6fc8*/      b jump_6fcc
            jump_6fca:
                ; reset PC2/MBIA_SDI
/*0x6fca*/      str r0, [r2, #0x28] ; *(GPIOC.PCRR) = 4
            jump_6fcc:
                ; set PA14/MBIA_DCLK
/*0x6fcc*/      str r1, [r6, #0x24] ; *(GPIOA.PASRR) = 0x4000
/*0x6fce*/      b jump_6f86
            jump_6fd0:
                ; set PC2/MBIA_SDI
/*0x6fd0*/      str.w sb, [sl, #0x24]   ; *(GPIOC.PCSRR) = 4
/*0x6fd4*/      pop.w {r4, r5, r6, r7, r8, sb, sl, fp, pc}

            data_6fd8:
/*0x6fd8*/  .word 0x20000016
            data_6fdc:
/*0x6fdc*/  .word 0x20000248
            GPIOC_BASE_6fe0:
/*0x6fe0*/  .word 0x400b4000
            GPIOA_BASE_6fe4:
/*0x6fe4*/  .word 0x400b0000


            .thumb_func
            gpio_get_key_A_data:
/*0x6fe8*/      ldr r1, [pc, #0x54] /* r1 = GPIOC_BASE_7040 */
/*0x6fea*/      movs r0, #0         ; r0 = 0
/*0x6fec*/      ldr r2, [r1, #0x1c] ; r2 = *(GPIOC.PCDINR)
/*0x6fee*/      lsls r2, r2, #0x16  ; r2 = r2 << 0x16
                ; continue if PC9/KEY_A1 == 1; jump otherwise
/*0x6ff0*/      bpl jump_6ff4       ; r2 >= 0 ? jump_6ff4 : continue
/*0x6ff2*/      movs r0, #1         ; r0 = 1
            jump_6ff4:
/*0x6ff4*/      ldr r2, [pc, #0x4c] /* r2 = GPIOA_BASE_7044 */
/*0x6ff6*/      ldr r3, [r2, #0x1c] ; r3 = *(GPIOA.PADINR)
/*0x6ff8*/      lsls r3, r3, #0x1a  ; r3 = r3 << 0x1a
                ; continue if PA5/KEY_A2 == 1; jump otherwise
/*0x6ffa*/      bpl jump_7000       ; r3 >= 0 ? jump_7000 : continue
/*0x6ffc*/      orr r0, r0, #2      ; r0 = r0 | 2
            jump_7000:
/*0x7000*/      ldr r3, [r2, #0x1c] ; r3 = *(GPIOA.PADINR)
/*0x7002*/      lsls r3, r3, #0x19  ; r3 = r3 << 0x19
                ; continue if PA6/KEY_A3 == 1; jump otherwise
/*0x7004*/      bpl jump_700a       ; r3 >= 0 ? jump_700a : continue
/*0x7006*/      orr r0, r0, #4      ; r0 = r0 | 4
            jump_700a:
/*0x700a*/      ldr r2, [r2, #0x1c] ; r2 = *(GPIOA.PADINR)
/*0x700c*/      lsls r2, r2, #0x18  ; r2 = r2 << 0x18
                ; continue if PA7/KEY_A4 == 1; jump otherwise
/*0x700e*/      bpl jump_7014       ; r2 >= 0 ? jump_7014 : continue
/*0x7010*/      orr r0, r0, #8      ; r0 = r0 | 8
            jump_7014:
/*0x7014*/      ldr r2, [r1, #0x1c] ; r2 = *(GPIOC.PCDINR)
/*0x7016*/      lsls r2, r2, #0x14  ; r2 = r2 << 0x14
                ; continue if PC11/KEY_A5 == 1; jump otherwise
/*0x7018*/      bpl jump_701e       ; r2 >= 0 ? jump_701e : continue
/*0x701a*/      orr r0, r0, #0x10   ; r0 = r0 | 0x10
            jump_701e:
/*0x701e*/      ldr r2, [r1, #0x1c] ; r2 = *(GPIOC.PCDINR)
/*0x7020*/      lsls r2, r2, #0x12  ; r2 = r2 << 0x12
                ; continue if PC13/KEY_A6 == 1; jump otherwise
/*0x7022*/      bpl jump_7028       ; r2 >= 0 ? jump_7028 : continue
/*0x7024*/      orr r0, r0, #0x20   ; r0 = r0 | 0x20
            jump_7028:
/*0x7028*/      ldr r2, [r1, #0x1c] ; r2 = *(GPIOC.PCDINR)
/*0x702a*/      lsls r2, r2, #0x11  ; r2 = r2 << 0x11
                ; continue if PC14/KEY_A7 == 1; jump otherwise
/*0x702c*/      bpl jump_7032       ; r2 >= 0 ? jump_7032 : continue
/*0x702e*/      orr r0, r0, #0x40   ; r0 = r0 | 0x40
            jump_7032:
/*0x7032*/      ldr r1, [r1, #0x1c] ; r1 = *(GPIOC.PCDINR)
/*0x7034*/      lsls r1, r1, #0x10  ; r1 = r1 << 0x10
                ; continue if PC15/KEY_A8 == 1; jump otherwise
/*0x7036*/      bpl jump_703c       ; r1 >= 0 ? jump_703c : continue
/*0x7038*/      orr r0, r0, #0x80   ; r0 = r0 | 0x80
            jump_703c:
/*0x703c*/      bx lr               ; return r0

/*0x703e*/  .byte 0x00
/*0x703f*/  .byte 0x00

            GPIOC_BASE_7040:
/*0x7040*/  .word 0x400b4000
            GPIOA_BASE_7044:
/*0x7044*/  .word 0x400b0000


            .thumb_func
            gpio_config_led_groups:
/*0x7048*/      push {r4, r5, r6, lr}
/*0x704a*/      ldr r4, [pc, #0x34] /* r4 = led_gpio_map */
/*0x704c*/      movs r5, #8         ; r5 = 8
/*0x704e*/      b jump_7076
            jump_7050:
                ; get pin from led gpio map
/*0x7050*/      ldrh r0, [r4, #4]   ; r0 = *(uint16_t*)(r4+4)
/*0x7052*/      movs r2, #0         ; r2 = 0 (IN)
/*0x7054*/      uxth r1, r0         ; (pin) r1 = r0
                ; get gpio base of pin from led gpio map
/*0x7056*/      ldr r0, [r4]        ; (gpio_base) r0 = *r4
                ; set pin direction to input
/*0x7058*/      bl gpio_set_pin_direction
/*0x705c*/      ldrh r0, [r4, #4]   ; r0 = *(uint16_t*)(r4+4)
/*0x705e*/      movs r2, #1         ; r2 = 1
/*0x7060*/      uxth r1, r0         ; r1 = r0
/*0x7062*/      ldr r0, [r4]        ; r0 = *r4
                ; enable input enable on pin
/*0x7064*/      bl gpio_set_pin_input_enable
/*0x7068*/      ldrh r0, [r4, #4]   ; r0 = *(uint16_t)(r4+4)
/*0x706a*/      movs r2, #2         ; r2 = 2
/*0x706c*/      uxth r1, r0         ; r1 = r0
/*0x706e*/      ldr r0, [r4]        ; r0 = *r4
                ; disable pull register on pin
/*0x7070*/      bl gpio_set_pin_pull_up_down_disable
                ; move to next pin in led gpio map
/*0x7074*/      adds r4, #8         ; r4 = r4 + 8
            jump_7076:
/*0x7076*/      .short 0x1e6d /* subs r5, r5, #1 */
/*0x7078*/      uxtb r5, r5
/*0x707a*/      bhs jump_7050       ; r5 >= 0 ? jump_7050 : continue
/*0x707c*/      pop {r4, r5, r6, pc}

/*0x707e*/  .byte 0x00
/*0x707f*/  .byte 0x00

            data_7080:
/*0x7080*/  .word led_gpio_map


            .thumb_func
            spi_enable:
/*0x7084*/      cmp r1, #0
/*0x7086*/      ldr r1, [r0]    ; r1 = *(arg1)
/*0x7088*/      beq jump_7090   ; arg2 == 0 ? jump_7090 : continue
/*0x708a*/      orr r1, r1, #1  ; r1 = r1 | 1
/*0x708e*/      b jump_7094
            jump_7090:
/*0x7090*/      bic r1, r1, #1  ; r1 = r1 & ~1
            jump_7094:
/*0x7094*/      str r1, [r0]    ; *(arg1) = r1
/*0x7096*/      bx lr

            .thumb_func
            spi_config:
/*0x7098*/      push {r4, r5, lr}
/*0x709a*/      ldrd r4, r3, [r1, #0x14]
/*0x709e*/      cbz r4, jump_70da
/*0x70a0*/      mov.w r2, #0x200
/*0x70a4*/      lsrs r2, r3
/*0x70a6*/      orrs r2, r4
            jump_70a8:
/*0x70a8*/      ldr r4, [r1, #8]
/*0x70aa*/      ldr r3, [r1]
/*0x70ac*/      orrs r3, r4
/*0x70ae*/      ldrd r4, r5, [r1, #0xc]
/*0x70b2*/      orrs r4, r5
/*0x70b4*/      orrs r3, r4
/*0x70b6*/      ldr r4, [r1, #0x1c]
/*0x70b8*/      orrs r3, r4
/*0x70ba*/      orrs r3, r2
/*0x70bc*/      str r3, [r0, #4]
/*0x70be*/      ldr r3, [r1, #0x24]
/*0x70c0*/      ldr r2, [r1, #4]
/*0x70c2*/      orrs r2, r3
/*0x70c4*/      ldr r3, [r1, #0x20]
/*0x70c6*/      orr.w r2, r2, r3, lsl #4
/*0x70ca*/      str r2, [r0, #0x18]
/*0x70cc*/      ldr r1, [r1, #0x28]
/*0x70ce*/      mov.w r2, #-1
/*0x70d2*/      add.w r1, r2, r1, lsr #1
/*0x70d6*/      str r1, [r0, #0xc]
/*0x70d8*/      pop {r4, r5, pc}
            jump_70da:
/*0x70da*/      mov.w r2, #0x100
/*0x70de*/      lsls r2, r3
/*0x70e0*/      b jump_70a8

            .thumb_func
            spi_set_slave_select_output_enable:
/*0x70e2*/      cmp r1, #0
/*0x70e4*/      ldr r1, [r0]    ; r1 = *(arg1)
/*0x70e6*/      beq jump_70ee   ; arg2 == 0 ? jump_70ee : continue
/*0x70e8*/      orr r1, r1, #8  ; r1 = r1 | 8
/*0x70ec*/      b jump_70f2
            jump_70ee:
/*0x70ee*/      bic r1, r1, #8  ; r1 = r1 & ~8
            jump_70f2:
/*0x70f2*/      str r1, [r0]    ; *(arg1) = r1
/*0x70f4*/      bx lr

            .thumb_func
            spi_flash_check_set_wel:
/*0x70f6*/      push {r4, r5, r6, lr}
/*0x70f8*/      mov r5, r0          ; r5 = arg1
/*0x70fa*/      bl spi_flash_cmd_read_status_register ; r0 = status
/*0x70fe*/      bfi r4, r0, #0, #8  ; r4 = {r4[:8],r0[7:0]}
/*0x7102*/      cbz r5, jump_7128   ; arg1 == 0 ? jump_7128 : continue
/*0x7104*/      cmp r5, #1
/*0x7106*/      beq jump_7114       ; arg1 == 1 ? jump_7114 : continue
/*0x7108*/      cmp r5, #2
/*0x710a*/      bne jump_711a       ; arg1 != 2 ? jump_711a : continue
/*0x710c*/      uxth r0, r4         ; r0 = r4
/*0x710e*/      orr r4, r0, #2      ; r4 = r0 | 2
/*0x7112*/      b jump_711a
            jump_7114:
/*0x7114*/      uxth r0, r4         ; r0 = r4
/*0x7116*/      bic r4, r0, #2      ; r4 = r0 & ~2
            jump_711a:
/*0x711a*/      uxtb r0, r4
/*0x711c*/      bl spi_flash_write_status_register
/*0x7120*/      bl spi_flash_cmd_read_status_register
/*0x7124*/      bfi r4, r0, #0, #8
            jump_7128:
/*0x7128*/      lsls r0, r4, #0x1e
/*0x712a*/      bpl jump_7130
/*0x712c*/      movs r0, #1
/*0x712e*/      pop {r4, r5, r6, pc}
            jump_7130:
/*0x7130*/      movs r0, #0
/*0x7132*/      pop {r4, r5, r6, pc}

            .thumb_func
            call_7134:
/*0x7134*/      mov.w r1, #-0x1fff2000
/*0x7138*/      cbz r0, jump_7148
/*0x713a*/      cmp r0, #1
/*0x713c*/      ldr r0, [r1, #0x10]
/*0x713e*/      beq jump_714e
/*0x7140*/      bic r0, r0, #1
            jump_7144:
/*0x7144*/      str r0, [r1, #0x10]
/*0x7146*/      bx lr
            jump_7148:
/*0x7148*/      movs r0, #0
/*0x714a*/      str r0, [r1, #0x18]
/*0x714c*/      bx lr
            jump_714e:
/*0x714e*/      orr r0, r0, #1
/*0x7152*/      b jump_7144

            .thumb_func
            loc_7154:
/*0x7154*/      push.w {r4, r5, r6, r7, r8, sb, sl, lr}
/*0x7158*/      ldr r0, [pc, #0x94] /* 0x200009fc */
/*0x715a*/      bl call_7fb8
/*0x715e*/      mov r6, r0
/*0x7160*/      mov.w sb, #0x8000
/*0x7164*/      movs r1, #1
/*0x7166*/      mov r0, sb
/*0x7168*/      bl ckcu_set_APBCCR0
/*0x716c*/      ldr r4, [pc, #0x84] /* 0x40024000 */
/*0x716e*/      movw r5, #0xeae0
/*0x7172*/      cmp r6, #1
/*0x7174*/      bne jump_7184
/*0x7176*/      ldr r0, [r4, #0x54]
/*0x7178*/      orrs r0, r5
/*0x717a*/      str r0, [r4, #0x54]
/*0x717c*/      str r5, [r4, #0x58]
/*0x717e*/      ldr r0, [r4, #0x50]
/*0x7180*/      orrs r0, r5
/*0x7182*/      str r0, [r4, #0x50]
            jump_7184:
/*0x7184*/      ldr r7, [pc, #0x68] /* 0x200009fc */
/*0x7186*/      ldrb.w r0, [r7, #0x32]
/*0x718a*/      cmp r0, #3
/*0x718c*/      bne jump_71ca
/*0x718e*/      ldr.w r8, [pc, #0x68] /* 0x400a8000 */
/*0x7192*/      ldr.w r0, [r8]
/*0x7196*/      tst.w r0, #0xc0
/*0x719a*/      beq jump_71ca
/*0x719c*/      movs r0, #1
/*0x719e*/      bl call_4af4
/*0x71a2*/      ldr r1, [pc, #0x58] /* 0x20000044 */
/*0x71a4*/      movs r0, #0
/*0x71a6*/      strb r0, [r1, #1]
/*0x71a8*/      ldrb.w r0, [r7, #0x32]
/*0x71ac*/      cmp r0, #3
/*0x71ae*/      bne jump_71ca
/*0x71b0*/      ldr.w r0, [r8]
/*0x71b4*/      tst.w r0, #0xc0
/*0x71b8*/      beq jump_71ca
/*0x71ba*/      mov.w r0, #0x3e8
/*0x71be*/      bl sleep
/*0x71c2*/      str r5, [r4, #0x58]
/*0x71c4*/      movs r0, #0
/*0x71c6*/      bl mcu_enter_deep_sleep
            jump_71ca:
/*0x71ca*/      ldr r0, [r4, #0x58]
/*0x71cc*/      tst r0, r5
/*0x71ce*/      beq jump_71e2
/*0x71d0*/      cmp r6, #1
/*0x71d2*/      bne jump_71e2
/*0x71d4*/      ldr r0, [pc, #0x18] /* 0x200009fc */
/*0x71d6*/      bl call_818c
/*0x71da*/      cmp r0, #1
/*0x71dc*/      bne jump_71e2
/*0x71de*/      bl call_81dc
            jump_71e2:
/*0x71e2*/      mov r0, sb
/*0x71e4*/      pop.w {r4, r5, r6, r7, r8, sb, sl, lr}
/*0x71e8*/      movs r1, #0
/*0x71ea*/      b.w ckcu_set_APBCCR0

/*0x71ee*/  .byte 0x00
/*0x71ef*/  .byte 0x00

            data_71f0:
/*0x71f0*/  .word 0x200009fc
            data_71f4:
/*0x71f4*/  .word 0x40024000
            data_71f8:
/*0x71f8*/  .word 0x400a8000
            data_71fc:
/*0x71fc*/  .word 0x20000044


            .thumb_func
            ckcu_config_sys_clk:
/*0x7200*/      ldr r0, [pc, #0x50]     /* r0 = CKCU_RSTCU_BASE_7254 */
/*0x7202*/      movs r1, #1             ; r1 = 1
                ; do not isolate backup domain from other power domain
/*0x7204*/      str.w r1, [r0, #0x300]  ; *(CKCU.LPCR) = 1
/*0x7208*/      ldr r2, [pc, #0x4c]     /* r2 = CKCU_RSTCU_ALIAS_BASE_7258 */
                ; enable external (8 MHz) crystal oscillator
/*0x720a*/      str.w r1, [r2, #0xa8]   ; *(CKCU.GCCR.HSEEN) = 1
            jump_720e:
                ; wait for HSE to be ready
/*0x720e*/      ldr.w r3, [r2, #0x108]  ; r3 = *(CKCU.GCSR.HSERDY)
/*0x7212*/      cmp r3, #0
/*0x7214*/      beq jump_720e           ; r3 == 0 ? jump_720e : continue
/*0x7216*/      movs r3, #0             ; r3 = 0
                ; set PLL clock source to external crystal oscillator
/*0x7218*/      str r3, [r2, #0x20]     ; *(CKCU.GCFGR.PLLSRC) = 0
/*0x721a*/      mov.w r3, #0x9000000    ; r3 = 0x9000000
                ; set PLL VCO feedback divider 2 to 18
                ; set PLL output divider 2 to 1 (0x00)
                ; PLL_{out} = CK_{in} * 18
                ; PLL_{out} = 8MHz * 18 = 144 MHz
/*0x721e*/      str r3, [r0, #0x18]     ; *(CKCU.PLLCFGR) = 0x9000000
                ; enable PLL
/*0x7220*/      str.w r1, [r2, #0xa4]   ; *(CKCU.GCCR.PLLEN) = 1
            jump_7224:
                ; wait for PLL to be ready
/*0x7224*/      ldr.w r3, [r2, #0x104]  ; r3 = *(CKCU.GCSR.PLLRDY)
/*0x7228*/      cmp r3, #0
/*0x722a*/      beq jump_7224           ; r3 == 0 ? jump_7224 : continue
/*0x722c*/      ldr r2, [pc, #0x2c]     /* r2 = FMC_BASE_725c */
/*0x722e*/      ldr.w r3, [r2, #0x200]  ; r3 = *(FMC.CFCR)
/*0x7232*/      bic r3, r3, #7          ; r3 = r3 & ~7
/*0x7236*/      .short 0x1cdb /* adds r3, r3, #3 */ ; r3 = r3 + 3
                ; set Flash Wait-state setting to 2 clock cycles
/*0x7238*/      str.w r3, [r2, #0x200]  ; *(FMC.CFCR) = r3
                ; CK_AHB = CK_SYS/2 = 72 MHz
/*0x723c*/      str r1, [r0, #0x20]     ; *(CKCU.AHBCFGR) = 1
/*0x723e*/      ldr r2, [r0, #4]        ; r2 = *(CKCU.GCCR)
/*0x7240*/      bic r2, r2, #3          ; r2 = r2 & ~3
/*0x7244*/      .short 0x1c52 /* adds r2, r2, #1 */ ; r2 = r2 + 1
                ; set CK_PLL clock as system clock
/*0x7246*/      str r2, [r0, #4]        ; *(CKCU.GCCR) = r2
            jump_7248:
                ; wait for system clock to switch to PLL
/*0x7248*/      ldr r2, [r0, #0x34]     ; r2 = *(CKCU.CKST)
/*0x724a*/      cmp.w r1, r2, lsr #30
/*0x724e*/      bne jump_7248           ; CKCU.CKST.CKSWST != 1 ? jump_7248 : continue
/*0x7250*/      bx lr

/*0x7252*/  .byte 0x00
/*0x7253*/  .byte 0x00

            CKCU_RSTCU_BASE_7254:
/*0x7254*/  .word 0x40088000
            CKCU_RSTCU_ALIAS_BASE_7258:
/*0x7258*/  .word 0x43100000
            FMC_BASE_725c:
/*0x725c*/  .word 0x40080000

            jump_7260:
/*0x7260*/      push.w {r4, r5, r6, r7, r8, lr}
/*0x7264*/      ldr r4, [pc, #0x98] /* data_7300 */
/*0x7266*/      ldr r3, [r4]
/*0x7268*/      cmp r3, #0
/*0x726a*/      beq jump_72fa
/*0x726c*/      ldr r0, [pc, #0x94] /* data_7304 */
/*0x726e*/      movs r2, #0
/*0x7270*/      ldr r1, [r0]
/*0x7272*/      bic r1, r1, #0xc0000000
/*0x7276*/      add.w r1, r1, #-0x80000000
/*0x727a*/      str r1, [r0]
/*0x727c*/      movs r0, #1
            jump_727e:
/*0x727e*/      tst r3, r0
/*0x7280*/      beq jump_7288
/*0x7282*/      bics r3, r0
/*0x7284*/      str r3, [r4]
/*0x7286*/      b jump_7290
            jump_7288:
/*0x7288*/      .short 0x1c52 /* adds r2, r2, #1 */
/*0x728a*/      uxtb r2, r2
/*0x728c*/      lsls r0, r0, #1
/*0x728e*/      bne jump_727e
            jump_7290:
/*0x7290*/      ldr r0, [pc, #0x74] /* data_7308 */
/*0x7292*/      cmp r2, #0x1f
/*0x7294*/      beq jump_72bc
/*0x7296*/      movw r1, #0x2042
/*0x729a*/      strh r1, [r0], #2
/*0x729e*/      add.w r1, r4, r2, lsl #1
/*0x72a2*/      strh r2, [r0], #2
/*0x72a6*/      ldrb.w r1, [r1, #0x47]
/*0x72aa*/      bl call_9134
/*0x72ae*/      pop.w {r4, r5, r6, r7, r8, lr}
/*0x72b2*/      ldr r0, [pc, #0x54] /* data_7308 */
/*0x72b4*/      movs r1, #0x34
/*0x72b6*/      adds r0, #0xc
/*0x72b8*/      b.w _memzero
            jump_72bc:
/*0x72bc*/      ldr.w r8, [pc, #0x4c] /* NVIC.ICTR_730c */
/*0x72c0*/      movw r1, #0x143
/*0x72c4*/      mov.w r7, #0x400
/*0x72c8*/      str r1, [r0]
/*0x72ca*/      mov r6, r0
/*0x72cc*/      str.w r7, [r8, #0x180]
/*0x72d0*/      ldrb.w r0, [r4, #0x40]
/*0x72d4*/      adds r1, r4, #4
/*0x72d6*/      lsls r5, r0, #1
/*0x72d8*/      mov r2, r5
/*0x72da*/      adds r0, r6, #4
/*0x72dc*/      bl memcpy
/*0x72e0*/      movs r0, #0
/*0x72e2*/      strb.w r0, [r4, #0x40]
/*0x72e6*/      str.w r7, [r8, #0x100]
/*0x72ea*/      adds r0, r6, r5
/*0x72ec*/      rsb.w r1, r5, #0x3c
/*0x72f0*/      pop.w {r4, r5, r6, r7, r8, lr}
/*0x72f4*/      .short 0x1d00 /* adds r0, r0, #4 */
/*0x72f6*/      b.w _memzero
            jump_72fa:
/*0x72fa*/      pop.w {r4, r5, r6, r7, r8, pc}

/*0x72fe*/  .byte 0x00
/*0x72ff*/  .byte 0x00

            data_7300:
/*0x7300*/  .word 0x20000c40
            data_7304:
/*0x7304*/  .word 0x20000050
            data_7308:
/*0x7308*/  .word 0x20000ad0
            NVIC.ICTR_730c:
/*0x730c*/  .word 0xe000e004


            .thumb_func
            call_7310:
/*0x7310*/      push {r4, r5, r6, lr}
/*0x7312*/      and r1, r0, #0xf
/*0x7316*/      movs r5, #1
/*0x7318*/      lsl.w r1, r5, r1
/*0x731c*/      ldr r4, [pc, #0x60] /* data_7380 */
/*0x731e*/      uxth r1, r1
/*0x7320*/      cmp r0, #0x30
/*0x7322*/      bne jump_735a
/*0x7324*/      ldrb.w r2, [r4, #0x40]
/*0x7328*/      cmp r2, #0x1e
/*0x732a*/      bhs jump_735a
/*0x732c*/      add.w r3, r4, r2, lsl #1
/*0x7330*/      ldr r6, [pc, #0x50] /* data_7384 */
/*0x7332*/      .short 0x1c52 /* adds r2, r2, #1 */
/*0x7334*/      strb.w r2, [r4, #0x40]
/*0x7338*/      ldrb r2, [r6, #3]
/*0x733a*/      strh r2, [r3, #4]!
/*0x733e*/      ldrb r6, [r6, #1]
/*0x7340*/      lsls r6, r6, #0x1e
/*0x7342*/      bpl jump_734a
/*0x7344*/      add.w r2, r2, #0x8000
/*0x7348*/      strh r2, [r3]
            jump_734a:
/*0x734a*/      ldrb.w r2, [r4, #0x4e]
/*0x734e*/      lsls r2, r2, #0x1e
/*0x7350*/      bpl jump_735a
/*0x7352*/      ldr r2, [r4]
/*0x7354*/      orr r2, r2, #0x80000000
/*0x7358*/      str r2, [r4]
            jump_735a:
/*0x735a*/      lsrs r0, r0, #4
/*0x735c*/      add.w r2, r4, r0, lsl #1
/*0x7360*/      ldrb.w r3, [r2, #0x46]
/*0x7364*/      tst r3, r1
/*0x7366*/      beq jump_737e
/*0x7368*/      ldrb.w r3, [r2, #0x47]
/*0x736c*/      tst r3, r1
/*0x736e*/      bne jump_737e
/*0x7370*/      orrs r3, r1
/*0x7372*/      strb.w r3, [r2, #0x47]
/*0x7376*/      ldr r1, [r4]
/*0x7378*/      lsls r5, r0
/*0x737a*/      orrs r1, r5
/*0x737c*/      str r1, [r4]
            jump_737e:
/*0x737e*/      pop {r4, r5, r6, pc}

            data_7380:
/*0x7380*/  .word 0x20000c40
            data_7384:
/*0x7384*/  .word 0x20000058


            .thumb_func
            call_7388:
/*0x7388*/      push.w {r1, r2, r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
/*0x738c*/      ldr r0, [pc, #0x3d4] /* data_7764 */
/*0x738e*/      ldr r4, [pc, #0x3d8] /* data_7768 */
/*0x7390*/      mov r3, r0
/*0x7392*/      ldr r6, [pc, #0x3e0] /* data_7774 */
/*0x7394*/      ldrb r1, [r0]
/*0x7396*/      ldrh r2, [r3, #2]
/*0x7398*/      ldrb r0, [r3, #4]
/*0x739a*/      ldrb r7, [r4]
/*0x739c*/      ldr.w fp, [pc, #0x3cc] /* data_776c */
/*0x73a0*/      ldr.w r8, [pc, #0x3cc] /* data_7770 */
/*0x73a4*/      ldrb.w r5, [r6, #0x4e]
/*0x73a8*/      ldrb r3, [r3, #1]
/*0x73aa*/      cmp r1, #0x50
/*0x73ac*/      beq jump_7498
/*0x73ae*/      bgt jump_73c2
/*0x73b0*/      cmp r1, #0x40
/*0x73b2*/      beq jump_73e0
/*0x73b4*/      cmp r1, #0x41
/*0x73b6*/      beq jump_74a0
/*0x73b8*/      cmp r1, #0x42
/*0x73ba*/      beq jump_749c
/*0x73bc*/      cmp r1, #0x43
            jump_73be:
/*0x73be*/      bne jump_749e
/*0x73c0*/      b jump_7560
            jump_73c2:
/*0x73c2*/      ldr r4, [pc, #0x3a8] /* data_776c */
/*0x73c4*/      adds r4, #0x2f
/*0x73c6*/      str r4, [sp, #4]
/*0x73c8*/      ldr r4, [pc, #0x398] /* data_7764 */
/*0x73ca*/      adds r4, #8
/*0x73cc*/      str r4, [sp]
/*0x73ce*/      cmp r1, #0x51
/*0x73d0*/      beq jump_74c4
/*0x73d2*/      cmp r1, #0x52
/*0x73d4*/      beq jump_74c6
/*0x73d6*/      cmp r1, #0x53
/*0x73d8*/      beq jump_74c8
/*0x73da*/      cmp r1, #0xc0
            jump_73dc:
/*0x73dc*/      bne jump_73be
/*0x73de*/      b jump_7936
            jump_73e0:
/*0x73e0*/      ldr r0, [pc, #0x380] /* data_7764 */
/*0x73e2*/      cmp r3, #0x21
/*0x73e4*/      beq jump_7424
/*0x73e6*/      bgt jump_73f4
/*0x73e8*/      cbz r3, jump_7408
/*0x73ea*/      cmp r3, #1
/*0x73ec*/      beq jump_7412
/*0x73ee*/      cmp r3, #0x20
/*0x73f0*/      bne jump_7400
/*0x73f2*/      b jump_741c
            jump_73f4:
/*0x73f4*/      cmp r3, #0x61
/*0x73f6*/      beq jump_742c
/*0x73f8*/      cmp r3, #0x62
/*0x73fa*/      beq jump_7434
/*0x73fc*/      cmp r3, #0x63
/*0x73fe*/      beq jump_7444
            jump_7400:
/*0x7400*/      pop.w {r1, r2, r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
/*0x7404*/      b.w jump_7a14
            jump_7408:
/*0x7408*/      movs r1, #1
/*0x740a*/      str r1, [r0, #4]!
/*0x740e*/      movs r1, #4
/*0x7410*/      b jump_7416
            jump_7412:
/*0x7412*/      movs r1, #0xa
/*0x7414*/      ldr r0, [pc, #0x360] /* data_7778 */
            jump_7416:
/*0x7416*/      bl call_6998
/*0x741a*/      b jump_79fc
            jump_741c:
/*0x741c*/      ldr r0, [pc, #0x358] /* data_7778 */
/*0x741e*/      movs r1, #7
/*0x7420*/      subs r0, #0x16
/*0x7422*/      b jump_7416
            jump_7424:
/*0x7424*/      pop.w {r1, r2, r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
/*0x7428*/      b.w jump_7a98
            jump_742c:
/*0x742c*/      movs r1, #0x28
/*0x742e*/      add.w r0, fp, #2
/*0x7432*/      b jump_7416
            jump_7434:
/*0x7434*/      movs r1, #0xf
/*0x7436*/      ldr r0, [pc, #0x344] /* data_777c */
/*0x7438*/      bl call_6998
/*0x743c*/      movs r0, #0
/*0x743e*/      strb.w r0, [r6, #0x4d]
/*0x7442*/      b jump_79fc
            jump_7444:
/*0x7444*/      mov r4, r0
/*0x7446*/      ldr r0, [pc, #0x338] /* data_7780 */
/*0x7448*/      movs r5, #0
/*0x744a*/      ldr r0, [r0]
/*0x744c*/      str r0, [r4, #4]
/*0x744e*/      ldr r0, [pc, #0x334] /* data_7784 */
/*0x7450*/      ldrb r0, [r0, #2]
/*0x7452*/      strb r0, [r4, #8]
/*0x7454*/      ldrb.w r0, [fp, #0x2e]
/*0x7458*/      strb r0, [r4, #9]
/*0x745a*/      strb r5, [r4, #0xa]
/*0x745c*/      strb r5, [r4, #0xb]
/*0x745e*/      cmp r0, #0xa
/*0x7460*/      bhs jump_7480
/*0x7462*/      add.w r2, r0, r0, lsl #1
/*0x7466*/      add.w r0, r2, r0, lsl #3
/*0x746a*/      add r0, fp
/*0x746c*/      ldr r1, [r0, #0x41]!
/*0x7470*/      str r1, [r4, #0xc]
/*0x7472*/      ldr r1, [r0, #4]
/*0x7474*/      str r1, [r4, #0x10]
/*0x7476*/      ldrh r1, [r0, #8]
/*0x7478*/      strh r1, [r4, #0x14]
/*0x747a*/      ldrb r0, [r0, #0xa]
/*0x747c*/      strb r0, [r4, #0x16]
/*0x747e*/      b jump_748a
            jump_7480:
/*0x7480*/      ldr r0, [pc, #0x2e0] /* data_7764 */
/*0x7482*/      movs r1, #0xb
/*0x7484*/      adds r0, #0xc
/*0x7486*/      bl _memzero
            jump_748a:
/*0x748a*/      movs r1, #0x14
/*0x748c*/      adds r0, r4, #4
/*0x748e*/      bl call_6998
/*0x7492*/      strb.w r5, [r6, #0x47]
/*0x7496*/      b jump_79fc
            jump_7498:
/*0x7498*/      b jump_757c

/*0x749a*/  .byte 0x01
/*0x749b*/  .byte 0xe0

            jump_749c:
/*0x749c*/      b jump_750c
            jump_749e:
/*0x749e*/      b jump_7610
            jump_74a0:
/*0x74a0*/      ldr r0, [pc, #0x2c0] /* data_7764 */
/*0x74a2*/      cmp r3, #0xff
/*0x74a4*/      beq jump_74ca
/*0x74a6*/      lsrs r0, r3, #7
/*0x74a8*/      bfi r5, r0, #2, #1
/*0x74ac*/      strb.w r5, [r6, #0x4e]
/*0x74b0*/      ands r0, r3, #0x7f
/*0x74b4*/      beq jump_74ce
/*0x74b6*/      cmp r0, #1
/*0x74b8*/      beq jump_74ce
/*0x74ba*/      cmp r0, #2
/*0x74bc*/      beq jump_74ce
/*0x74be*/      cmp r0, #3
            jump_74c0:
/*0x74c0*/      bne jump_73dc
/*0x74c2*/      b jump_74ce
            jump_74c4:
/*0x74c4*/      b jump_764a
            jump_74c6:
/*0x74c6*/      b jump_77fc
            jump_74c8:
/*0x74c8*/      b jump_75c6
            jump_74ca:
/*0x74ca*/      strb r7, [r0, #1]
/*0x74cc*/      b jump_79fc
            jump_74ce:
/*0x74ce*/      strb r0, [r4]
/*0x74d0*/      lsls r0, r0, #0x1f
/*0x74d2*/      beq jump_74da
/*0x74d4*/      bl call_6590
/*0x74d8*/      b jump_74e0
            jump_74da:
/*0x74da*/      movs r0, #0xff
/*0x74dc*/      bl call_3c1c
            jump_74e0:
/*0x74e0*/      ldrb r0, [r4]
/*0x74e2*/      lsls r0, r0, #0x1e
/*0x74e4*/      bpl jump_7502
/*0x74e6*/      bl call_4fe8
/*0x74ea*/      ldr.w r1, [r8]
/*0x74ee*/      orr r1, r1, #0x10000000
/*0x74f2*/      str.w r1, [r8]
/*0x74f6*/      ldrb r0, [r6, #0x4e]!
/*0x74fa*/      bic r0, r0, #1
/*0x74fe*/      strb r0, [r6]
/*0x7500*/      b jump_79fc
            jump_7502:
/*0x7502*/      ldr.w r1, [r8]
/*0x7506*/      orr r1, r1, #0x8000000
/*0x750a*/      b jump_79f8
            jump_750c:
/*0x750c*/      ldr r4, [pc, #0x254] /* data_7764 */
/*0x750e*/      cmp r2, #4
            jump_7510:
/*0x7510*/      bhs jump_7610
/*0x7512*/      mov r0, r4
/*0x7514*/      ldr r1, [pc, #0x25c] /* data_7774 */
/*0x7516*/      ldrh r0, [r0, #2]
/*0x7518*/      add.w r1, r1, r0, lsl #1
/*0x751c*/      cbz r3, jump_752c
/*0x751e*/      cmp r3, #1
/*0x7520*/      beq jump_7536
/*0x7522*/      cmp r3, #0x10
/*0x7524*/      beq jump_7542
/*0x7526*/      cmp r3, #0x11
            jump_7528:
/*0x7528*/      bne jump_74c0
/*0x752a*/      b jump_754c
            jump_752c:
/*0x752c*/      movs r2, #1
/*0x752e*/      adds r0, r4, #4
/*0x7530*/      adds r1, #0x46
/*0x7532*/      bl call_9154
            jump_7536:
/*0x7536*/      ldrh r0, [r4, #2]
/*0x7538*/      add.w r0, r6, r0, lsl #1
/*0x753c*/      ldrb.w r1, [r0, #0x46]
/*0x7540*/      b jump_7556
            jump_7542:
/*0x7542*/      movs r2, #0
/*0x7544*/      adds r0, r4, #4
/*0x7546*/      adds r1, #0x47
/*0x7548*/      bl call_9154
            jump_754c:
/*0x754c*/      ldrh r0, [r4, #2]
/*0x754e*/      add.w r0, r6, r0, lsl #1
/*0x7552*/      ldrb.w r1, [r0, #0x47]
            jump_7556:
/*0x7556*/      adds r0, r4, #4
/*0x7558*/      bl call_9134
/*0x755c*/      movs r1, #8
/*0x755e*/      b jump_7884
            jump_7560:
/*0x7560*/      cmp r3, #0
/*0x7562*/      bne jump_74c0
/*0x7564*/      cbz r0, jump_756c
/*0x7566*/      orr r0, r5, #2
/*0x756a*/      b jump_7570
            jump_756c:
/*0x756c*/      bic r0, r5, #2
            jump_7570:
/*0x7570*/      strb.w r0, [r6, #0x4e]
/*0x7574*/      movs r0, #0
/*0x7576*/      strb.w r0, [r6, #0x40]
/*0x757a*/      b jump_79fc
            jump_757c:
/*0x757c*/      lsls r1, r7, #0x1f
/*0x757e*/      bne jump_7584
/*0x7580*/      lsls r1, r5, #0x1d
            jump_7582:
/*0x7582*/      bpl jump_7610
            jump_7584:
/*0x7584*/      ldr r4, [pc, #0x1dc] /* data_7764 */
/*0x7586*/      cbz r3, jump_7596
/*0x7588*/      cmp r3, #0x10
/*0x758a*/      beq jump_759e
/*0x758c*/      cmp r3, #0x20
/*0x758e*/      beq jump_75ac
/*0x7590*/      cmp r3, #0x55
            jump_7592:
/*0x7592*/      bne jump_74c0
/*0x7594*/      b jump_75c0
            jump_7596:
/*0x7596*/      movs r0, #0xff
/*0x7598*/      bl call_3c1c
/*0x759c*/      b jump_79fc
            jump_759e:
/*0x759e*/      cbz r0, jump_75a6
/*0x75a0*/      bl call_3cd4
/*0x75a4*/      b jump_79fc
            jump_75a6:
/*0x75a6*/      bl call_3ca0
/*0x75aa*/      b jump_79fc
            jump_75ac:
/*0x75ac*/      bl call_3bd8
/*0x75b0*/      cbz r0, jump_75b8
/*0x75b2*/      mov.w r1, #-1
/*0x75b6*/      b jump_75ba
            jump_75b8:
/*0x75b8*/      movs r1, #0
            jump_75ba:
/*0x75ba*/      str r1, [r4, #4]
/*0x75bc*/      movs r1, #4
/*0x75be*/      b jump_7884
            jump_75c0:
/*0x75c0*/      bl call_3d28
/*0x75c4*/      b jump_79fc
            jump_75c6:
/*0x75c6*/      lsls r0, r7, #0x1f
/*0x75c8*/      bne jump_75ce
/*0x75ca*/      lsls r0, r5, #0x1d
/*0x75cc*/      bpl jump_7582
            jump_75ce:
/*0x75ce*/      ldrb.w r1, [r6, #0x42]
/*0x75d2*/      cmp r1, #0x14
            jump_75d4:
/*0x75d4*/      bhs jump_7510
/*0x75d6*/      ldr r4, [pc, #0x18c] /* data_7764 */
/*0x75d8*/      cmp r3, #0x10
/*0x75da*/      beq jump_75f0
/*0x75dc*/      bgt jump_75e6
/*0x75de*/      cbz r3, jump_761e
/*0x75e0*/      cmp r3, #1
            jump_75e2:
/*0x75e2*/      bne jump_7528
/*0x75e4*/      b jump_7624
            jump_75e6:
/*0x75e6*/      cmp r3, #0x11
/*0x75e8*/      beq jump_75f6
/*0x75ea*/      cmp r3, #0xff
/*0x75ec*/      bne jump_7528
/*0x75ee*/      b jump_7642
            jump_75f0:
/*0x75f0*/      movs r0, #0
/*0x75f2*/      strh.w r0, [r6, #0x44]
            jump_75f6:
/*0x75f6*/      ldrh.w r3, [r6, #0x44]
/*0x75fa*/      adds r0, r3, r2
/*0x75fc*/      cmp r0, #0xc8
            jump_75fe:
/*0x75fe*/      bhi jump_7610
/*0x7600*/      cmp r2, #0xf
/*0x7602*/      bhi jump_75fe
/*0x7604*/      adds r0, r4, #4
/*0x7606*/      bl call_3b34
/*0x760a*/      ldrh r1, [r6, #0x44]!
/*0x760e*/      b jump_7612
            jump_7610:
/*0x7610*/      b jump_7800
            jump_7612:
/*0x7612*/      ldrh r0, [r4, #2]
/*0x7614*/      add r1, r0
/*0x7616*/      strh r1, [r6]
/*0x7618*/      lsls r0, r0, #0x1a
/*0x761a*/      lsrs r1, r0, #0x18
/*0x761c*/      b jump_7884
            jump_761e:
/*0x761e*/      movs r0, #0
/*0x7620*/      strh.w r0, [r6, #0x44]
            jump_7624:
/*0x7624*/      ldrh.w r3, [r6, #0x44]
/*0x7628*/      adds r0, r3, r2
/*0x762a*/      cmp r0, #0xc8
/*0x762c*/      bhi jump_75fe
/*0x762e*/      cmp r2, #0xf
/*0x7630*/      bhi jump_75fe
/*0x7632*/      adds r0, r4, #4
/*0x7634*/      bl call_3ba0
/*0x7638*/      ldrh r0, [r6, #0x44]!
/*0x763c*/      ldrh r1, [r4, #2]
/*0x763e*/      add r0, r1
/*0x7640*/      strh r0, [r6]
            jump_7642:
/*0x7642*/      ldr r0, [pc, #0x130] /* data_7774 */
/*0x7644*/      movs r1, #2
/*0x7646*/      adds r0, #0x44
/*0x7648*/      b jump_7416
            jump_764a:
/*0x764a*/      lsls r1, r7, #0x1f
/*0x764c*/      bne jump_7652
/*0x764e*/      lsls r1, r5, #0x1d
/*0x7650*/      bpl jump_7582
            jump_7652:
/*0x7652*/      ldr r1, [pc, #0x110] /* data_7764 */
/*0x7654*/      cmp r3, #0x28
/*0x7656*/      beq jump_76ca
/*0x7658*/      bgt jump_7672
/*0x765a*/      cmp r3, #0x10
/*0x765c*/      beq jump_76a6
/*0x765e*/      bgt jump_7668
/*0x7660*/      cbz r3, jump_768c
/*0x7662*/      cmp r3, #1
/*0x7664*/      bne jump_7592
/*0x7666*/      b jump_7696
            jump_7668:
/*0x7668*/      cmp r3, #0x18
/*0x766a*/      beq jump_76ac
/*0x766c*/      cmp r3, #0x19
/*0x766e*/      bne jump_7592
/*0x7670*/      b jump_76ba
            jump_7672:
/*0x7672*/      cmp r3, #0x2c
/*0x7674*/      beq jump_775e
/*0x7676*/      bgt jump_7682
/*0x7678*/      cmp r3, #0x29
/*0x767a*/      beq jump_76ce
/*0x767c*/      cmp r3, #0x2a
/*0x767e*/      bne jump_7592
/*0x7680*/      b jump_778c
            jump_7682:
/*0x7682*/      cmp r3, #0xa0
/*0x7684*/      beq jump_7760
/*0x7686*/      cmp r3, #0xa8
/*0x7688*/      bne jump_75e2
/*0x768a*/      b jump_77d8
            jump_768c:
/*0x768c*/      cmp r0, #5
/*0x768e*/      bhs jump_75d4
/*0x7690*/      ldr r1, [pc, #0xf4] /* data_7788 */
/*0x7692*/      strb r0, [r1]
/*0x7694*/      b jump_77fc
            jump_7696:
/*0x7696*/      cmp r2, #5
/*0x7698*/      bhs jump_75d4
/*0x769a*/      ldr r0, [pc, #0xe8] /* data_7784 */
/*0x769c*/      movs r1, #1
/*0x769e*/      add.w r0, r0, r2, lsl #5
/*0x76a2*/      .short 0x1d00 /* adds r0, r0, #4 */
/*0x76a4*/      b jump_7796
            jump_76a6:
/*0x76a6*/      bl call_7c10
/*0x76aa*/      b jump_77fc
            jump_76ac:
/*0x76ac*/      cmp r2, #0x14
/*0x76ae*/      bhs jump_75d4
/*0x76b0*/      add.w r0, fp, r2, lsl #1
/*0x76b4*/      ldrh r1, [r1, #4]
/*0x76b6*/      strh r1, [r0, #2]
/*0x76b8*/      b jump_77fc
            jump_76ba:
/*0x76ba*/      cmp r2, #0x14
/*0x76bc*/      bhs jump_75d4
/*0x76be*/      add.w r0, fp, r2, lsl #5
/*0x76c2*/      movs r1, #1
/*0x76c4*/      addw r0, r0, #0x7af
/*0x76c8*/      b jump_7796
            jump_76ca:
/*0x76ca*/      movs r0, #0
/*0x76cc*/      b jump_789e
            jump_76ce:
/*0x76ce*/      movs r4, #0
/*0x76d0*/      mov sl, r4
/*0x76d2*/      mov sb, r4
/*0x76d4*/      mov r8, r4
/*0x76d6*/      mov r7, r4
/*0x76d8*/      movs r5, #0x12
/*0x76da*/      b jump_7708
            jump_76dc:
/*0x76dc*/      ldr r0, [pc, #0x84] /* data_7764 */
/*0x76de*/      add r0, r5
/*0x76e0*/      str r0, [sp, #8]
/*0x76e2*/      ldrb r0, [r0, #4]
/*0x76e4*/      bl call_532c
/*0x76e8*/      uxtb r1, r0
/*0x76ea*/      cmp r1, #2
/*0x76ec*/      beq jump_7736
/*0x76ee*/      cmp r1, #3
/*0x76f0*/      beq jump_774a
/*0x76f2*/      cmp r1, #4
/*0x76f4*/      beq jump_7722
/*0x76f6*/      cmp r1, #5
/*0x76f8*/      beq jump_7716
/*0x76fa*/      lsrs r1, r0, #8
/*0x76fc*/      movs r0, #1
/*0x76fe*/      lsls r0, r1
/*0x7700*/      tst r0, r7
/*0x7702*/      bne jump_7800
/*0x7704*/      orrs r7, r0
            jump_7706:
/*0x7706*/      movs r4, #1
            jump_7708:
/*0x7708*/      .short 0x1e6d /* subs r5, r5, #1 */
/*0x770a*/      uxtb r5, r5
/*0x770c*/      bhs jump_76dc
/*0x770e*/      movs r2, #0x12
/*0x7710*/      ldr r1, [pc, #0x50] /* data_7764 */
/*0x7712*/      ldr r0, [sp, #4]
/*0x7714*/      b jump_77f6
            jump_7716:
/*0x7716*/      cmp r4, #0
/*0x7718*/      bne jump_7800
/*0x771a*/      ldr r0, [sp, #8]
/*0x771c*/      movs r1, #0xff
/*0x771e*/      strb r1, [r0, #4]
/*0x7720*/      b jump_7708
            jump_7722:
/*0x7722*/      lsrs r1, r0, #8
/*0x7724*/      movs r0, #1
/*0x7726*/      lsls r0, r1
/*0x7728*/      uxtb r0, r0
/*0x772a*/      tst.w r0, sb
/*0x772e*/      bne jump_7800
/*0x7730*/      orr.w sb, r0, sb
/*0x7734*/      b jump_7706
            jump_7736:
/*0x7736*/      lsrs r1, r0, #8
/*0x7738*/      movs r0, #1
/*0x773a*/      lsls r0, r1
/*0x773c*/      uxtb r0, r0
/*0x773e*/      tst.w r0, sl
/*0x7742*/      bne jump_7800
/*0x7744*/      orr.w sl, r0, sl
/*0x7748*/      b jump_7706
            jump_774a:
/*0x774a*/      lsrs r1, r0, #8
/*0x774c*/      movs r0, #1
/*0x774e*/      lsls r0, r1
/*0x7750*/      uxtb r0, r0
/*0x7752*/      tst.w r0, r8
/*0x7756*/      bne jump_7800
/*0x7758*/      orr.w r8, r0, r8
/*0x775c*/      b jump_7706
            jump_775e:
/*0x775e*/      b jump_779c
            jump_7760:
/*0x7760*/      b jump_77a0

/*0x7762*/  .byte 0x00
/*0x7763*/  .byte 0x00

            data_7764:
/*0x7764*/  .word 0x20000ad0
            data_7768:
/*0x7768*/  .word 0x20000076
            data_776c:
/*0x776c*/  .word 0x20000d34
            data_7770:
/*0x7770*/  .word 0x20000050
            data_7774:
/*0x7774*/  .word 0x20000c40
            data_7778:
/*0x7778*/  .word 0x00009cb6 /* possible pointer */
            data_777c:
/*0x777c*/  .word 0x20000094
            data_7780:
/*0x7780*/  .word 0x2000006c
            data_7784:
/*0x7784*/  .word 0x20000c90
            data_7788:
/*0x7788*/  .word 0x20000046

            jump_778c:
/*0x778c*/      bl call_91ac
/*0x7790*/      cmp r0, #0
/*0x7792*/      beq jump_7888
/*0x7794*/      movs r1, #1
            jump_7796:
/*0x7796*/      bl call_9180
/*0x779a*/      b jump_77fc
            jump_779c:
/*0x779c*/      movs r0, #0
/*0x779e*/      b jump_78be
            jump_77a0:
/*0x77a0*/      cbz r2, jump_7800
/*0x77a2*/      cmp r2, #4
/*0x77a4*/      bhi jump_7800
/*0x77a6*/      ldrb r3, [r1, #5]
/*0x77a8*/      cmp r3, #7
/*0x77aa*/      bhi jump_7800
/*0x77ac*/      adds r1, r0, r3
/*0x77ae*/      cmp r1, #0xf
/*0x77b0*/      bhi jump_7800
/*0x77b2*/      movs r1, #0x73
/*0x77b4*/      muls r2, r1, r2
/*0x77b6*/      add.w r1, fp, r2, lsl #1
/*0x77ba*/      add.w r2, r1, r0, lsl #3
/*0x77be*/      lsls r0, r3, #0x1b
/*0x77c0*/      lsrs r0, r0, #0x18
/*0x77c2*/      mov r1, r4
/*0x77c4*/      subs r2, #0x37
/*0x77c6*/      b jump_77d0
            jump_77c8:
/*0x77c8*/      ldrb r3, [r1], #1
/*0x77cc*/      strb r3, [r2], #1
            jump_77d0:
/*0x77d0*/      .short 0x1e40 /* subs r0, r0, #1 */
/*0x77d2*/      uxtb r0, r0
/*0x77d4*/      bhs jump_77c8
/*0x77d6*/      b jump_77fc
            jump_77d8:
/*0x77d8*/      cmp r2, #0xf
/*0x77da*/      bhs jump_7800
/*0x77dc*/      cmp r2, #0xe
/*0x77de*/      beq jump_7818
/*0x77e0*/      movs r0, #4
            jump_77e2:
/*0x77e2*/      movs r3, #3
/*0x77e4*/      lsls r3, r0
/*0x77e6*/      add.w r2, r2, r2, lsl #1
/*0x77ea*/      add.w r0, fp, r2, lsl #3
/*0x77ee*/      uxtb r3, r3
/*0x77f0*/      mov r2, r3
/*0x77f2*/      addw r0, r0, #0x447
            jump_77f6:
/*0x77f6*/      .short 0x1d09 /* adds r1, r1, #4 */
/*0x77f8*/      bl memcpy
            jump_77fc:
/*0x77fc*/      ldr r4, [pc, #0x208] /* data_7a08 */
/*0x77fe*/      b jump_7802
            jump_7800:
/*0x7800*/      b jump_7910
            jump_7802:
/*0x7802*/      ldrb r1, [r4, #1]
/*0x7804*/      cmp r1, #0x28
/*0x7806*/      beq jump_789c
/*0x7808*/      bgt jump_7826
/*0x780a*/      cmp r1, #0x10
/*0x780c*/      beq jump_785a
/*0x780e*/      bgt jump_781c
/*0x7810*/      cbz r1, jump_7840
/*0x7812*/      cmp r1, #1
/*0x7814*/      bne jump_7910
/*0x7816*/      b jump_7846
            jump_7818:
/*0x7818*/      movs r0, #3
/*0x781a*/      b jump_77e2
            jump_781c:
/*0x781c*/      cmp r1, #0x18
/*0x781e*/      beq jump_786e
/*0x7820*/      cmp r1, #0x19
/*0x7822*/      bne jump_7910
/*0x7824*/      b jump_788a
            jump_7826:
/*0x7826*/      cmp r1, #0x2c
/*0x7828*/      beq jump_78bc
/*0x782a*/      bgt jump_7836
/*0x782c*/      cmp r1, #0x29
/*0x782e*/      beq jump_78a6
/*0x7830*/      cmp r1, #0x2a
/*0x7832*/      bne jump_7910
/*0x7834*/      b jump_78ac
            jump_7836:
/*0x7836*/      cmp r1, #0xa0
/*0x7838*/      beq jump_78c6
/*0x783a*/      cmp r1, #0xa8
/*0x783c*/      bne jump_7910
/*0x783e*/      b jump_7912
            jump_7840:
/*0x7840*/      movs r1, #1
/*0x7842*/      ldr r0, [pc, #0x1c8] /* data_7a0c */
/*0x7844*/      b jump_7416
            jump_7846:
/*0x7846*/      ldrh r0, [r4, #2]
/*0x7848*/      cmp r0, #5
/*0x784a*/      bhs jump_7910
/*0x784c*/      ldr r1, [pc, #0x1bc] /* data_7a0c */
/*0x784e*/      .short 0x1e89 /* subs r1, r1, #2 */
/*0x7850*/      add.w r0, r1, r0, lsl #5
/*0x7854*/      movs r1, #0
/*0x7856*/      .short 0x1d00 /* adds r0, r0, #4 */
/*0x7858*/      b jump_78b6
            jump_785a:
/*0x785a*/      bl call_7a34
/*0x785e*/      movs r1, #8
/*0x7860*/      adds r0, r4, #4
/*0x7862*/      bl call_6998
/*0x7866*/      movs r0, #0
/*0x7868*/      strb.w r0, [r6, #0x49]
/*0x786c*/      b jump_79fc
            jump_786e:
/*0x786e*/      ldrh r1, [r4, #2]
/*0x7870*/      mov r0, r4
/*0x7872*/      cmp r1, #0x14
/*0x7874*/      bhs jump_7910
/*0x7876*/      strb.w r1, [r6, #0x42]
/*0x787a*/      add.w r1, fp, r1, lsl #1
/*0x787e*/      ldrh r1, [r1, #2]
/*0x7880*/      strh r1, [r0, #4]
/*0x7882*/      movs r1, #2
            jump_7884:
/*0x7884*/      adds r0, r4, #4
/*0x7886*/      b jump_7416
            jump_7888:
/*0x7888*/      b jump_7992
            jump_788a:
/*0x788a*/      ldrh r0, [r4, #2]
/*0x788c*/      cmp r0, #0x14
/*0x788e*/      bhs jump_7910
/*0x7890*/      add.w r0, fp, r0, lsl #5
/*0x7894*/      movs r1, #0
/*0x7896*/      addw r0, r0, #0x7af
/*0x789a*/      b jump_78b6
            jump_789c:
/*0x789c*/      movs r0, #1
            jump_789e:
/*0x789e*/      pop.w {r1, r2, r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
/*0x78a2*/      b.w jump_7b28
            jump_78a6:
/*0x78a6*/      movs r1, #0x12
/*0x78a8*/      ldr r0, [sp, #4]
/*0x78aa*/      b jump_7416
            jump_78ac:
/*0x78ac*/      bl call_91ac
/*0x78b0*/      cmp r0, #0
/*0x78b2*/      beq jump_7992
/*0x78b4*/      movs r1, #0
            jump_78b6:
/*0x78b6*/      bl call_9180
/*0x78ba*/      b jump_79fc
            jump_78bc:
/*0x78bc*/      movs r0, #1
            jump_78be:
/*0x78be*/      pop.w {r1, r2, r3, r4, r5, r6, r7, r8, sb, sl, fp, lr}
/*0x78c2*/      b.w jump_7b64
            jump_78c6:
/*0x78c6*/      ldrh r1, [r4, #2]
/*0x78c8*/      mov r0, r4
/*0x78ca*/      cbz r1, jump_7910
/*0x78cc*/      cmp r1, #4
/*0x78ce*/      bhi jump_7910
/*0x78d0*/      ldrb r5, [r0, #5]
/*0x78d2*/      cmp r5, #7
/*0x78d4*/      bhi jump_7910
/*0x78d6*/      ldrb r2, [r0, #4]
/*0x78d8*/      adds r3, r2, r5
/*0x78da*/      cmp r3, #0xf
/*0x78dc*/      bhi jump_7910
/*0x78de*/      movs r3, #0x73
/*0x78e0*/      muls r1, r3, r1
/*0x78e2*/      add.w r1, fp, r1, lsl #1
/*0x78e6*/      add.w r3, r1, r2, lsl #3
/*0x78ea*/      lsls r1, r5, #0x1b
/*0x78ec*/      lsrs r1, r1, #0x18
/*0x78ee*/      subs r3, #0x37
/*0x78f0*/      ldr r2, [sp]
/*0x78f2*/      b jump_78fc
            jump_78f4:
/*0x78f4*/      ldrb r4, [r3], #1
/*0x78f8*/      strb r4, [r2], #1
            jump_78fc:
/*0x78fc*/      .short 0x1e49 /* subs r1, r1, #1 */
/*0x78fe*/      uxtb r1, r1
/*0x7900*/      bhs jump_78f4
/*0x7902*/      ldrb r1, [r0, #5]
/*0x7904*/      movs r2, #4
/*0x7906*/      add.w r1, r2, r1, lsl #3
/*0x790a*/      uxtb r1, r1
/*0x790c*/      .short 0x1d00 /* adds r0, r0, #4 */
/*0x790e*/      b jump_7416
            jump_7910:
/*0x7910*/      b jump_7a02
            jump_7912:
/*0x7912*/      ldrh r0, [r4, #2]
/*0x7914*/      cmp r0, #0xf
/*0x7916*/      bhs jump_7a04
/*0x7918*/      cmp r0, #0xe
/*0x791a*/      beq jump_7932
/*0x791c*/      movs r1, #4
            jump_791e:
/*0x791e*/      movs r2, #3
/*0x7920*/      lsls r2, r1
/*0x7922*/      uxtb r1, r2
/*0x7924*/      add.w r2, r0, r0, lsl #1
/*0x7928*/      add.w r0, fp, r2, lsl #3
/*0x792c*/      addw r0, r0, #0x447
/*0x7930*/      b jump_7416
            jump_7932:
/*0x7932*/      movs r1, #3
/*0x7934*/      b jump_791e
            jump_7936:
/*0x7936*/      lsls r0, r7, #0x1e
/*0x7938*/      bmi jump_793e
/*0x793a*/      lsls r0, r5, #0x1d
/*0x793c*/      bpl jump_7a04
            jump_793e:
/*0x793e*/      bl call_7a68
/*0x7942*/      cbnz r0, jump_7994
/*0x7944*/      ldr r5, [pc, #0xc0] /* data_7a08 */
/*0x7946*/      ldrb r0, [r5, #1]
/*0x7948*/      cbz r0, jump_7958
/*0x794a*/      cmp r0, #1
/*0x794c*/      beq jump_7978
/*0x794e*/      cmp r0, #2
/*0x7950*/      beq jump_7996
/*0x7952*/      cmp r0, #0xf0
/*0x7954*/      bne jump_7a04
/*0x7956*/      b jump_79c4
            jump_7958:
/*0x7958*/      ldr r7, [pc, #0xb4] /* data_7a10 */
/*0x795a*/      movs r4, #0
            jump_795c:
/*0x795c*/      adds r0, r5, r4
/*0x795e*/      movs r1, #0x78
/*0x7960*/      ldrb r2, [r0, #4]
/*0x7962*/      rsb r0, r4, r4, lsl #4
/*0x7966*/      add.w r0, r7, r0, lsl #3
/*0x796a*/      bl _memset
/*0x796e*/      .short 0x1c64 /* adds r4, r4, #1 */
/*0x7970*/      uxtb r4, r4
/*0x7972*/      cmp r4, #3
/*0x7974*/      blo jump_795c
/*0x7976*/      b jump_79e8
            jump_7978:
/*0x7978*/      ldrb r4, [r5, #2]
/*0x797a*/      b jump_7988
            jump_797c:
/*0x797c*/      ldrb r0, [r5]
/*0x797e*/      cmp r0, #0x78
/*0x7980*/      bhs jump_7988
/*0x7982*/      adds r1, r5, #1
/*0x7984*/      bl call_3ef4
            jump_7988:
/*0x7988*/      .short 0x1d2d /* adds r5, r5, #4 */
/*0x798a*/      .short 0x1e64 /* subs r4, r4, #1 */
/*0x798c*/      uxtb r4, r4
/*0x798e*/      bhs jump_797c
/*0x7990*/      b jump_79e8
            jump_7992:
/*0x7992*/      b jump_79fe
            jump_7994:
/*0x7994*/      b jump_79fc
            jump_7996:
/*0x7996*/      ldrh r0, [r5, #2]
/*0x7998*/      cmp r0, #0xf
/*0x799a*/      bhs jump_7a04
/*0x799c*/      cmp r0, #0xe
/*0x799e*/      beq jump_79aa
/*0x79a0*/      movs r4, #0x10
            jump_79a2:
/*0x79a2*/      lsls r0, r0, #0x1b
/*0x79a4*/      lsrs r7, r0, #0x18
/*0x79a6*/      .short 0x1d2d /* adds r5, r5, #4 */
/*0x79a8*/      b jump_79bc
            jump_79aa:
/*0x79aa*/      movs r4, #8
/*0x79ac*/      b jump_79a2
            jump_79ae:
/*0x79ae*/      mov r0, r7
/*0x79b0*/      .short 0x1c7f /* adds r7, r7, #1 */
/*0x79b2*/      uxtb r7, r7
/*0x79b4*/      mov r1, r5
/*0x79b6*/      bl call_3ef4
/*0x79ba*/      .short 0x1ced /* adds r5, r5, #3 */
            jump_79bc:
/*0x79bc*/      .short 0x1e64 /* subs r4, r4, #1 */
/*0x79be*/      uxtb r4, r4
/*0x79c0*/      bhs jump_79ae
/*0x79c2*/      b jump_79e8
            jump_79c4:
/*0x79c4*/      ldr.w r1, [r8]
/*0x79c8*/      orr r1, r1, #0x10000000
/*0x79cc*/      str.w r1, [r8]
/*0x79d0*/      ldrb r0, [r5, #4]
/*0x79d2*/      cmp r0, #0
/*0x79d4*/      ldrb.w r0, [r6, #0x4e]
/*0x79d8*/      beq jump_79e0
/*0x79da*/      orr r0, r0, #1
/*0x79de*/      b jump_79e4
            jump_79e0:
/*0x79e0*/      bic r0, r0, #1
            jump_79e4:
/*0x79e4*/      strb.w r0, [r6, #0x4e]
            jump_79e8:
/*0x79e8*/      ldrb.w r0, [r6, #0x4e]
/*0x79ec*/      lsls r0, r0, #0x1f
/*0x79ee*/      beq jump_79fc
/*0x79f0*/      ldr.w r1, [r8]
/*0x79f4*/      orr r1, r1, #0x10000000
            jump_79f8:
/*0x79f8*/      str.w r1, [r8]
            jump_79fc:
/*0x79fc*/      movs r0, #1
            jump_79fe:
/*0x79fe*/      pop.w {r1, r2, r3, r4, r5, r6, r7, r8, sb, sl, fp, pc}
            jump_7a02:
/*0x7a02*/      b jump_7a04
            jump_7a04:
/*0x7a04*/      movs r0, #0
/*0x7a06*/      b jump_79fe

            data_7a08:
/*0x7a08*/  .word 0x20000ad0
            data_7a0c:
/*0x7a0c*/  .word 0x20000c92
            data_7a10:
/*0x7a10*/  .word 0x200000df

            jump_7a14:
/*0x7a14*/      ldr r0, [pc, #0x18] /* data_7a30 */
/*0x7a16*/      push {r3, lr}
/*0x7a18*/      ldrb r0, [r0, #1]
/*0x7a1a*/      cmp r0, #0x60
/*0x7a1c*/      mov.w r0, #0
/*0x7a20*/      bne jump_7a2e
/*0x7a22*/      str r0, [sp]
/*0x7a24*/      movs r1, #4
/*0x7a26*/      mov r0, sp
/*0x7a28*/      bl call_6998
/*0x7a2c*/      movs r0, #1
            jump_7a2e:
/*0x7a2e*/      pop {r3, pc}

            data_7a30:
/*0x7a30*/  .word 0x20000ad0


            .thumb_func
            call_7a34:
/*0x7a34*/      ldr r2, [pc, #0x28] /* data_7a60 */
/*0x7a36*/      ldr r1, [pc, #0x2c] /* data_7a64 */
/*0x7a38*/      ldrb.w r0, [r2, #0x2d]
/*0x7a3c*/      lsls r3, r0, #0x1f
/*0x7a3e*/      ldr r0, [r1, #4]
/*0x7a40*/      beq jump_7a48
/*0x7a42*/      orr r0, r0, #1
/*0x7a46*/      b jump_7a4c
            jump_7a48:
/*0x7a48*/      bic r0, r0, #1
            jump_7a4c:
/*0x7a4c*/      str r0, [r1, #4]
/*0x7a4e*/      ldrb r0, [r2, #0x2a]!
/*0x7a52*/      strb r0, [r1, #9]
/*0x7a54*/      ldrb r0, [r2, #1]
/*0x7a56*/      strb r0, [r1, #0xa]
/*0x7a58*/      ldrb r0, [r2, #2]
/*0x7a5a*/      strb r0, [r1, #0xb]
/*0x7a5c*/      bx lr

/*0x7a5e*/  .byte 0x00
/*0x7a5f*/  .byte 0x00

            data_7a60:
/*0x7a60*/  .word 0x20000d34
            data_7a64:
/*0x7a64*/  .word 0x20000ad0


            .thumb_func
            call_7a68:
/*0x7a68*/      ldr r1, [pc, #0x24] /* data_7a90 */
/*0x7a6a*/      ldrb r0, [r1]
/*0x7a6c*/      tst.w r0, #0xe
/*0x7a70*/      bne jump_7a8c
/*0x7a72*/      ldr r1, [r1]
/*0x7a74*/      lsls r1, r1, #2
/*0x7a76*/      bmi jump_7a8c
/*0x7a78*/      lsls r1, r0, #0x1f
/*0x7a7a*/      bne jump_7a8c
/*0x7a7c*/      lsls r0, r0, #0x1b
/*0x7a7e*/      bmi jump_7a8c
/*0x7a80*/      ldr r0, [pc, #0x10] /* data_7a94 */
/*0x7a82*/      ldrb r0, [r0, #2]
/*0x7a84*/      cmp r0, #1
/*0x7a86*/      beq jump_7a8c
/*0x7a88*/      movs r0, #0
/*0x7a8a*/      bx lr
            jump_7a8c:
/*0x7a8c*/      movs r0, #1
/*0x7a8e*/      bx lr

            data_7a90:
/*0x7a90*/  .word 0x20000050
            data_7a94:
/*0x7a94*/  .word 0x2000006c

            jump_7a98:
/*0x7a98*/      push {r4, r5, r6, lr}
/*0x7a9a*/      ldr r5, [pc, #0x80] /* data_7b1c */
/*0x7a9c*/      ldrb r0, [r5, #2]
/*0x7a9e*/      bl call_532c
/*0x7aa2*/      mov r4, r0
/*0x7aa4*/      ldr r6, [pc, #0x78] /* data_7b20 */
/*0x7aa6*/      ands r0, r0, #0xff
/*0x7aaa*/      beq jump_7abc
/*0x7aac*/      cmp r0, #1
/*0x7aae*/      beq jump_7aca
/*0x7ab0*/      cmp r0, #2
/*0x7ab2*/      beq jump_7ad8
/*0x7ab4*/      cmp r0, #4
/*0x7ab6*/      beq jump_7af2
/*0x7ab8*/      movs r0, #0
/*0x7aba*/      pop {r4, r5, r6, pc}
            jump_7abc:
/*0x7abc*/      movs r1, #0x20
/*0x7abe*/      adds r0, r5, #4
/*0x7ac0*/      bl _memzero
/*0x7ac4*/      ldr r0, [r6]
/*0x7ac6*/      str r0, [r5, #4]
/*0x7ac8*/      b jump_7b0e
            jump_7aca:
/*0x7aca*/      ldr r1, [pc, #0x58] /* data_7b24 */
/*0x7acc*/      ubfx r0, r4, #8, #8
/*0x7ad0*/      add.w r0, r1, r0, lsl #5
/*0x7ad4*/      movs r1, #0x20
/*0x7ad6*/      b jump_7b12
            jump_7ad8:
/*0x7ad8*/      movs r1, #0x20
/*0x7ada*/      adds r0, r5, #4
/*0x7adc*/      bl _memzero
/*0x7ae0*/      ldr r0, [r6, #0x12]!
/*0x7ae4*/      str r0, [r5, #4]
/*0x7ae6*/      ldr r0, [r6, #4]
/*0x7ae8*/      str r0, [r5, #8]
/*0x7aea*/      lsrs r0, r4, #8
/*0x7aec*/      adds r0, #0x31
/*0x7aee*/      strb r0, [r5, #0xc]
/*0x7af0*/      b jump_7b0e
            jump_7af2:
/*0x7af2*/      movs r1, #0x20
/*0x7af4*/      adds r0, r5, #4
/*0x7af6*/      bl _memzero
/*0x7afa*/      ldr r0, [r6, #0xb]!
/*0x7afe*/      str r0, [r5, #4]
/*0x7b00*/      ldrh r0, [r6, #4]
/*0x7b02*/      strh r0, [r5, #8]
/*0x7b04*/      ldrb r0, [r6, #6]
/*0x7b06*/      strb r0, [r5, #0xa]
/*0x7b08*/      lsrs r0, r4, #8
/*0x7b0a*/      adds r0, #0x31
/*0x7b0c*/      strb r0, [r5, #0xb]
            jump_7b0e:
/*0x7b0e*/      movs r1, #0x20
/*0x7b10*/      adds r0, r5, #4
            jump_7b12:
/*0x7b12*/      bl call_6998
/*0x7b16*/      movs r0, #1
/*0x7b18*/      pop {r4, r5, r6, pc}

/*0x7b1a*/  .byte 0x00
/*0x7b1b*/  .byte 0x00

            data_7b1c:
/*0x7b1c*/  .word 0x20000ad0
            data_7b20:
/*0x7b20*/  .word 0x00009c9c /* possible pointer */
            data_7b24:
/*0x7b24*/  .word 0x0000a054 /* possible pointer */

            jump_7b28:
/*0x7b28*/      push {r4, r5, r6, lr}
/*0x7b2a*/      ldr r4, [pc, #0x30] /* data_7b5c */
/*0x7b2c*/      ldr r5, [pc, #0x30] /* data_7b60 */
/*0x7b2e*/      cbnz r0, jump_7b46
/*0x7b30*/      ldrb r0, [r4, #4]
/*0x7b32*/      bl call_532c
/*0x7b36*/      uxtb r0, r0
/*0x7b38*/      cmp r0, #5
/*0x7b3a*/      beq jump_7b58
/*0x7b3c*/      ldrb r0, [r4, #4]
/*0x7b3e*/      strb.w r0, [r5, #0x2e]
/*0x7b42*/      bl call_5220
            jump_7b46:
/*0x7b46*/      ldrb.w r1, [r5, #0x2e]
/*0x7b4a*/      strb r1, [r4, #4]
/*0x7b4c*/      movs r1, #2
/*0x7b4e*/      adds r0, r4, #4
/*0x7b50*/      bl call_6998
/*0x7b54*/      movs r0, #1
/*0x7b56*/      pop {r4, r5, r6, pc}
            jump_7b58:
/*0x7b58*/      movs r0, #0
/*0x7b5a*/      pop {r4, r5, r6, pc}

            data_7b5c:
/*0x7b5c*/  .word 0x20000ad0
            data_7b60:
/*0x7b60*/  .word 0x20000d34

            jump_7b64:
/*0x7b64*/      push.w {r4, r5, r6, r7, r8, sb, sl, lr}
/*0x7b68*/      ldr r1, [pc, #0x9c] /* data_7c08 */
/*0x7b6a*/      mov r8, r0
/*0x7b6c*/      ldrh r0, [r1, #2]
/*0x7b6e*/      cmp r0, #4
/*0x7b70*/      bls jump_7b78
/*0x7b72*/      movs r0, #0
            jump_7b74:
/*0x7b74*/      pop.w {r4, r5, r6, r7, r8, sb, sl, pc}
            jump_7b78:
/*0x7b78*/      mov sb, r1
/*0x7b7a*/      adds r4, r1, #4
/*0x7b7c*/      movs r1, #0x73
/*0x7b7e*/      muls r0, r1, r0
/*0x7b80*/      ldr r1, [pc, #0x88] /* data_7c0c */
/*0x7b82*/      movs r6, #0
/*0x7b84*/      add.w r7, r1, r0, lsl #1
/*0x7b88*/      movs r5, #5
/*0x7b8a*/      adds r7, #0x41
/*0x7b8c*/      b jump_7bd4
            jump_7b8e:
/*0x7b8e*/      ldrb r0, [r4]
/*0x7b90*/      cmp r0, #0xb
/*0x7b92*/      beq jump_7ba0
/*0x7b94*/      cmp r0, #0xfe
/*0x7b96*/      beq jump_7ba0
/*0x7b98*/      cmp r0, #0xff
/*0x7b9a*/      beq jump_7ba0
/*0x7b9c*/      cmp r0, #0xa
/*0x7b9e*/      blo jump_7bac
            jump_7ba0:
/*0x7ba0*/      movs r2, #0xff
/*0x7ba2*/      movs r1, #0xc
/*0x7ba4*/      mov r0, r4
/*0x7ba6*/      bl _memset
/*0x7baa*/      b jump_7bd2
            jump_7bac:
/*0x7bac*/      add.w r1, r0, r0, lsl #1
/*0x7bb0*/      add.w r0, r1, r0, lsl #3
/*0x7bb4*/      add r0, r7
/*0x7bb6*/      cmp.w r8, #0
/*0x7bba*/      beq jump_7bee
/*0x7bbc*/      ldr r1, [r0]
/*0x7bbe*/      str.w r1, [r4, #1]
/*0x7bc2*/      ldr r1, [r0, #4]
/*0x7bc4*/      str.w r1, [r4, #5]
/*0x7bc8*/      ldrh r1, [r0, #8]
/*0x7bca*/      strh.w r1, [r4, #9]
/*0x7bce*/      ldrb r0, [r0, #0xa]
/*0x7bd0*/      strb r0, [r4, #0xb]
            jump_7bd2:
/*0x7bd2*/      adds r4, #0xc
            jump_7bd4:
/*0x7bd4*/      .short 0x1e6d /* subs r5, r5, #1 */
/*0x7bd6*/      uxtb r5, r5
/*0x7bd8*/      bhs jump_7b8e
/*0x7bda*/      cbz r6, jump_7be0
/*0x7bdc*/      bl call_5220
            jump_7be0:
/*0x7be0*/      movs r1, #0x3c
/*0x7be2*/      add.w r0, sb, #4
/*0x7be6*/      bl call_6998
/*0x7bea*/      movs r0, #1
/*0x7bec*/      b jump_7b74
            jump_7bee:
/*0x7bee*/      ldr.w r1, [r4, #1]
/*0x7bf2*/      str r1, [r0]
/*0x7bf4*/      ldr.w r1, [r4, #5]
/*0x7bf8*/      str r1, [r0, #4]
/*0x7bfa*/      ldrh.w r1, [r4, #9]
/*0x7bfe*/      strh r1, [r0, #8]
/*0x7c00*/      ldrb r1, [r4, #0xb]
/*0x7c02*/      strb r1, [r0, #0xa]
/*0x7c04*/      movs r6, #1
/*0x7c06*/      b jump_7bd2

            data_7c08:
/*0x7c08*/  .word 0x20000ad0
            data_7c0c:
/*0x7c0c*/  .word 0x20000d34


            .thumb_func
            call_7c10:
/*0x7c10*/      ldr r1, [pc, #0x20] /* data_7c34 */
/*0x7c12*/      ldr r0, [pc, #0x24] /* data_7c38 */
/*0x7c14*/      ldrb r2, [r1, #4]
/*0x7c16*/      ldrb r3, [r0, #0x2d]!
/*0x7c1a*/      bfi r3, r2, #0, #1
/*0x7c1e*/      strb r3, [r0], #-3
/*0x7c22*/      ldrb r2, [r1, #9]
/*0x7c24*/      strb r2, [r0]
/*0x7c26*/      ldrb r2, [r1, #0xa]
/*0x7c28*/      strb r2, [r0, #1]
/*0x7c2a*/      ldrb r1, [r1, #0xb]
/*0x7c2c*/      strb r1, [r0, #2]
/*0x7c2e*/      b.w call_4c28

/*0x7c32*/  .byte 0x00
/*0x7c33*/  .byte 0x00

            data_7c34:
/*0x7c34*/  .word 0x20000ad0
            data_7c38:
/*0x7c38*/  .word 0x20000d34

            .thumb_func
            loc_7c3c:
/*0x7c3c*/      push.w {r4, r5, r6, r7, r8, lr}
/*0x7c40*/      ldr r4, [pc, #0x54] /* data_7c98 */
/*0x7c42*/      movs r5, #0
/*0x7c44*/      ldrb r0, [r4, #1]
/*0x7c46*/      cbz r0, jump_7c60
/*0x7c48*/      ldr r0, [r4, #0xc]
/*0x7c4a*/      cmp r0, #1
/*0x7c4c*/      bne jump_7c5c
/*0x7c4e*/      str r5, [r4, #0xc]
/*0x7c50*/      movs r2, #8
/*0x7c52*/      add.w r1, r4, #0x20
/*0x7c56*/      bl usb_write_ep_in_buffer
/*0x7c5a*/      strb r5, [r4, #1]
            jump_7c5c:
/*0x7c5c*/      pop.w {r4, r5, r6, r7, r8, pc}
            jump_7c60:
/*0x7c60*/      ldr r6, [pc, #0x38] /* data_7c9c */
/*0x7c62*/      ldr r0, [r6]
/*0x7c64*/      cmp r0, #0
/*0x7c66*/      bne jump_7c5c
/*0x7c68*/      add.w r7, r6, #0xc
/*0x7c6c*/      ldr r0, [r7]
/*0x7c6e*/      cmp r0, #0
/*0x7c70*/      beq jump_7c5c
/*0x7c72*/      ldr r0, [r4, #0xc]
/*0x7c74*/      cmp r0, #1
/*0x7c76*/      bne jump_7c5c
/*0x7c78*/      str r5, [r4, #0xc]
/*0x7c7a*/      ldr r1, [pc, #0x1c] /* data_7c98 */
/*0x7c7c*/      movs r2, #8
/*0x7c7e*/      adds r1, #0x20
/*0x7c80*/      bl usb_write_ep_in_buffer
/*0x7c84*/      ldr r0, [r7]
/*0x7c86*/      mov.w r1, #0xfa0
/*0x7c8a*/      muls r0, r1, r0
/*0x7c8c*/      asrs r1, r1, #3
/*0x7c8e*/      udiv r0, r0, r1
/*0x7c92*/      str r0, [r6]
/*0x7c94*/      b jump_7c5c

/*0x7c96*/  .byte 0x00
/*0x7c97*/  .byte 0x00

            data_7c98:
/*0x7c98*/  .word 0x20000018
            data_7c9c:
/*0x7c9c*/  .word 0x200009ac


            .thumb_func
            call_7ca0:
/*0x7ca0*/      push {r4, r5, r6, lr}
/*0x7ca2*/      ldr r4, [pc, #0x58] /* data_7cfc */
/*0x7ca4*/      movs r5, #0
/*0x7ca6*/      ldrb r0, [r4, #3]
/*0x7ca8*/      cbz r0, jump_7cc2
/*0x7caa*/      ldr r0, [r4, #0x10]
/*0x7cac*/      cmp r0, #1
/*0x7cae*/      bne jump_7cc0
/*0x7cb0*/      str r5, [r4, #0x10]
/*0x7cb2*/      movs r2, #5
/*0x7cb4*/      add.w r1, r4, #0x18
/*0x7cb8*/      movs r0, #2
/*0x7cba*/      bl usb_write_ep_in_buffer
/*0x7cbe*/      strb r5, [r4, #3]
            jump_7cc0:
/*0x7cc0*/      pop {r4, r5, r6, pc}
            jump_7cc2:
/*0x7cc2*/      ldrb r0, [r4, #2]
/*0x7cc4*/      cbz r0, jump_7cde
/*0x7cc6*/      ldr r0, [r4, #0x10]
/*0x7cc8*/      cmp r0, #1
/*0x7cca*/      bne jump_7cc0
/*0x7ccc*/      str r5, [r4, #0x10]
/*0x7cce*/      ldr r1, [pc, #0x2c] /* data_7cfc */
/*0x7cd0*/      movs r2, #2
/*0x7cd2*/      .short 0x1d09 /* adds r1, r1, #4 */
/*0x7cd4*/      mov r0, r2
/*0x7cd6*/      bl usb_write_ep_in_buffer
/*0x7cda*/      strb r5, [r4, #2]
            jump_7cdc:
/*0x7cdc*/      pop {r4, r5, r6, pc}
            jump_7cde:
/*0x7cde*/      ldrb r0, [r4]
/*0x7ce0*/      cmp r0, #0
/*0x7ce2*/      beq jump_7cdc
/*0x7ce4*/      ldr r0, [r4, #0x10]
/*0x7ce6*/      cmp r0, #1
/*0x7ce8*/      bne jump_7cdc
/*0x7cea*/      str r5, [r4, #0x10]
/*0x7cec*/      movs r2, #0x1f
/*0x7cee*/      ldr r1, [pc, #0x10] /* data_7d00 */
/*0x7cf0*/      movs r0, #2
/*0x7cf2*/      bl usb_write_ep_in_buffer
/*0x7cf6*/      strb r5, [r4]
/*0x7cf8*/      pop {r4, r5, r6, pc}

/*0x7cfa*/  .byte 0x00
/*0x7cfb*/  .byte 0x00

            data_7cfc:
/*0x7cfc*/  .word 0x20000018
            data_7d00:
/*0x7d00*/  .word 0x200009d0


            .thumb_func
            loc_7d04:
/*0x7d04*/      ldr r1, [pc, #4] /* data_7d0c */
/*0x7d06*/      movs r0, #1
/*0x7d08*/      str r0, [r1, #0xc]
/*0x7d0a*/      bx lr

            data_7d0c:
/*0x7d0c*/  .word 0x20000018


            .thumb_func
            loc_7d10:
/*0x7d10*/      ldr r1, [pc, #4] /* data_7d18 */
/*0x7d12*/      movs r0, #1
/*0x7d14*/      str r0, [r1, #0x10]
/*0x7d16*/      bx lr

            data_7d18:
/*0x7d18*/  .word 0x20000018


            .thumb_func
            loc_7d1c:
/*0x7d1c*/      push {r4, lr}
/*0x7d1e*/      ldr r4, [pc, #0x1c] /* data_7d3c */
/*0x7d20*/      ldrd r1, r0, [r4, #4]
/*0x7d24*/      add r1, r0
/*0x7d26*/      movs r2, #0x40
/*0x7d28*/      movs r0, #4
/*0x7d2a*/      bl call_83c0
/*0x7d2e*/      ldr r1, [r4, #4]
/*0x7d30*/      add r0, r1
/*0x7d32*/      ubfx r0, r0, #0, #0xa
/*0x7d36*/      str r0, [r4, #4]
/*0x7d38*/      pop {r4, pc}

/*0x7d3a*/  .byte 0x00
/*0x7d3b*/  .byte 0x00

            data_7d3c:
/*0x7d3c*/  .word 0x20000558

            jump_7d40:
/*0x7d40*/      push {r4, r5, r6, lr}
/*0x7d42*/      mov r4, r0
/*0x7d44*/      ldrb r2, [r0, #3]
/*0x7d46*/      ldrb r1, [r0, #2]
/*0x7d48*/      ldrh r5, [r0, #6]
/*0x7d4a*/      ldrh r0, [r0, #4]
/*0x7d4c*/      cmp r2, #1
/*0x7d4e*/      bne jump_7da6
/*0x7d50*/      cbz r0, jump_7d6a
/*0x7d52*/      cmp r0, #1
/*0x7d54*/      beq jump_7d6e
/*0x7d56*/      cmp r0, #2
/*0x7d58*/      bne jump_7da6
/*0x7d5a*/      cmp r1, #1
/*0x7d5c*/      beq jump_7d98
/*0x7d5e*/      cmp r1, #2
/*0x7d60*/      beq jump_7da8
/*0x7d62*/      cmp r1, #4
/*0x7d64*/      bne jump_7da6
/*0x7d66*/      ldr r0, [pc, #0x48] /* data_7db0 */
/*0x7d68*/      b jump_7d9c
            jump_7d6a:
/*0x7d6a*/      ldr r0, [pc, #0x48] /* data_7db4 */
/*0x7d6c*/      b jump_7d9c
            jump_7d6e:
/*0x7d6e*/      ldr r0, [pc, #0x48] /* data_7db8 */
/*0x7d70*/      bl loc_3a9e
/*0x7d74*/      cmp r0, #0
/*0x7d76*/      bne jump_7da6
/*0x7d78*/      movs r0, #0x43
/*0x7d7a*/      ldr r1, [pc, #0x3c] /* data_7db8 */
/*0x7d7c*/      movs r2, #0
/*0x7d7e*/      b jump_7d86
            jump_7d80:
/*0x7d80*/      ldr r3, [r1, #8]
/*0x7d82*/      strb r2, [r3, r0]
/*0x7d84*/      .short 0x1e40 /* subs r0, r0, #1 */
            jump_7d86:
/*0x7d86*/      ldr r3, [r1, #4]
/*0x7d88*/      cmp r3, r0
/*0x7d8a*/      bls jump_7d80
/*0x7d8c*/      ldr r0, [r1, #8]
/*0x7d8e*/      str r0, [r4, #0x1c]
/*0x7d90*/      ldr r0, [pc, #0x24] /* data_7db8 */
/*0x7d92*/      bl call_3a30
/*0x7d96*/      b jump_7d9e
            jump_7d98:
/*0x7d98*/      ldr r0, [pc, #0x18] /* data_7db4 */
/*0x7d9a*/      subs r0, #0x1c
            jump_7d9c:
/*0x7d9c*/      str r0, [r4, #0x1c]
            jump_7d9e:
/*0x7d9e*/      movs r0, #1
/*0x7da0*/      str r5, [r4, #0x20]
/*0x7da2*/      strb.w r0, [r4, #0x24]
            jump_7da6:
/*0x7da6*/      pop {r4, r5, r6, pc}
            jump_7da8:
/*0x7da8*/      ldr r0, [pc, #8] /* data_7db4 */
/*0x7daa*/      subs r0, #8
/*0x7dac*/      b jump_7d9c

/*0x7dae*/  .byte 0x00
/*0x7daf*/  .byte 0x00

            data_7db0:
/*0x7db0*/  .word 0x200009d0
            data_7db4:
/*0x7db4*/  .word 0x20000038
            data_7db8:
/*0x7db8*/  .word 0x20000548

            .thumb_func
            usb_init_class:
/*0x7dbc*/      ldr r1, [pc, #0x20] /* r1 = 0x00007dfd */
/*0x7dbe*/      str r1, [r0]        ; *(arg1) = r1
/*0x7dc0*/      ldr r1, [pc, #0x20] /* r1 = 0x00007ef5 */
/*0x7dc2*/      str r1, [r0, #8]    ; *(arg1+8) = r1
/*0x7dc4*/      ldr r1, [pc, #0x20] /* r1 = 0x00007f55 */
/*0x7dc6*/      str r1, [r0, #0x18] ; *(arg1+24) = r1
/*0x7dc8*/      ldr r1, [pc, #0x20] /* r1 = 0x00007e41 */
/*0x7dca*/      str r1, [r0, #0x24] ; *(arg1+36) = r1
/*0x7dcc*/      ldr r1, [pc, #0x20] /* r1 = 0x00007d05 */
/*0x7dce*/      str r1, [r0, #0x2c] ; *(arg1+44) = r1
/*0x7dd0*/      ldr r1, [pc, #0x20] /* r1 = 0x00007d11 */
/*0x7dd2*/      str r1, [r0, #0x30] ; *(arg1+48) = r1
/*0x7dd4*/      ldr r1, [pc, #0x20] /* r1 = 0x00007d1d */
/*0x7dd6*/      str r1, [r0, #0x38] ; *(arg1+56) = r1
/*0x7dd8*/      movs r0, #0         ; r0 = 0
/*0x7dda*/      b.w jump_7ef4

/*0x7dde*/  .byte 0x00
/*0x7ddf*/  .byte 0x00

            data_7de0:
/*0x7de0*/  .word loc_7dfc
            data_7de4:
/*0x7de4*/  .word loc_7ef4
            data_7de8:
/*0x7de8*/  .word loc_7f54
            data_7dec:
/*0x7dec*/  .word loc_7e40
            data_7df0:
/*0x7df0*/  .word loc_7d04
            data_7df4:
/*0x7df4*/  .word loc_7d10
            data_7df8:
/*0x7df8*/  .word loc_7d1c

            .thumb_func
            loc_7dfc:
/*0x7dfc*/      ldr r0, [pc, #0x34]     /* r0 = 0x200009c4 */
/*0x7dfe*/      push {r4, lr}
/*0x7e00*/      ldr r1, [r0]            ; r1 = *(0x200009c4)
/*0x7e02*/      cmp r1, #1
/*0x7e04*/      bne jump_7e16           ; r1 != 1 ? jump_7e16 : continue
/*0x7e06*/      movs r1, #0             ; r1 = 0
/*0x7e08*/      str r1, [r0]            ; *(0x200009c4) = 0
/*0x7e0a*/      ldr r0, [pc, #0x2c]     /* r0 = 0x20000018 */
/*0x7e0c*/      ldrb r0, [r0, #0x14]    ; r0 = (uint8_t)*(0x200009d8)
/*0x7e0e*/      and r0, r0, #7          ; r0 = r0 & 0b111
/*0x7e12*/      bl loc_65c8
            jump_7e16:
/*0x7e16*/      bl call_7c3c
/*0x7e1a*/      bl call_7ca0
/*0x7e1e*/      ldr r0, [pc, #0x1c] /* r0 = 0x20000558 */
/*0x7e20*/      bl loc_3a9e
/*0x7e24*/      cmp r0, #0
/*0x7e26*/      bne jump_7e30
/*0x7e28*/      pop.w {r4, lr}
/*0x7e2c*/      b.w loc_36d4
            jump_7e30:
/*0x7e30*/      pop {r4, pc}

/*0x7e32*/  .byte 0x00
/*0x7e33*/  .byte 0x00

            data_7e34:
/*0x7e34*/  .word 0x200009c4
            data_7e38:
/*0x7e38*/  .word 0x20000018
            data_7e3c:
/*0x7e3c*/  .word 0x20000558


            .thumb_func
            loc_7e40:
/*0x7e40*/      push {r4, r5, r6, r7}
/*0x7e42*/      ldrh r1, [r0]
/*0x7e44*/      mov.w r6, #0x100
/*0x7e48*/      movw r5, #0x921
/*0x7e4c*/      lsls r7, r6, #1
/*0x7e4e*/      ldr r4, [pc, #0x98] /* data_7ee8 */
/*0x7e50*/      movs r3, #1
/*0x7e52*/      subw r2, r1, #0x921
/*0x7e56*/      cmp r1, r5
/*0x7e58*/      beq jump_7e98
/*0x7e5a*/      bgt jump_7e72
/*0x7e5c*/      adds.w r1, r2, #0x780
/*0x7e60*/      beq jump_7e86
/*0x7e62*/      cmp r1, r6
/*0x7e64*/      beq jump_7e8c
/*0x7e66*/      cmp r1, r7
/*0x7e68*/      bne jump_7ec0
/*0x7e6a*/      ldr r1, [pc, #0x80] /* data_7eec */
/*0x7e6c*/      strd r1, r3, [r0, #0x1c]
/*0x7e70*/      b jump_7ee2
            jump_7e72:
/*0x7e72*/      movs r5, #0
/*0x7e74*/      cmp r2, r6
/*0x7e76*/      beq jump_7ec4
/*0x7e78*/      cmp r2, r7
/*0x7e7a*/      bne jump_7ec0
/*0x7e7c*/      ldr r2, [pc, #0x6c] /* data_7eec */
/*0x7e7e*/      ldrb r1, [r0, #2]
/*0x7e80*/      subs r2, #8
/*0x7e82*/      str r1, [r2, #8]
/*0x7e84*/      b jump_7ee0
            jump_7e86:
/*0x7e86*/      pop {r4, r5, r6, r7}
/*0x7e88*/      b.w jump_7d40
            jump_7e8c:
/*0x7e8c*/      ldrh r1, [r0, #4]
/*0x7e8e*/      cmp r1, #0
/*0x7e90*/      bne jump_7ec0
/*0x7e92*/      strd r4, r3, [r0, #0x1c]
/*0x7e96*/      b jump_7ee2
            jump_7e98:
/*0x7e98*/      ldrb r3, [r0, #3]
/*0x7e9a*/      ldrh r2, [r0, #6]
/*0x7e9c*/      ldrh r1, [r0, #4]
/*0x7e9e*/      str r2, [r0, #0x20]
/*0x7ea0*/      cmp r3, #2
/*0x7ea2*/      bne jump_7ec0
/*0x7ea4*/      cmp r1, #0
/*0x7ea6*/      bne jump_7ec0
/*0x7ea8*/      ldr r3, [pc, #0x40] /* data_7eec */
/*0x7eaa*/      adds r3, #0xc
/*0x7eac*/      str r3, [r0, #0x1c]
/*0x7eae*/      ldr r3, [pc, #0x40] /* data_7ef0 */
/*0x7eb0*/      strd r3, r1, [r0, #0x28]
/*0x7eb4*/      movs r1, #2
/*0x7eb6*/      strb.w r1, [r0, #0x24]
/*0x7eba*/      ldr r0, [pc, #0x2c] /* data_7ee8 */
/*0x7ebc*/      adds r0, #0x38
/*0x7ebe*/      str r2, [r0]
            jump_7ec0:
/*0x7ec0*/      pop {r4, r5, r6, r7}
/*0x7ec2*/      bx lr
            jump_7ec4:
/*0x7ec4*/      ldrh r2, [r0, #4]
/*0x7ec6*/      ldrb r1, [r0, #3]
/*0x7ec8*/      cmp r2, #0
/*0x7eca*/      bne jump_7ec0
/*0x7ecc*/      mov.w r2, #0xfa0
/*0x7ed0*/      str r1, [r4]
/*0x7ed2*/      muls r1, r2, r1
/*0x7ed4*/      asrs r2, r2, #3
/*0x7ed6*/      udiv r1, r1, r2
/*0x7eda*/      ldr r2, [pc, #0xc] /* data_7ee8 */
/*0x7edc*/      subs r2, #0xc
/*0x7ede*/      str r1, [r2]
            jump_7ee0:
/*0x7ee0*/      str r5, [r0, #0x20]
            jump_7ee2:
/*0x7ee2*/      strb.w r3, [r0, #0x24]
/*0x7ee6*/      b jump_7ec0

            data_7ee8:
/*0x7ee8*/  .word 0x200009b8
            data_7eec:
/*0x7eec*/  .word 0x20000020
            data_7ef0:
/*0x7ef0*/  .word 0x00007f45 /* possible pointer */

            jump_7ef4:
/*0x7ef4*/      ldr r0, [pc, #0x40] /* r0 = 0x20000018 */
/*0x7ef6*/      push {r4, lr}
/*0x7ef8*/      movs r3, #1         ; r3 = 1
/*0x7efa*/      str r3, [r0, #0xc]  ; *0x20000024 = 1
/*0x7efc*/      str r3, [r0, #0x10] ; *0x20000028 = 1
/*0x7efe*/      movs r1, #0         ; r1 = 0
/*0x7f00*/      add.w r2, r0, #0x20 ; r2 = 0x20000038
/*0x7f04*/      movs r0, #5         ; r0 = 5
/*0x7f06*/      strb r1, [r2]       ; *(uint8_t*)0x20000038 = 0
            jump_7f08:
/*0x7f08*/      adds r4, r2, r0     ; r4 = 0x20000038 + r0
/*0x7f0a*/      .short 0x1e40 /* subs r0, r0, #1 */ ; r0 = r0 - 1
/*0x7f0c*/      strb r1, [r4, #2]   ; *(uint8_t*)(r4+2) = 0
/*0x7f0e*/      bpl jump_7f08       ; r0 >= 0 ? jump_7f08 : continue
/*0x7f10*/      ldr r0, [pc, #0x24] /* r0 = 0x20000018 */
/*0x7f12*/      movs r2, #2         ; r2 = 2
/*0x7f14*/      .short 0x1d00 /* adds r0, r0, #4 */ ; r0 = 0x2000001c
/*0x7f16*/      strb r3, [r0]       ; *(uint8_t*)0x2000001c = 1
/*0x7f18*/      strb r1, [r0, #1]   ; *(uint8_t*)0x2000001d = 0
/*0x7f1a*/      adds r0, #0x14      ; r0 = 0x20000030
/*0x7f1c*/      strb r2, [r0]       ; *(uint8_t*)0x20000030 = 2
/*0x7f1e*/      ldr r2, [pc, #0x1c] /* r2 = 0x200009d0 */
/*0x7f20*/      str.w r1, [r0, #1]  ; *0x20000031 = 0
/*0x7f24*/      movs r0, #4         ; r0 = 4
/*0x7f26*/      strb r0, [r2]       ; *(uint8_t*)0x200009d0 = 4
/*0x7f28*/      movs r0, #0x1c      ; r0 = 0x1c
            jump_7f2a:
/*0x7f2a*/      adds r4, r2, r0     ; r4 = r2 + r0
/*0x7f2c*/      .short 0x1e40 /* subs r0, r0, #1 */ ; r0 = r0 - 1
/*0x7f2e*/      strb r1, [r4, #2]   ; *(r4+2) = 0
/*0x7f30*/      bpl jump_7f2a       ; r0 >= 0 ? jump_7f2a : continue
/*0x7f32*/      ldr r0, [pc, #0xc] /* r0 = 0x20000044 */
/*0x7f34*/      strb r3, [r0]       ; *(uint8_t*)0x20000044 = 1
/*0x7f36*/      pop {r4, pc}

            data_7f38:
/*0x7f38*/  .word 0x20000018
            data_7f3c:
/*0x7f3c*/  .word 0x200009d0
            data_7f40:
/*0x7f40*/  .word 0x20000044

            .thumb_func
            loc_7f44:
/*0x7f44*/      ldr r2, [pc, #8] /* data_7f50 */
/*0x7f46*/      movs r1, #1
/*0x7f48*/      str.w r1, [r2, r0, lsl #2]
/*0x7f4c*/      bx lr

/*0x7f4e*/  .byte 0x00
/*0x7f4f*/  .byte 0x00

            data_7f50:
/*0x7f50*/  .word 0x200009c4


            .thumb_func
            loc_7f54:
/*0x7f54*/      ldrb r2, [r0, #3]
/*0x7f56*/      ldrh r1, [r0, #4]
/*0x7f58*/      movs r3, #1
/*0x7f5a*/      cmp r2, #0x21
/*0x7f5c*/      beq jump_7f6e
/*0x7f5e*/      cmp r2, #0x22
/*0x7f60*/      bne jump_7fa6
/*0x7f62*/      cbz r1, jump_7f90
/*0x7f64*/      cmp r1, #1
/*0x7f66*/      beq jump_7f98
/*0x7f68*/      cmp r1, #2
/*0x7f6a*/      bne jump_7fa2
/*0x7f6c*/      b jump_7fa8
            jump_7f6e:
/*0x7f6e*/      cbz r1, jump_7f7a
/*0x7f70*/      cmp r1, #1
/*0x7f72*/      beq jump_7f80
/*0x7f74*/      cmp r1, #2
/*0x7f76*/      bne jump_7f86
/*0x7f78*/      b jump_7f8a
            jump_7f7a:
/*0x7f7a*/      ldr r1, [r0, #0xc]
/*0x7f7c*/      adds r1, #0x12
/*0x7f7e*/      b jump_7f84
            jump_7f80:
/*0x7f80*/      ldr r1, [r0, #0xc]
/*0x7f82*/      adds r1, #0x2b
            jump_7f84:
/*0x7f84*/      str r1, [r0, #0x1c]
            jump_7f86:
/*0x7f86*/      movs r1, #9
/*0x7f88*/      b jump_7fa0
            jump_7f8a:
/*0x7f8a*/      ldr r1, [r0, #0xc]
/*0x7f8c*/      adds r1, #0x4b
/*0x7f8e*/      b jump_7f84
            jump_7f90:
/*0x7f90*/      ldr r1, [pc, #0x20] /* data_7fb4 */
/*0x7f92*/      str r1, [r0, #0x1c]
/*0x7f94*/      movs r1, #0x40
/*0x7f96*/      b jump_7fa0
            jump_7f98:
/*0x7f98*/      ldr r1, [pc, #0x18] /* data_7fb4 */
/*0x7f9a*/      adds r1, #0x40
/*0x7f9c*/      str r1, [r0, #0x1c]
/*0x7f9e*/      movs r1, #0x22
            jump_7fa0:
/*0x7fa0*/      str r1, [r0, #0x20]
            jump_7fa2:
/*0x7fa2*/      strb.w r3, [r0, #0x24]
            jump_7fa6:
/*0x7fa6*/      bx lr
            jump_7fa8:
/*0x7fa8*/      ldr r1, [pc, #8] /* data_7fb4 */
/*0x7faa*/      adds r1, #0x64
/*0x7fac*/      str r1, [r0, #0x1c]
/*0x7fae*/      movs r1, #0x86
/*0x7fb0*/      b jump_7fa0

/*0x7fb2*/  .byte 0x00
/*0x7fb3*/  .byte 0x00

            data_7fb4:
/*0x7fb4*/  .word 0x00009abc /* possible pointer */

            .thumb_func
            call_7fb8:
/*0x7fb8*/      ldrb.w r0, [r0, #0x34]  ; r0 = *(uint8_t*)(arg1+0x34)
/*0x7fbc*/      ubfx r0, r0, #1, #1     ; r0 = r0[1]
/*0x7fc0*/      bx lr

            .thumb_func
            loc_7fc2:
/*0x7fc2*/      push.w {r4, r5, r6, r7, r8, lr}
/*0x7fc6*/      mov r4, r0              ; r4 = arg1 (0x200009fc)
/*0x7fc8*/      bl usb_get_intr_flags
/*0x7fcc*/      mov r5, r0
/*0x7fce*/      lsls r0, r0, #0x1e
/*0x7fd0*/      bpl jump_7fe0
/*0x7fd2*/      ldr r1, [r4, #0x4c]
/*0x7fd4*/      cbz r1, jump_7fda
/*0x7fd6*/      ldr r0, [r4, #0x50]
/*0x7fd8*/      blx r1
            jump_7fda:
/*0x7fda*/      movs r0, #2
                ; clear SOF interrupt flag
/*0x7fdc*/      bl usb_clear_intr_flags
            jump_7fe0:
/*0x7fe0*/      lsls r0, r5, #0x1b
/*0x7fe2*/      bpl jump_8004
/*0x7fe4*/      movs r0, #0x10
                ; clear Suspend interrupt flag
/*0x7fe6*/      bl usb_clear_intr_flags
/*0x7fea*/      ldrb.w r0, [r4, #0x32]
/*0x7fee*/      cmp r0, #2
/*0x7ff0*/      blo jump_8004
/*0x7ff2*/      bl usb_power_down
/*0x7ff6*/      ldrb.w r0, [r4, #0x32]
/*0x7ffa*/      strb.w r0, [r4, #0x33]
/*0x7ffe*/      movs r0, #3
/*0x8000*/      strb.w r0, [r4, #0x32]
            jump_8004:
/*0x8004*/      lsls r0, r5, #0x1d
/*0x8006*/      mov.w r6, #0
/*0x800a*/      bpl jump_804e
/*0x800c*/      subs r0, r6, #1
/*0x800e*/      ldr.w r7, [r4, #0x84]
/*0x8012*/      str r0, [r4, #0x20]!
/*0x8016*/      strb r6, [r4, #0x10]
/*0x8018*/      strb r6, [r4, #0x11]
/*0x801a*/      ldrb r0, [r4, #0x14]
/*0x801c*/      bic r0, r0, #2
/*0x8020*/      strb r0, [r4, #0x14]
/*0x8022*/      movs r0, #4
/*0x8024*/      strb r0, [r4, #0x12]
/*0x8026*/      str r6, [r4, #0x18]
/*0x8028*/      bl usb_reset
/*0x802c*/      bl usb_wake_up
/*0x8030*/      movs r0, #0
/*0x8032*/      ldr r1, [r4, #0x64]
/*0x8034*/      bl USBD_EPTInit
/*0x8038*/      ldr r0, [r7]
/*0x803a*/      bl usb_set_intr_enable
/*0x803e*/      ldr r1, [r4, #0x24]
/*0x8040*/      subs r4, #0x20
/*0x8042*/      cbz r1, jump_8048
/*0x8044*/      ldr r0, [r4, #0x48]
/*0x8046*/      blx r1
            jump_8048:
/*0x8048*/      movs r0, #4
                ; clear URSTIF interrupt flag
/*0x804a*/      bl usb_clear_intr_flags
            jump_804e:
/*0x804e*/      lsls r0, r5, #0x1c
/*0x8050*/      bpl jump_8064
/*0x8052*/      bl usb_wake_up
/*0x8056*/      ldrb.w r0, [r4, #0x33]
/*0x805a*/      strb.w r0, [r4, #0x32]
/*0x805e*/      movs r0, #8
                ; clear RSMIF interrupt flag
/*0x8060*/      bl usb_clear_intr_flags
            jump_8064:
/*0x8064*/      lsls r0, r5, #0x17
/*0x8066*/      mov.w r7, #0x100
/*0x806a*/      bpl jump_8162
/*0x806c*/      movs r0, #0
/*0x806e*/      bl usb_get_ep_intr_flags
/*0x8072*/      mov r5, r0
/*0x8074*/      lsls r0, r0, #0x16
/*0x8076*/      bpl jump_80be
/*0x8078*/      mov r0, r4
/*0x807a*/      bl USBD_ReadSETUPData
/*0x807e*/      strb.w r6, [r4, #0x24]
/*0x8082*/      str r6, [r4, #0x20]
/*0x8084*/      ldrb r0, [r4]
/*0x8086*/      ands r0, r0, #0x60
/*0x808a*/      beq jump_8092
/*0x808c*/      cmp r0, #0x20
/*0x808e*/      bne jump_80a2
/*0x8090*/      b jump_809a
            jump_8092:
/*0x8092*/      mov r0, r4
/*0x8094*/      bl call_9278
/*0x8098*/      b jump_80a2
            jump_809a:
/*0x809a*/      ldr r1, [r4, #0x60]
/*0x809c*/      mov r0, r4
/*0x809e*/      cbz r1, jump_80a2
/*0x80a0*/      blx r1
            jump_80a2:
/*0x80a2*/      ldrb.w r0, [r4, #0x24]
/*0x80a6*/      cmp r0, #1
/*0x80a8*/      beq jump_80da
/*0x80aa*/      cmp r0, #2
/*0x80ac*/      beq jump_80ec
/*0x80ae*/      movs r0, #0
/*0x80b0*/      bl usb_toggle_ep_stltx_status
            jump_80b4:
/*0x80b4*/      mov.w r1, #0x200
/*0x80b8*/      movs r0, #0
/*0x80ba*/      bl usb_clear_ep_intr_flags
            jump_80be:
/*0x80be*/      lsls r0, r5, #0x1e
/*0x80c0*/      bpl jump_8120
/*0x80c2*/      movs r1, #2
/*0x80c4*/      movs r0, #0
/*0x80c6*/      bl usb_clear_ep_intr_flags
/*0x80ca*/      ldr r0, [r4, #0x20]
/*0x80cc*/      .short 0x1c40 /* adds r0, r0, #1 */
/*0x80ce*/      beq jump_8120
/*0x80d0*/      ldrb.w r0, [r4, #0x24]
/*0x80d4*/      cmp r0, #2
/*0x80d6*/      beq jump_80f8
/*0x80d8*/      b jump_8120
            jump_80da:
/*0x80da*/      ldrh r0, [r4, #6]
/*0x80dc*/      ldr r1, [r4, #0x20]
/*0x80de*/      cmp r1, r0
/*0x80e0*/      ble jump_80e4
/*0x80e2*/      str r0, [r4, #0x20]
            jump_80e4:
/*0x80e4*/      mov r0, r4
/*0x80e6*/      bl call_9200
/*0x80ea*/      b jump_80b4
            jump_80ec:
/*0x80ec*/      movs r2, #0
/*0x80ee*/      mov r1, r2
/*0x80f0*/      mov r0, r2
/*0x80f2*/      bl usb_write_ep_in_buffer
/*0x80f6*/      b jump_80b4
            jump_80f8:
/*0x80f8*/      movs r2, #0x40
/*0x80fa*/      movs r0, #0
/*0x80fc*/      ldr r1, [r4, #0x1c]
/*0x80fe*/      bl call_83c0
/*0x8102*/      ldr r1, [r4, #0x1c]
/*0x8104*/      add r1, r0
/*0x8106*/      str r1, [r4, #0x1c]
/*0x8108*/      ldr r1, [r4, #0x20]
/*0x810a*/      subs r0, r1, r0
/*0x810c*/      str r0, [r4, #0x20]
/*0x810e*/      bne jump_8120
/*0x8110*/      movs r0, #1
/*0x8112*/      strb.w r0, [r4, #0x24]
/*0x8116*/      ldr r1, [r4, #0x28]
/*0x8118*/      cbz r1, jump_8120
/*0x811a*/      ldr r0, [r4, #0x2c]
/*0x811c*/      blx r1
/*0x811e*/      str r6, [r4, #0x28]
            jump_8120:
/*0x8120*/      lsls r0, r5, #0x1b
/*0x8122*/      bpl jump_8132
/*0x8124*/      mov r0, r4
/*0x8126*/      bl call_9200
/*0x812a*/      movs r1, #0x10
/*0x812c*/      movs r0, #0
/*0x812e*/      bl usb_clear_ep_intr_flags
            jump_8132:
/*0x8132*/      mov r0, r7
/*0x8134*/      bl usb_clear_intr_flags
/*0x8138*/      b jump_8162
            jump_813a:
/*0x813a*/      mov r0, r5
/*0x813c*/      bl usb_get_ep_intr_flags
/*0x8140*/      tst.w r0, #0x12
/*0x8144*/      beq jump_8162
/*0x8146*/      movs r1, #0x12
/*0x8148*/      mov r0, r5
/*0x814a*/      bl usb_clear_ep_intr_flags
/*0x814e*/      lsl.w r0, r7, r5
/*0x8152*/      bl usb_clear_intr_flags
/*0x8156*/      add.w r0, r4, r5, lsl #2
/*0x815a*/      ldr r1, [r0, #0x64]
/*0x815c*/      cbz r1, jump_8162
/*0x815e*/      mov r0, r5
/*0x8160*/      blx r1
            jump_8162:
/*0x8162*/      bl usb_get_intr_flags
/*0x8166*/      bl call_8478
/*0x816a*/      mov r5, r0
/*0x816c*/      .short 0x1c40 /* adds r0, r0, #1 */
/*0x816e*/      bne jump_813a
/*0x8170*/      pop.w {r4, r5, r6, r7, r8, pc}

            .thumb_func
            call_8174:
/*0x8174*/      ldr r1, [pc, #0x10]     /* r1 = 0x20000008 */
/*0x8176*/      str r0, [r1]            ; *0x20000008 = arg1
/*0x8178*/      movs r1, #2             ; r1 = 2
/*0x817a*/      strb.w r1, [r0, #0x32]  ; *(uint8_t*)(arg1+0x32) = 2
/*0x817e*/      ldr.w r0, [r0, #0x84]   ; r0 = *(arg1+0x84)
/*0x8182*/      b.w jump_84a8

/*0x8186*/  .byte 0x00
/*0x8187*/  .byte 0x00

            data_8188:
/*0x8188*/  .word 0x20000008


            .thumb_func
            call_818c:
/*0x818c*/      ldrb.w r0, [r0, #0x32]
/*0x8190*/      cmp r0, #3
/*0x8192*/      beq jump_8198
/*0x8194*/      movs r0, #0
/*0x8196*/      bx lr
            jump_8198:
/*0x8198*/      movs r0, #1
/*0x819a*/      bx lr

            .thumb_func
            call_819c:
/*0x819c*/      push {r4, lr}
/*0x819e*/      mov r4, r0
/*0x81a0*/      ldrb.w r0, [r0, #0x34]
/*0x81a4*/      and r1, r0, #1
/*0x81a8*/      ldr.w r0, [r4, #0x84]
/*0x81ac*/      bl call_84cc
/*0x81b0*/      ldrb.w r0, [r4, #0x32]
/*0x81b4*/      cmp r0, #3
/*0x81b6*/      bne jump_81c4
/*0x81b8*/      ldr.w r1, [r4, #0x88]
/*0x81bc*/      cbz r1, jump_81c4
/*0x81be*/      ldr.w r0, [r4, #0x8c]
/*0x81c2*/      blx r1
            jump_81c4:
/*0x81c4*/      ldr r1, [r4, #0x3c]
/*0x81c6*/      cmp r1, #0
/*0x81c8*/      beq jump_81da
/*0x81ca*/      ldrb.w r0, [r4, #0x32]
/*0x81ce*/      cmp r0, #6
/*0x81d0*/      bne jump_81da
/*0x81d2*/      ldr r0, [r4, #0x40]
/*0x81d4*/      pop.w {r4, lr}
/*0x81d8*/      bx r1
            jump_81da:
/*0x81da*/      pop {r4, pc}

            .thumb_func
            call_81dc:
/*0x81dc*/      push {r4, lr}
/*0x81de*/      bl usb_wake_up
/*0x81e2*/      pop.w {r4, lr}
/*0x81e6*/      b.w USBD_RemoteWakeup

/*0x81ea*/  .byte 0x00
/*0x81eb*/  .byte 0x00


            .thumb_func
            usb_get_desc:
/*0x81ec*/      ldr r1, [pc, #0x10] /* r1 = 0x00009c14 */ (usb_device_desc)
/*0x81ee*/      str r1, [r0]        ; *(arg1) = 0x00009c14
/*0x81f0*/      subs r1, #0x5c      ; r1 = 0x9bb8 (usb_config_desc)
/*0x81f2*/      str r1, [r0, #4]    ; *(arg1+4) = 0x00009bb8
/*0x81f4*/      adds r1, #0x70      ; r1 = 0x9c28
/*0x81f6*/      str r1, [r0, #8]    ; *(arg1+8) = 0x9c28 (usb_str0_desc)
/*0x81f8*/      movs r1, #3         ; r1 = 3
/*0x81fa*/      str r1, [r0, #0xc]  ; *(arg1+12) = 3
/*0x81fc*/      bx lr

/*0x81fe*/  .byte 0x00
/*0x81ff*/  .byte 0x00

            data_8200:
/*0x8200*/  .word usb_device_desc


            .thumb_func
            usb_clear_intr_flags:
/*0x8204*/      ldr r1, [pc, #4]    /* r1 = USB_BASE_820c */
/*0x8206*/      str r0, [r1, #8]    ; *(USB.USBISR) = arg1
/*0x8208*/      bx lr

/*0x820a*/  .byte 0x00
/*0x820b*/  .byte 0x00

            USB_BASE_820c:
/*0x820c*/  .word 0x400a8000


            .thumb_func
            call_8210:
/*0x8210*/      push {r4, lr}
/*0x8212*/      movs r1, #1         ; r1 = 1
/*0x8214*/      movs r0, #0x40      ; r0 = 0x40
                ; enable RTC clock
/*0x8216*/      bl call_ckcu_set_APBCCR1
/*0x821a*/      movs r1, #1         ; r1 = 1
/*0x821c*/      lsls r0, r1, #0xa   ; r0 = 0x400
                ; enable USB clock
/*0x821e*/      bl ckcu_set_AHBCCR
/*0x8222*/      movs r0, #2         ; r0 = 2
                ; set CK_USB to CK_PLL/3
/*0x8224*/      bl ckcu_set_usb_clk_prescaler
/*0x8228*/      ldr r1, [pc, #0x34]     /* r1 = 0x20000a8c */
/*0x822a*/      sub.w r0, r1, #0x90     ; r0 = 0x200009fc
/*0x822e*/      str r1, [r0, #0x84]!    ; *(0x20000a80) = r1; r0 += 0x84
/*0x8232*/      ldr r1, [pc, #0x30]     /* r1 = 0x00007155 */
/*0x8234*/      str r1, [r0, #4]        ; *(0x20000a84) = 0x00007155
/*0x8236*/      ldr r0, [pc, #0x28]     /* r0 = 0x20000a8c */
/*0x8238*/      subs r0, #0x88          ; (dst) r0 = 0x20000a04
/*0x823a*/      bl usb_get_desc
/*0x823e*/      ldr r0, [pc, #0x20] /* r0 = 0x20000a8c */
/*0x8240*/      subs r0, #0x54		; r0 = 0x20000a38
/*0x8242*/      bl usb_init_class
/*0x8246*/      ldr r0, [pc, #0x18] /* r0 = 0x20000a8c */
/*0x8248*/      subs r0, #0x90		; r0 = 0x200009fc
/*0x824a*/      bl call_8174
/*0x824e*/      ldr r1, [pc, #0x18] /* NVIC.ICTR_8268 */
/*0x8250*/      mov.w r0, #0x200000
/*0x8254*/      str.w r0, [r1, #0x100]
/*0x8258*/      pop.w {r4, lr}
/*0x825c*/      b.w usb_enable_dp_pull_up

            data_8260:
/*0x8260*/  .word 0x20000a8c
            data_8264:
/*0x8264*/  .word 0x00007155 /* possible pointer */
            NVIC.ICTR_8268:
/*0x8268*/  .word 0xe000e004


            .thumb_func
            usb_set_dp_wake_up:
/*0x826c*/      ldr r1, [pc, #0x14] /* r1 = USB_BASE_8284 */
/*0x826e*/      cmp r0, #1
/*0x8270*/      ldr r0, [r1]        ; r0 = *(USB.USBCSR)
/*0x8272*/      beq jump_827c       ; arg1 == 1 ? jump_827c : continue
/*0x8274*/      bic r0, r0, #0x800  ; r0 = r0 & ~0x800
            jump_8278:
/*0x8278*/      str r0, [r1]        ; *(USB.USBCSR) = r0
/*0x827a*/      bx lr
            jump_827c:
/*0x827c*/      orr r0, r0, #0x800  ; r0 = r0 | 0x800
/*0x8280*/      b jump_8278

/*0x8282*/  .byte 0x00
/*0x8283*/  .byte 0x00

            USB_BASE_8284:
/*0x8284*/  .word 0x400a8000


            .thumb_func
            usb_set_dp_pull_up:
/*0x8288*/      ldr r1, [pc, #0x14] /* r1 = USB_BASE_82a0 */
/*0x828a*/      cmp r0, #1
/*0x828c*/      ldr r0, [r1]        ; r0 = *(USB.USBCSR)
/*0x828e*/      beq jump_8298       ; arg1 == 1 ? jump_8298 : continue
/*0x8290*/      bic r0, r0, #0x400  ; r0 = r0 & ~0x400
            jump_8294:
/*0x8294*/      str r0, [r1]        ; *(USB.USBCSR) = r0
/*0x8296*/      bx lr
            jump_8298:
/*0x8298*/      orr r0, r0, #0x400  ; r0 = r0 | 0x400
/*0x829c*/      b jump_8294

/*0x829e*/  .byte 0x00
/*0x829f*/  .byte 0x00

            USB_BASE_82a0:
/*0x82a0*/  .word 0x400a8000


            .thumb_func
            usb_reset:
/*0x82a4*/      movs r1, #0     ; r1 = 0
/*0x82a6*/      movs r0, #0x20  ; r0 = 0x20 (USBRST)
/*0x82a8*/      movs r3, #1     ; r3 = 1 (do reset)
/*0x82aa*/      mov r2, r1      ; r2 = 0
/*0x82ac*/      b.w reset_peripherals

            .thumb_func
            usb_clear_ep_data_toggle_status:
/*0x82b0*/      push {r4, lr}
/*0x82b2*/      bl usb_compute_epcsr_addr ; r0 = USB.EPxCSR
/*0x82b6*/      ldr r1, [r0]    ; r1 = *(USB.EPxCSR)
/*0x82b8*/      and r1, r1, #9  ; r1 = r1 & 9
/*0x82bc*/      str r1, [r0]    ; *(USB.EPxCSR) = r1
/*0x82be*/      pop {r4, pc}

            .thumb_func
            usb_clear_ep_stall_status:
/*0x82c0*/      push {r4, lr}
/*0x82c2*/      bl usb_compute_epcsr_addr ; r0 = USB.EPxCSR
/*0x82c6*/      ldr r1, [r0]        ; r1 = *(USB.EPxCSR)
/*0x82c8*/      and r1, r1, #0x24   ; r1 = r1 & 0x24
                ; clear STALL status
/*0x82cc*/      str r1, [r0]        ; *(USB.EPxCSR) = r1
/*0x82ce*/      pop {r4, pc}

            .thumb_func
            usb_clear_ep_intr_flags:
/*0x82d0*/      push {r4, lr}
/*0x82d2*/      mov r4, r1          ; r4 = arg2
/*0x82d4*/      bl usb_compute_epcsr_addr ; r0 = USB.EPxCSR
/*0x82d8*/      str r4, [r0, #8]    ; *(USB.EPxISR) = arg2
/*0x82da*/      pop {r4, pc}

            .thumb_func
            USBD_EPTGetBuffer0Addr:
/*0x82dc*/      push {r4, lr}
/*0x82de*/      bl usb_compute_epcsr_addr ; r0 = USB.EPxCSR
/*0x82e2*/      ldr r0, [r0, #0x10]     ; r0 = *(USB.EPxCFGR)
/*0x82e4*/      ldr r1, [pc, #8]        /* r1 = EP_SRAM_BASE_82f0 */
/*0x82e6*/      ubfx r0, r0, #0, #0xa   ; r0 = r0[9:0] (EPBUFA)
/*0x82ea*/      add r0, r1              ; r0 = r0 + EP_SRAM_BASE
/*0x82ec*/      pop {r4, pc}

/*0x82ee*/  .byte 0x00
/*0x82ef*/  .byte 0x00

            EP_SRAM_BASE_82f0:
/*0x82f0*/  .word 0x400aa000


            .thumb_func
            USBD_EPTGetBuffer1Addr:
/*0x82f4*/      push {r4, r5, r6, lr}
/*0x82f6*/      mov r5, r0              ; r5 = arg1
/*0x82f8*/      bl usb_compute_epcsr_addr ; r0 = USB.EPxCSR
/*0x82fc*/      mov r4, r0              ; r4 = USB.EPxCSR
/*0x82fe*/      mov r0, r5              ; r0 = arg1
/*0x8300*/      bl usb_get_ep_len       ; r0 = EPxCFGR.EPLEN
/*0x8304*/      ldr r1, [r4, #0x10]     ; r1 = *(USB.EPxCFGR)
/*0x8306*/      ubfx r1, r1, #0, #0xa   ; r1 = r1[9:0] (EPBUFA)
/*0x830a*/      add r0, r1              ; r0 = EPLEN + EPBUFA (EP OUT buffer)
/*0x830c*/      ldr r1, [pc, #4]        /* r1 = EP_SRAM_BASE_8314 */
/*0x830e*/      add r0, r1              ; r0 = r0 + r1
/*0x8310*/      pop {r4, r5, r6, pc}

/*0x8312*/  .byte 0x00
/*0x8313*/  .byte 0x00

            EP_SRAM_BASE_8314:
/*0x8314*/  .word 0x400aa000


            .thumb_func
            usb_get_ep_len:
/*0x8318*/      push {r4, lr}
/*0x831a*/      bl usb_compute_epcsr_addr ; r0 = USB.EPxCSR
/*0x831e*/      ldr r0, [r0, #0x10]         ; r0 = *(USB.EPxCFGR)
/*0x8320*/      ubfx r0, r0, #0xa, #0xa     ; r0 = r0[19:10] (EP Buffer Length)
/*0x8324*/      pop {r4, pc}

            .thumb_func
            usb_get_ep_stall_status:
/*0x8326*/      push {r4, lr}
/*0x8328*/      bl usb_compute_epcsr_addr ; r0 = USB.EPxCSR
/*0x832c*/      ldr r1, [r0, #0x10]         ; r1 = *(USB.EPxCFGR)
/*0x832e*/      ldr r0, [r0]                ; r0 = *(USB.EPxCSR)
/*0x8330*/      lsls r1, r1, #3             ; r1 = r1 << 3
                ; jump if EPDIR is IN
/*0x8332*/      bpl jump_833a               ; r1 >= 0 ? jump_833a : continue
/*0x8334*/      ubfx r0, r0, #2, #1         ; r0 = r0[2] (STLTX)
/*0x8338*/      pop {r4, pc}
            jump_833a:
/*0x833a*/      ubfx r0, r0, #5, #1         ; r0 = r0[5] (STLRX)
/*0x833e*/      pop {r4, pc}

            .thumb_func
            usb_get_ep_intr_flags:
/*0x8340*/      push {r4, lr}
/*0x8342*/      bl usb_compute_epcsr_addr ; r0 = USB.EPxCSR
/*0x8346*/      ldr r1, [r0, #4]    ; r1 = *(USB.EPxIER)
/*0x8348*/      ldr r0, [r0, #8]    ; r0 = *(USB.EPxISR)
/*0x834a*/      ands r0, r1         ; r0 = r0 & r1
/*0x834c*/      pop {r4, pc}

            .thumb_func
            usb_get_ep_xfer_byte_count:
/*0x834e*/      push {r4, lr}
/*0x8350*/      mov r4, r1          ; r4 = arg2
/*0x8352*/      bl usb_compute_epcsr_addr ; r0 = USB.EPxCSR
/*0x8356*/      ldr r0, [r0, #0xc]  ; r0 = *(USB.EPxTCR)
/*0x8358*/      lsrs r0, r4         ; r0 = r0 >> arg2
/*0x835a*/      ubfx r0, r0, #0, #9 ; r0 = r0[8:0]
/*0x835e*/      pop {r4, pc}

            .thumb_func
            USBD_EPTInit:
/*0x8360*/      push {r4, r5, r6, lr}
/*0x8362*/      mov r4, r1          ; r4 = arg2
/*0x8364*/      mov r5, r0          ; r5 = arg1 (ep_num)
/*0x8366*/      bl usb_compute_epcsr_addr   ; r0 = USB.EPxCSR
/*0x836a*/      add.w r1, r4, r5, lsl #3    ; r1 = arg2 + (arg1*8)
/*0x836e*/      ldr r2, [r1, #4]    ; r2 = *(r1+4)
/*0x8370*/      str r2, [r0, #0x10] ; *(USB.EPxCFGR) = r2
/*0x8372*/      ldr r1, [r1, #8]    ; r1 = *(r1+8)
/*0x8374*/      str r1, [r0, #4]    ; *(USB.EPxIER) = r1
/*0x8376*/      mov.w r1, #-1       ; r1 = -1
/*0x837a*/      str r1, [r0, #8]    ; *(USB.EPxISR) = r1
/*0x837c*/      mov r0, r5          ; r0 = arg1
/*0x837e*/      pop.w {r4, r5, r6, lr}
/*0x8382*/      b.w USBD_EPTReset

            .thumb_func
            usb_read_ep_out_buffer:
/*0x8386*/      push.w {r4, r5, r6, r7, r8, lr}
/*0x838a*/      mov r6, r2          ; r6 = arg3
/*0x838c*/      mov r7, r1          ; r7 = arg2
/*0x838e*/      movs r5, r0         ; r5 = arg1 (ep_num)
/*0x8390*/      beq jump_83b6       ; arg1 == 0 ? jump_83b6 : continue
                ; get EPxTCR.TCNT0 (for ep_num > 0)
/*0x8392*/      movs r1, #0         ; r1 = 0
            jump_8394:
                ; get number of bytes received by endpoint ep_num
/*0x8394*/      bl usb_get_ep_xfer_byte_count r0 = RXCNT
/*0x8398*/      mov r4, r0          ; r4 = RXCNT
/*0x839a*/      cmp r0, r6
/*0x839c*/      bhi jump_83b0       ; RXCNT > arg3 ? jump_83b0 : continue
/*0x839e*/      mov r0, r5          ; r0 = arg1
/*0x83a0*/      cbz r5, jump_83ba   ; arg1 == 0 ? jump_83ba : continue
/*0x83a2*/      bl USBD_EPTGetBuffer0Addr
            jump_83a6:
/*0x83a6*/      adds r1, r4, #3
/*0x83a8*/      lsrs r2, r1, #2
/*0x83aa*/      mov r1, r7
/*0x83ac*/      bl copy_words_1
            jump_83b0:
/*0x83b0*/      mov r0, r4
/*0x83b2*/      pop.w {r4, r5, r6, r7, r8, pc}
            jump_83b6:
/*0x83b6*/      movs r1, #0x10      ; r1 = 0x10
                ; check EP0TCR.RXCNT
/*0x83b8*/      b jump_8394
            jump_83ba:
/*0x83ba*/      bl USBD_EPTGetBuffer1Addr
/*0x83be*/      b jump_83a6

            .thumb_func
            call_83c0:
/*0x83c0*/      push.w {r4, r5, r6, r7, r8, lr}
/*0x83c4*/      mov r5, r2
/*0x83c6*/      mov r6, r1
/*0x83c8*/      mov r7, r0
/*0x83ca*/      bl usb_compute_epcsr_addr
/*0x83ce*/      mov r4, r0
/*0x83d0*/      movs r0, #0
/*0x83d2*/      cbz r5, jump_83e4
/*0x83d4*/      mov r2, r5
/*0x83d6*/      mov r1, r6
/*0x83d8*/      mov r0, r7
/*0x83da*/      bl usb_read_ep_out_buffer
/*0x83de*/      cbnz r0, jump_83e4
/*0x83e0*/      cmp r5, #0
/*0x83e2*/      bne jump_83ec
            jump_83e4:
/*0x83e4*/      ldr r1, [r4]
/*0x83e6*/      and r1, r1, #0x10
/*0x83ea*/      str r1, [r4]
            jump_83ec:
/*0x83ec*/      pop.w {r4, r5, r6, r7, r8, pc}

            USBD_EPTReset:
/*0x83f0*/      push {r4, lr}
/*0x83f2*/      bl usb_compute_epcsr_addr
/*0x83f6*/      ldr r1, [r0]        ; r1 = *(USB.EPxCSR)
/*0x83f8*/      and r1, r1, #0x19   ; r1 = r1 & 0x19
/*0x83fc*/      str r1, [r0]        ; *(USB.EPxCSR) = r1
/*0x83fe*/      pop {r4, pc}

            .thumb_func
            usb_toggle_ep_stltx_status:
/*0x8400*/      push {r4, lr}
/*0x8402*/      bl usb_compute_epcsr_addr
/*0x8406*/      movs r1, #4     ; r1 = 4
/*0x8408*/      str r1, [r0]    ; *(USB.EPxCSR) = 4
/*0x840a*/      pop {r4, pc}

            .thumb_func
            usb_set_ep_stall_status:
/*0x840c*/      push {r4, lr}
/*0x840e*/      bl usb_compute_epcsr_addr
/*0x8412*/      movs r1, #0x40      ; r1 = 0x40
                ; clear IN Data Transmitted interrupt flag
/*0x8414*/      str r1, [r0, #8]    ; *(USB.EPxISR) = 0x40
/*0x8416*/      ldr r2, [r0]        ; r2 = *(USB.EPxCSR)
/*0x8418*/      movs r1, #0x24      ; r1 = 0x24
/*0x841a*/      bics r1, r2         ; r1 = r1 & ~r2
                ; set stall status (STLRX and STLTX)
/*0x841c*/      str r1, [r0]        ; *(USB.EPxCSR) = r1
/*0x841e*/      pop {r4, pc}

            .thumb_func
            usb_write_ep_in_buffer:
/*0x8420*/      push.w {r4, r5, r6, r7, r8, lr}
/*0x8424*/      mov r4, r2          ; r4 = arg3 (len)
/*0x8426*/      mov r8, r1          ; r8 = arg2 (src)
/*0x8428*/      mov r7, r0          ; r7 = arg1 (ep_num)
/*0x842a*/      bl usb_get_ep_len   ; r0 = USB.EPxCFGR.EPLEN (EPxLEN)
/*0x842e*/      mov r6, r0          ; r6 = USB.EPxCFGR.EPLEN (EPxLEN)
/*0x8430*/      mov r0, r7          ; r0 = arg1
/*0x8432*/      bl usb_compute_epcsr_addr ; r0 = USB.EPxCSR
/*0x8436*/      mov r5, r0          ; r5 = USB.EPxCSR
/*0x8438*/      movs r1, #0         ; r1 = 0
/*0x843a*/      mov r0, r7          ; r0 = arg1
/*0x843c*/      bl usb_get_ep_xfer_byte_count ; r0 = EPxTXCNT
/*0x8440*/      cmp r4, r6
/*0x8442*/      bhi jump_8446       ; arg3 > EPxLEN ? jump_8446 : continue
/*0x8444*/      cbz r0, jump_844c   ; EPxTXCNT == 0 ? jump_844c : continue
            jump_8446:
/*0x8446*/      movs r0, #0         ; r0 = 0
            jump_8448:
/*0x8448*/      pop.w {r4, r5, r6, r7, r8, pc}
            jump_844c:
/*0x844c*/      mov r0, r7          ; r0 = arg1
/*0x844e*/      bl USBD_EPTGetBuffer0Addr ; r0 = EPx_IN_buffer_address
/*0x8452*/      mov r1, r0          ; (dst) r1 = EPx_IN_buffer_address
                ; word align arg3 (byte length)
/*0x8454*/      adds r0, r4, #3     ; r0 = arg3 + 3
/*0x8456*/      lsrs r2, r0, #2     ; (w_len) r2 = r0 >> 2
/*0x8458*/      mov r0, r8          ; (src) r0 = arg2
/*0x845a*/      bl copy_words_1
/*0x845e*/      str r4, [r5, #0xc]  ; *(USB.EPxTCR) = arg3
/*0x8460*/      movs r0, #2         ; r0 = 2
/*0x8462*/      str r0, [r5]        ; *(USB.EPxCSR) = 2
/*0x8464*/      mov r0, r4          ; r0 = arg3
/*0x8466*/      b jump_8448

            .thumb_func
            usb_set_intr_enable:
/*0x8468*/      ldr r1, [pc, #8]    /* r1 = USB_BASE_8474 */
/*0x846a*/      ldr r2, [r1, #4]    ; r2 = *(USB.USBIER)
/*0x846c*/      orrs r2, r0         ; r2 = r2 | arg1
/*0x846e*/      str r2, [r1, #4]    ; *(USB.USBIER) = r2
/*0x8470*/      bx lr

/*0x8472*/  .byte 0x00
/*0x8473*/  .byte 0x00

            USB_BASE_8474:
/*0x8474*/  .word 0x400a8000


            .thumb_func
            call_8478:
/*0x8478*/      mov r3, r0          ; r3 = arg1
/*0x847a*/      movs r1, #7         ; r1 = 7
            jump_847c:
/*0x847c*/      add.w r2, r1, #8    ; r2 = r1 + 8
/*0x8480*/      lsr.w r0, r3, r2    ; r0 = arg1 >> r2
/*0x8484*/      lsls r2, r0, #0x1f  ; r2 = r0 << 0x1f
/*0x8486*/      beq jump_848c       ; r2 == 0 ? jump_848c : continue
/*0x8488*/      sxtb r0, r1         ; r0 = r1
/*0x848a*/      bx lr
            jump_848c:
/*0x848c*/      .short 0x1e49 /* subs r1, r1, #1 */ ; r1 = r1 - 1
/*0x848e*/      cmp r1, #0
/*0x8490*/      bgt jump_847c       ; r1 > 0 ? jump_847c : continue
/*0x8492*/      mov.w r0, #-1       ; r0 = -1
/*0x8496*/      bx lr

            .thumb_func
            usb_get_intr_flags:
/*0x8498*/      ldr r0, [pc, #8]    /* r0 = USB_BASE_84a4 */
/*0x849a*/      ldr r1, [r0, #4]    ; r1 = *(USB.USBIER)
/*0x849c*/      ldr r0, [r0, #8]    ; r0 = *(USB.USBISR)
/*0x849e*/      ands r0, r1         ; r0 = r0 & r1
/*0x84a0*/      bx lr

/*0x84a2*/  .byte 0x00
/*0x84a3*/  .byte 0x00

            USB_BASE_84a4:
/*0x84a4*/  .word 0x400a8000

            jump_84a8:
/*0x84a8*/      b.w jump_8544

            .thumb_func
            usb_power_down:
/*0x84ac*/      ldr r0, [pc, #8]    /* r0 = USB_BASE_84b8 */
/*0x84ae*/      ldr r1, [r0]        ; r1 = *(USB.USBCSR)
/*0x84b0*/      orr r1, r1, #0xc    ; r1 = r1 | 0xc
                ; enter usb low power mode
                ; enter usb power down mode
/*0x84b4*/      str r1, [r0]        ; *(USB.USBCSR) = r1
/*0x84b6*/      bx lr

            USB_BASE_84b8:
/*0x84b8*/  .word 0x400a8000


            .thumb_func
            usb_wake_up:
/*0x84bc*/      ldr r0, [pc, #8]    /* r0 = USB_BASE_84c8 */
/*0x84be*/      ldr r1, [r0]        ; r1 = *(USB.USBCSR)
/*0x84c0*/      and r1, r1, #0x400  ; r1 = r1 & 0x400
/*0x84c4*/      str r1, [r0]        ; *(USB.USBCSR) = r1
/*0x84c6*/      bx lr

            USB_BASE_84c8:
/*0x84c8*/  .word 0x400a8000


            .thumb_func
            call_84cc:
/*0x84cc*/      push {r4, lr}
/*0x84ce*/      mov r4, r0          ; r4 = arg1
/*0x84d0*/      ldr r0, [pc, #0x68] /* r0 = 0x2000000c */
/*0x84d2*/      ldr r2, [r0]        ; r2 = *0x2000000c
/*0x84d4*/      cmp r2, #1
/*0x84d6*/      bne jump_8538       ; r2 != 1 ? jump_8538 : continue
/*0x84d8*/      movs r2, #0         ; r2 = 0
/*0x84da*/      str r2, [r0]        ; *0x2000000c = 0
/*0x84dc*/      ldr r0, [pc, #0x60] /* r0 = USB_BASE_8540 */
/*0x84de*/      ldr r2, [r0]        ; r2 = *(USB.USBCSR)
/*0x84e0*/      lsls r3, r2, #0x19  ; r3 = r2 << 0x19
/*0x84e2*/      mov.w r2, #-1       ; r2 = -1
                ; jump if usb is not in low power mode
/*0x84e6*/      bpl jump_8502       ; r3 >= 0 ? jump_8502 : continue
/*0x84e8*/      movw r3, #0x40c     ; r3 = 0x40c
                ; enable dp pull up
                ; enter usb low power mode
                ; enter usb power down mode
/*0x84ec*/      str r3, [r0]        ; *(USB.USBCSR) = 0x40c
                ; clear usb interrupts
/*0x84ee*/      str r2, [r0, #8]    ; *(USB.USBISR) = -1
/*0x84f0*/      cbnz r1, jump_84f8  ; arg2 != 0 ? jump_84f8 : continue
/*0x84f2*/      movs r0, #0         ; r0 = 0 (wfe)
/*0x84f4*/      bl mcu_enter_deep_sleep
            jump_84f8:
/*0x84f8*/      ldr r0, [r4]        ; r0 = *(arg1)
/*0x84fa*/      pop.w {r4, lr}
/*0x84fe*/      b.w usb_set_intr_enable
            jump_8502:
/*0x8502*/      movw r3, #0xc0c     ; r3 = 0xc0c
/*0x8506*/      str r3, [r0]        ; *(arg1) = 0xc0c
/*0x8508*/      str r2, [r0, #8]    ; *(arg1+8) = -1
/*0x850a*/      cbnz r1, jump_8512  ; arg2 != 0 ? jump_8512 : continue
/*0x850c*/      movs r0, #0         ; r0 = 0 (wfe)
/*0x850e*/      bl mcu_enter_deep_sleep
            jump_8512:
/*0x8512*/      movs r0, #0         ; r0 = 0
                ; disable dp wake up
/*0x8514*/      bl usb_set_dp_wake_up
/*0x8518*/      ldr r0, [r4]        ; r0 = *(arg1)
/*0x851a*/      bl usb_set_intr_enable
/*0x851e*/      movs r0, #0         ; r0 = 0
                ; disable dp pull up
/*0x8520*/      bl usb_set_dp_pull_up
/*0x8524*/      movs r1, #0xc8      ; r1 = 0xc8
/*0x8526*/      movs r0, #0         ; r0 = 0
            jump_8528:
/*0x8528*/      .short 0x1c40 /* adds r0, r0, #1 */ ; r0 = r0 + 1
/*0x852a*/      cmp r0, r1
/*0x852c*/      blo jump_8528       ; r0 < 0xc8 ? jump_8528 : continue
/*0x852e*/      pop.w {r4, lr}
/*0x8532*/      movs r0, #1         ; r0 = 1
/*0x8534*/      b.w usb_set_dp_pull_up
            jump_8538:
/*0x8538*/      pop {r4, pc}

/*0x853a*/  .byte 0x00
/*0x853b*/  .byte 0x00

            data_853c:
/*0x853c*/  .word 0x2000000c
            USB_BASE_8540:
/*0x8540*/  .word 0x400a8000

            jump_8544:
/*0x8544*/      movw r1, #0x171d        ; r1 = 0x171d
/*0x8548*/      str r1, [r0]            ; *arg1 = 0x171d
/*0x854a*/      ldr r1, [pc, #0x28]     /* r1 = 0x80010008 */
/*0x854c*/      str r1, [r0, #4]        ; *(arg1+4) = 0x80010008
/*0x854e*/      movw r1, #0x212         ; r1 = 0x212
/*0x8552*/      str r1, [r0, #8]        ; *(arg1+8) = 0x212
/*0x8554*/      ldr r1, [pc, #0x20]     /* r1 = 0x91002088 */
/*0x8556*/      str r1, [r0, #0xc]      ; *(arg1+12) = 0x91002088
/*0x8558*/      ldr r2, [pc, #0x20]     /* r2 = 0x92010090 */
/*0x855a*/      movs r1, #0x10          ; r1 = 0x10
/*0x855c*/      strd r1, r2, [r0, #0x10] ; *(arg1+16)=0x10; *(arg1+20)=0x92010090
/*0x8560*/      str r1, [r0, #0x18]     ; *(arg1+24) = 0x10
/*0x8562*/      ldr r1, [pc, #0x1c]     /* r1 = 0x930100d0 */
/*0x8564*/      str r1, [r0, #0x1c]     ; *(arg1+28) = 0x930100d0
/*0x8566*/      movs r1, #0             ; r1 = 0
/*0x8568*/      str r1, [r0, #0x20]     ; *(arg1+32) = 0
/*0x856a*/      ldr r1, [pc, #0x18]     /* r1 = 0x84010110 */
/*0x856c*/      str r1, [r0, #0x24]     ; *(arg1+36) = 0x84010110
/*0x856e*/      movs r1, #2             ; r1 = 2
/*0x8570*/      str r1, [r0, #0x28]     ; *(arg1+40) = 2
/*0x8572*/      bx lr

            data_8574:
/*0x8574*/  .word 0x80010008
            data_8578:
/*0x8578*/  .word 0x91002088
            data_857c:
/*0x857c*/  .word 0x92010090
            data_8580:
/*0x8580*/  .word 0x930100d0
            data_8584:
/*0x8584*/  .word 0x84010110


            .thumb_func
            USBD_ReadSETUPData:
/*0x8588*/      ldr r1, [pc, #8]    /* r1 = EP_SRAM_BASE_8594 */
/*0x858a*/      ldr r2, [r1]        ; r2 = *(EP_SRAM)
/*0x858c*/      str r2, [r0]        ; *(arg1) = r2
/*0x858e*/      ldr r1, [r1, #4]    ; r1 = *(EP_SRAM+0x4)
/*0x8590*/      str r1, [r0, #4]    ; *(arg1+4) = r1
/*0x8592*/      bx lr

            EP_SRAM_BASE_8594:
/*0x8594*/  .word 0x400aa000

            USBD_RemoteWakeup:
/*0x8598*/      ldr r0, [pc, #8]    /* r0 = USB_BASE_85a4 */
/*0x859a*/      ldr r1, [r0]        ; r1 = *(USB.USBCSR)
/*0x859c*/      orr r1, r1, #0x20   ; r1 = r1 | 0x20
                ; Resume request generation
/*0x85a0*/      str r1, [r0]        ; *(USB.USBCSR) = r1
/*0x85a2*/      bx lr

            USB_BASE_85a4:
/*0x85a4*/  .word 0x400a8000


            .thumb_func
            USBD_SetAddress:
/*0x85a8*/      ldr r1, [pc, #0xc]  /* r1 = USB_BASE_85b8 */
/*0x85aa*/      ldr r2, [r1]        ; r2 = *(USB.USBCSR)
/*0x85ac*/      orr r2, r2, #0x100  ; r2 = r2 | 0x100
/*0x85b0*/      str r2, [r1]        ; *(USB.USBCSR) = r2
/*0x85b2*/      str r0, [r1, #0x10] ; *(USB.USBDEVA) = arg1
/*0x85b4*/      bx lr

/*0x85b6*/  .byte 0x00
/*0x85b7*/  .byte 0x00

            USB_BASE_85b8:
/*0x85b8*/  .word 0x400a8000


            .thumb_func
            usb_intr:
/*0x85bc*/      ldr r0, [pc, #4] /* r0 = 0x200009fc */
/*0x85be*/      b.w loc_7fc2

/*0x85c2*/  .byte 0x00
/*0x85c3*/  .byte 0x00

            data_85c4:
/*0x85c4*/  .word 0x200009fc


            .thumb_func
            do_nothing_2:
/*0x85c8*/      bx lr

            .thumb_func
            loc_85ca:
/*0x85ca*/      movs r0, #0x4f
/*0x85cc*/      bx lr

            .thumb_func
            loc_85ce:
/*0x85ce*/      push {lr}
/*0x85d0*/      sub sp, #0x44
/*0x85d2*/      mov r0, sp
/*0x85d4*/      bl loc_6764
/*0x85d8*/      movs r1, #0x30
/*0x85da*/      add r0, sp, #0x10
/*0x85dc*/      bl _memzero
/*0x85e0*/      movs r2, #0x40
/*0x85e2*/      mov r1, sp
/*0x85e4*/      movs r0, #3
/*0x85e6*/      bl usb_write_ep_in_buffer
/*0x85ea*/      add sp, #0x44
/*0x85ec*/      movs r0, #0x4f
/*0x85ee*/      pop {pc}

            .thumb_func
            call_85f0:
/*0x85f0*/      ldr r2, [pc, #0x14] /* data_8608 */
/*0x85f2*/      ldrb r2, [r2, #2]
/*0x85f4*/      add.w r2, r2, r2, lsl #2
/*0x85f8*/      add.w r0, r0, r2, lsl #2
/*0x85fc*/      lsls r0, r0, #0xc
/*0x85fe*/      sub.w r0, r0, #0xe000
/*0x8602*/      add.w r0, r0, r1, lsl #2
/*0x8606*/      bx lr

            data_8608:
/*0x8608*/  .word 0x20000c90

            jump_860c:
/*0x860c*/      push {r4, r5, r6, lr}
/*0x860e*/      mov r6, r0      ; (ptr) r6 = arg1
/*0x8610*/      mov r5, r2      ; (len) r5 = arg3
/*0x8612*/      mov r4, r1      ; (sectorAddr) r4 = arg2
/*0x8614*/      mov r0, r1      ; (sectorAddr) r0 = arg2
/*0x8616*/      bl spi_flash_erase_sector
/*0x861a*/      mov r2, r5      ; (len) r2 = arg3
/*0x861c*/      mov r1, r4      ; (sectorAddr) r1 = arg2
/*0x861e*/      mov r0, r6      ; (ptr) r0 = arg1
/*0x8620*/      pop.w {r4, r5, r6, lr}
/*0x8624*/      b.w jump_4374

            jump_8628:
/*0x8628*/      push {r4, r5, r6, lr}
/*0x862a*/      ldr r6, [pc, #0x58] /* data_8684 */
/*0x862c*/      movs r1, #1
/*0x862e*/      ldrb r4, [r6, #3]
/*0x8630*/      adds r0, r6, r4
/*0x8632*/      ldrb r0, [r0, #0x15]
/*0x8634*/      bl call_86f0
/*0x8638*/      ldrb r5, [r6, #5]
/*0x863a*/      b jump_8650
            jump_863c:
/*0x863c*/      cbz r4, jump_8644
/*0x863e*/      .short 0x1e64 /* subs r4, r4, #1 */
/*0x8640*/      uxtb r4, r4
/*0x8642*/      b jump_8646
            jump_8644:
/*0x8644*/      movs r4, #0x31
            jump_8646:
/*0x8646*/      adds r0, r6, r4
/*0x8648*/      movs r1, #2
/*0x864a*/      ldrb r0, [r0, #0x15]
/*0x864c*/      bl call_86f0
            jump_8650:
/*0x8650*/      .short 0x1e6d /* subs r5, r5, #1 */
/*0x8652*/      uxtb r5, r5
/*0x8654*/      bhs jump_863c
/*0x8656*/      cbz r4, jump_865e
/*0x8658*/      .short 0x1e64 /* subs r4, r4, #1 */
/*0x865a*/      uxtb r0, r4
/*0x865c*/      b jump_8660
            jump_865e:
/*0x865e*/      movs r0, #0x31
            jump_8660:
/*0x8660*/      ldr r1, [pc, #0x20] /* data_8684 */
/*0x8662*/      ldrb r2, [r6, #3]
/*0x8664*/      add r0, r6
/*0x8666*/      adds r1, #0x15
/*0x8668*/      ldrb r0, [r0, #0x15]
/*0x866a*/      ldrb r1, [r2, r1]
/*0x866c*/      cmp r0, r1
/*0x866e*/      beq jump_8676
/*0x8670*/      movs r1, #0
/*0x8672*/      bl call_86f0
            jump_8676:
/*0x8676*/      ldrb r0, [r6, #0xa]
/*0x8678*/      pop.w {r4, r5, r6, lr}
/*0x867c*/      movs r1, #3
/*0x867e*/      b.w call_86f0

/*0x8682*/  .byte 0x00
/*0x8683*/  .byte 0x00

            data_8684:
/*0x8684*/  .word 0x20001f00


            .thumb_func
            call_8688:
/*0x8688*/      push.w {r4, r5, r6, r7, r8, lr}
/*0x868c*/      bl rand
/*0x8690*/      ldr r4, [pc, #0x48] /* data_86dc */
/*0x8692*/      add.w r3, r4, #0x14
/*0x8696*/      ldrb r1, [r4, #6]
/*0x8698*/      rsb.w r1, r1, #0x31
/*0x869c*/      sdiv r2, r0, r1
/*0x86a0*/      mls r0, r1, r2, r0
/*0x86a4*/      uxtb r2, r0
/*0x86a6*/      movs r0, #0xa
/*0x86a8*/      movs r5, #1
/*0x86aa*/      b jump_86c8
            jump_86ac:
/*0x86ac*/      movs r1, #5
/*0x86ae*/      b jump_86c0
            jump_86b0:
/*0x86b0*/      ldrb r6, [r3]
/*0x86b2*/      lsl.w r7, r5, r1
/*0x86b6*/      tst r6, r7
/*0x86b8*/      bne jump_86c0
/*0x86ba*/      cbz r2, jump_86d2
/*0x86bc*/      .short 0x1e52 /* subs r2, r2, #1 */
/*0x86be*/      uxtb r2, r2
            jump_86c0:
/*0x86c0*/      .short 0x1e49 /* subs r1, r1, #1 */
/*0x86c2*/      uxtb r1, r1
/*0x86c4*/      bhs jump_86b0
/*0x86c6*/      .short 0x1e5b /* subs r3, r3, #1 */
            jump_86c8:
/*0x86c8*/      .short 0x1e40 /* subs r0, r0, #1 */
/*0x86ca*/      uxtb r0, r0
/*0x86cc*/      bhs jump_86ac
            jump_86ce:
/*0x86ce*/      pop.w {r4, r5, r6, r7, r8, pc}
            jump_86d2:
/*0x86d2*/      bl call_86e0
/*0x86d6*/      strb r0, [r4, #0xa]
/*0x86d8*/      b jump_86ce

/*0x86da*/  .byte 0x00
/*0x86db*/  .byte 0x00

            data_86dc:
/*0x86dc*/  .word 0x20001f00


            .thumb_func
            call_86e0:
/*0x86e0*/      add.w r0, r0, r1, lsl #5
/*0x86e4*/      uxtb r1, r0
/*0x86e6*/      ldr r0, [pc, #4] /* data_86ec */
/*0x86e8*/      b.w jump_8b78

            data_86ec:
/*0x86ec*/  .word 0x00009d4c /* possible pointer */


            .thumb_func
            call_86f0:
/*0x86f0*/      cmp r1, #3
/*0x86f2*/      bne jump_8702
/*0x86f4*/      ldr r2, [pc, #0x18] /* data_8710 */
/*0x86f6*/      ldrh r3, [r2]
/*0x86f8*/      cbnz r3, jump_8702
/*0x86fa*/      ldrb r2, [r2, #2]
/*0x86fc*/      lsls r2, r2, #0x1f
/*0x86fe*/      beq jump_8702
/*0x8700*/      movs r1, #0
            jump_8702:
/*0x8702*/      ldr r2, [pc, #0x10] /* data_8714 */
/*0x8704*/      add.w r1, r1, r1, lsl #1
/*0x8708*/      add r1, r2
/*0x870a*/      b.w call_3ef4

/*0x870e*/  .byte 0x00
/*0x870f*/  .byte 0x00

            data_8710:
/*0x8710*/  .word 0x20001f00
            data_8714:
/*0x8714*/  .word 0x00009e24 /* possible pointer */


            .thumb_func
            call_8718:
/*0x8718*/      push {r4, r5, lr}
/*0x871a*/      ldr r4, [pc, #0x8c] /* data_87a8 */
/*0x871c*/      mov r1, r4
/*0x871e*/      ldrb r0, [r4, #7]
/*0x8720*/      ldrb r2, [r1, #8]
/*0x8722*/      cbz r0, jump_8734
/*0x8724*/      ldrb r1, [r1, #9]
/*0x8726*/      cmp r0, #1
/*0x8728*/      beq jump_8742
/*0x872a*/      cmp r0, #2
/*0x872c*/      beq jump_8750
/*0x872e*/      cmp r0, #3
/*0x8730*/      bne jump_876a
/*0x8732*/      b jump_875e
            jump_8734:
/*0x8734*/      movs r0, #0xa
/*0x8736*/      .short 0x1c52 /* adds r2, r2, #1 */
/*0x8738*/      udiv r1, r2, r0
/*0x873c*/      mls r0, r0, r1, r2
/*0x8740*/      b jump_875a
            jump_8742:
/*0x8742*/      movs r0, #5
/*0x8744*/      .short 0x1c49 /* adds r1, r1, #1 */
/*0x8746*/      udiv r2, r1, r0
/*0x874a*/      mls r0, r0, r2, r1
/*0x874e*/      b jump_8768
            jump_8750:
/*0x8750*/      cbz r2, jump_8758
/*0x8752*/      .short 0x1e52 /* subs r2, r2, #1 */
/*0x8754*/      strb r2, [r4, #8]
/*0x8756*/      b jump_876a
            jump_8758:
/*0x8758*/      movs r0, #9
            jump_875a:
/*0x875a*/      strb r0, [r4, #8]
/*0x875c*/      b jump_876a
            jump_875e:
/*0x875e*/      cbz r1, jump_8766
/*0x8760*/      .short 0x1e49 /* subs r1, r1, #1 */
/*0x8762*/      strb r1, [r4, #9]
/*0x8764*/      b jump_876a
            jump_8766:
/*0x8766*/      movs r0, #4
            jump_8768:
/*0x8768*/      strb r0, [r4, #9]
            jump_876a:
/*0x876a*/      ldr r2, [pc, #0x3c] /* data_87a8 */
/*0x876c*/      ldrb r3, [r4, #8]
/*0x876e*/      adds r2, #0xb
/*0x8770*/      ldrb r5, [r4, #9]
/*0x8772*/      ldrb r0, [r3, r2]
/*0x8774*/      movs r1, #1
/*0x8776*/      lsls r1, r5
/*0x8778*/      tst r0, r1
/*0x877a*/      beq jump_8780
/*0x877c*/      movs r0, #1
/*0x877e*/      pop {r4, r5, pc}
            jump_8780:
/*0x8780*/      orrs r0, r1
/*0x8782*/      strb r0, [r3, r2]
/*0x8784*/      ldrb r0, [r4, #3]
/*0x8786*/      cmp r0, #0x31
/*0x8788*/      beq jump_87a2
/*0x878a*/      .short 0x1c40 /* adds r0, r0, #1 */
            jump_878c:
/*0x878c*/      strb r0, [r4, #3]
/*0x878e*/      ldrb r1, [r4, #9]
/*0x8790*/      ldrb r0, [r4, #8]
/*0x8792*/      bl call_86e0
/*0x8796*/      ldr r1, [pc, #0x10] /* data_87a8 */
/*0x8798*/      ldrb r2, [r4, #3]
/*0x879a*/      adds r1, #0x15
/*0x879c*/      strb r0, [r2, r1]
/*0x879e*/      movs r0, #0
/*0x87a0*/      pop {r4, r5, pc}
            jump_87a2:
/*0x87a2*/      movs r0, #0
/*0x87a4*/      b jump_878c

/*0x87a6*/  .byte 0x00
/*0x87a7*/  .byte 0x00

            data_87a8:
/*0x87a8*/  .word 0x20001f00


            .thumb_func
            call_87ac:
/*0x87ac*/      ldrb r1, [r0]
/*0x87ae*/      cbnz r1, jump_87ba
/*0x87b0*/      ldrb r1, [r0, #1]
/*0x87b2*/      cbnz r1, jump_87ba
/*0x87b4*/      ldrb r0, [r0, #2]
/*0x87b6*/      cmp r0, #0
/*0x87b8*/      beq jump_87bc
            jump_87ba:
/*0x87ba*/      movs r0, #1
            jump_87bc:
/*0x87bc*/      bx lr

/*0x87be*/  .byte 0x00
/*0x87bf*/  .byte 0x00


            .thumb_func
            call_87c0:
/*0x87c0*/      push {r4, r5, r6, lr}
/*0x87c2*/      ldr r1, [pc, #0x40] /* data_8804 */
/*0x87c4*/      ldr r2, [pc, #0x38] /* data_8800 */
/*0x87c6*/      add.w r3, r1, #0x168
/*0x87ca*/      movs r4, #0x78
/*0x87cc*/      ldr r5, [r3, #8]
/*0x87ce*/      b jump_87f8
            jump_87d0:
/*0x87d0*/      ldrb r3, [r5], #1
/*0x87d4*/      cmp r3, r0
/*0x87d6*/      bne jump_87f4
/*0x87d8*/      movs r3, #3
/*0x87da*/      b jump_87e4
            jump_87dc:
/*0x87dc*/      ldrb r6, [r2], #0x78
/*0x87e0*/      strb r6, [r1], #0x78
            jump_87e4:
/*0x87e4*/      .short 0x1e5b /* subs r3, r3, #1 */
/*0x87e6*/      uxtb r3, r3
/*0x87e8*/      bhs jump_87dc
/*0x87ea*/      subw r1, r1, #0x167
/*0x87ee*/      subw r2, r2, #0x167
/*0x87f2*/      b jump_87f8
            jump_87f4:
/*0x87f4*/      .short 0x1c49 /* adds r1, r1, #1 */
/*0x87f6*/      .short 0x1c52 /* adds r2, r2, #1 */
            jump_87f8:
/*0x87f8*/      .short 0x1e64 /* subs r4, r4, #1 */
/*0x87fa*/      uxtb r4, r4
/*0x87fc*/      bhs jump_87d0
/*0x87fe*/      pop {r4, r5, r6, pc}

            data_8800:
/*0x8800*/  .word 0x200000df
            data_8804:
/*0x8804*/  .word 0x20001a84

            jump_8808:
/*0x8808*/      ubfx r0, r0, #0x10, #8
/*0x880c*/      cmp r0, #0xe8
/*0x880e*/      bne jump_883a
/*0x8810*/      ldr r1, [pc, #0x28] /* data_883c */
/*0x8812*/      ldrb r0, [r1]
/*0x8814*/      ubfx r2, r0, #1, #3
/*0x8818*/      cmp r2, #6
/*0x881a*/      bhs jump_883a
/*0x881c*/      mov.w r2, #0x20000000
/*0x8820*/      add.w r0, r2, r0, ror #4
/*0x8824*/      ror.w r0, r0, #0x1c
/*0x8828*/      strb r0, [r1]
/*0x882a*/      ubfx r0, r0, #1, #3
/*0x882e*/      cmp r0, #6
/*0x8830*/      bne jump_883a
/*0x8832*/      movs r1, #0x78
/*0x8834*/      ldr r0, [pc, #8] /* data_8840 */
/*0x8836*/      b.w _memzero
            jump_883a:
/*0x883a*/      bx lr

            data_883c:
/*0x883c*/  .word 0x20000050
            data_8840:
/*0x8840*/  .word 0x20001c1c


            .thumb_func
            call_8844:
/*0x8844*/      push.w {r4, r5, r6, r7, r8, sb, sl, lr}
/*0x8848*/      ldr r6, [pc, #0x9c] /* data_88e8 */
/*0x884a*/      ldrb r0, [r6]
/*0x884c*/      ubfx r0, r0, #1, #3
/*0x8850*/      cmp r0, #5
/*0x8852*/      beq jump_886a
/*0x8854*/      cmp r0, #6
/*0x8856*/      beq jump_88a0
/*0x8858*/      ldr r0, [pc, #0x90] /* data_88ec */
/*0x885a*/      bl call_3f3c
            jump_885e:
/*0x885e*/      ldr r0, [r6]
/*0x8860*/      orr r0, r0, #0x10000000
/*0x8864*/      str r0, [r6]
/*0x8866*/      pop.w {r4, r5, r6, r7, r8, sb, sl, pc}
            jump_886a:
/*0x886a*/      mov.w r1, #0x168
/*0x886e*/      ldr r0, [pc, #0x80] /* data_88f0 */
/*0x8870*/      bl _memzero
/*0x8874*/      ldr r0, [pc, #0x74] /* data_88ec */
/*0x8876*/      ldrb.w r1, [r0, #0x78]
/*0x887a*/      cbnz r1, jump_8882
/*0x887c*/      ldrb.w r0, [r0, #0x79]
/*0x8880*/      cbz r0, jump_888e
            jump_8882:
/*0x8882*/      movs r0, #0
            jump_8884:
/*0x8884*/      bl call_3bd8
/*0x8888*/      cbz r0, jump_8892
/*0x888a*/      movs r0, #0x39
/*0x888c*/      b jump_8894
            jump_888e:
/*0x888e*/      movs r0, #1
/*0x8890*/      b jump_8884
            jump_8892:
/*0x8892*/      movs r0, #0x47
            jump_8894:
/*0x8894*/      ldr r1, [pc, #0x5c] /* data_88f4 */
/*0x8896*/      ldrb r0, [r1, r0]
/*0x8898*/      movs r1, #0xb4
/*0x889a*/      bl call_3f80
/*0x889e*/      b jump_885e
            jump_88a0:
/*0x88a0*/      ldr r4, [pc, #0x48] /* data_88ec */
/*0x88a2*/      movs r5, #0x78
/*0x88a4*/      adds r4, #0x77
/*0x88a6*/      movs r7, #1
/*0x88a8*/      ldr.w r8, [pc, #0x4c] /* data_88f8 */
/*0x88ac*/      mov.w sb, #0xfc
/*0x88b0*/      b jump_88de
            jump_88b2:
/*0x88b2*/      add.w r0, r8, r5, lsr #3
/*0x88b6*/      and r1, r5, #7
/*0x88ba*/      ldrb r0, [r0]
/*0x88bc*/      lsl.w r1, r7, r1
/*0x88c0*/      tst r0, r1
/*0x88c2*/      beq jump_88ce
/*0x88c4*/      ldrb r0, [r4]
/*0x88c6*/      cbz r0, jump_88d4
/*0x88c8*/      .short 0x1f00 /* subs r0, r0, #4 */
/*0x88ca*/      strb r0, [r4]
/*0x88cc*/      b jump_88d4
            jump_88ce:
/*0x88ce*/      mov r0, sb
/*0x88d0*/      strb.w sb, [r4]
            jump_88d4:
/*0x88d4*/      uxtb r1, r0
/*0x88d6*/      mov r0, r5
/*0x88d8*/      bl call_3f80
/*0x88dc*/      .short 0x1e64 /* subs r4, r4, #1 */
            jump_88de:
/*0x88de*/      .short 0x1e6d /* subs r5, r5, #1 */
/*0x88e0*/      uxtb r5, r5
/*0x88e2*/      bhs jump_88b2
/*0x88e4*/      b jump_885e

/*0x88e6*/  .byte 0x00
/*0x88e7*/  .byte 0x00

            data_88e8:
/*0x88e8*/  .word 0x20000050
            data_88ec:
/*0x88ec*/  .word 0x20001c1c
            data_88f0:
/*0x88f0*/  .word 0x200000df
            data_88f4:
/*0x88f4*/  .word 0x00009872 /* possible pointer */
            data_88f8:
/*0x88f8*/  .word 0x20000094

            jump_88fc:
/*0x88fc*/      ldr r0, [pc, #0x58] /* data_8958 */
/*0x88fe*/      ldrb.w r1, [r0, #0x78]
/*0x8902*/      .short 0x1c49 /* adds r1, r1, #1 */
/*0x8904*/      uxtb r1, r1
/*0x8906*/      strb.w r1, [r0, #0x78]
/*0x890a*/      cmp r1, #0x20
/*0x890c*/      bls jump_8956
/*0x890e*/      movs r1, #0
/*0x8910*/      strb.w r1, [r0, #0x78]
/*0x8914*/      ldr r1, [pc, #0x44] /* data_895c */
/*0x8916*/      ldrb r2, [r1]
/*0x8918*/      ubfx r2, r2, #1, #3
/*0x891c*/      cmp r2, #6
/*0x891e*/      bhs switch_894e
/*0x8920*/      tbb [pc, r2]

/*0x8924*/  .byte 0x15 /* case switch_894e */
/*0x8925*/  .byte 0x03 /* case switch_892a */
/*0x8926*/  .byte 0x05 /* case switch_892e */
/*0x8927*/  .byte 0x09 /* case switch_8936 */
/*0x8928*/  .byte 0x0c /* case switch_893c */
/*0x8929*/  .byte 0x0f /* case switch_8942 */

            switch_892a:
/*0x892a*/      movs r2, #0xff
/*0x892c*/      b jump_8932
            switch_892e:
/*0x892e*/      mov.w r2, #0xff00
            jump_8932:
/*0x8932*/      str r2, [r0]
/*0x8934*/      b switch_894e
            switch_8936:
/*0x8936*/      mov.w r2, #0xff0000
/*0x893a*/      b jump_8932
            switch_893c:
/*0x893c*/      mvn r2, #0xff000000
/*0x8940*/      b jump_8932
            switch_8942:
/*0x8942*/      ldrb r2, [r0, #0x79]!
/*0x8946*/      .short 0x1c52 /* adds r2, r2, #1 */
/*0x8948*/      and r2, r2, #0xf
/*0x894c*/      strb r2, [r0]
            switch_894e:
/*0x894e*/      ldr r0, [r1]
/*0x8950*/      orr r0, r0, #0x8000000
/*0x8954*/      str r0, [r1]
            jump_8956:
/*0x8956*/      bx lr

            data_8958:
/*0x8958*/  .word 0x20001c1c
            data_895c:
/*0x895c*/  .word 0x20000050


            .thumb_func
            call_8960:
/*0x8960*/      push.w {r4, r5, r6, r7, r8, lr}
/*0x8964*/      ldr r5, [pc, #0x50] /* data_89b8 */
/*0x8966*/      mov r7, r2
/*0x8968*/      mov r8, r1
/*0x896a*/      mov r6, r0
/*0x896c*/      cmp r2, #0xf8
/*0x896e*/      bne jump_8974
/*0x8970*/      lsls r0, r0, #0x1b
/*0x8972*/      lsrs r6, r0, #0x18
            jump_8974:
/*0x8974*/      movs r4, #0x78
/*0x8976*/      b jump_898a
            jump_8978:
/*0x8978*/      ldrb r0, [r5], #-1
/*0x897c*/      ands r0, r7
/*0x897e*/      cmp r0, r6
/*0x8980*/      bne jump_898a
/*0x8982*/      mov r1, r8
/*0x8984*/      mov r0, r4
/*0x8986*/      bl call_3ef4
            jump_898a:
/*0x898a*/      .short 0x1e64 /* subs r4, r4, #1 */
/*0x898c*/      uxtb r4, r4
/*0x898e*/      bhs jump_8978
/*0x8990*/      cmp r7, #0xf8
/*0x8992*/      bne jump_899c
/*0x8994*/      movs r5, #0xf
/*0x8996*/      ldr r4, [pc, #0x24] /* data_89bc */
/*0x8998*/      lsrs r6, r6, #3
/*0x899a*/      cbnz r4, jump_89b0
            jump_899c:
/*0x899c*/      pop.w {r4, r5, r6, r7, r8, pc}
            jump_89a0:
/*0x89a0*/      ldrb r0, [r4, #1]
/*0x89a2*/      cmp r0, r6
/*0x89a4*/      bne jump_89ae
/*0x89a6*/      ldrb r0, [r4]
/*0x89a8*/      mov r1, r8
/*0x89aa*/      bl call_3ef4
            jump_89ae:
/*0x89ae*/      .short 0x1ca4 /* adds r4, r4, #2 */
            jump_89b0:
/*0x89b0*/      .short 0x1e6d /* subs r5, r5, #1 */
/*0x89b2*/      uxtb r5, r5
/*0x89b4*/      bhs jump_89a0
/*0x89b6*/      b jump_899c

            data_89b8:
/*0x89b8*/  .word 0x00009d4b /* possible pointer */
            data_89bc:
/*0x89bc*/  .word 0x00009e52 /* possible pointer */


            .thumb_func
            call_89c0:
/*0x89c0*/      push.w {r4, r5, r6, r7, r8, lr}
/*0x89c4*/      mov r4, r0
/*0x89c6*/      movs r1, #0x78
/*0x89c8*/      ldr r0, [pc, #0x70] /* data_8a3c */
/*0x89ca*/      bl _memzero
/*0x89ce*/      cbz r4, jump_89d4
/*0x89d0*/      movs r2, #0xff
/*0x89d2*/      b jump_89d6
            jump_89d4:
/*0x89d4*/      movs r2, #0
            jump_89d6:
/*0x89d6*/      ldr r0, [pc, #0x64] /* data_8a3c */
/*0x89d8*/      movs r1, #0x78
/*0x89da*/      adds r0, #0xf0
/*0x89dc*/      bl _memset
/*0x89e0*/      ldr r0, [pc, #0x58] /* data_8a3c */
/*0x89e2*/      movs r1, #0x78
/*0x89e4*/      adds r0, #0x78
/*0x89e6*/      bl _memzero
/*0x89ea*/      movs r1, #0x14
/*0x89ec*/      movs r6, #0
/*0x89ee*/      ldr r5, [pc, #0x50] /* data_8a40 */
/*0x89f0*/      ldr r3, [pc, #0x48] /* data_8a3c */
/*0x89f2*/      ldr r0, [pc, #0x50] /* data_8a44 */
/*0x89f4*/      movs r7, #0xff
/*0x89f6*/      b jump_8a12
            jump_89f8:
/*0x89f8*/      add.w r2, r0, r1, lsl #1
/*0x89fc*/      ldrh r2, [r2, #2]
/*0x89fe*/      lsls r2, r2, #0x16
/*0x8a00*/      lsrs r2, r2, #0x16
/*0x8a02*/      beq jump_8a12
/*0x8a04*/      cmp r2, #0xff
/*0x8a06*/      bhi jump_8a12
/*0x8a08*/      ldrb r2, [r5, r2]
/*0x8a0a*/      strb r7, [r3, r2]
/*0x8a0c*/      add r2, r3
/*0x8a0e*/      strb.w r6, [r2, #0xf0]
            jump_8a12:
/*0x8a12*/      .short 0x1e49 /* subs r1, r1, #1 */
/*0x8a14*/      uxth r1, r1
/*0x8a16*/      bhs jump_89f8
/*0x8a18*/      cmp r4, #0
/*0x8a1a*/      beq jump_8a36
/*0x8a1c*/      movs r0, #0x10
/*0x8a1e*/      ldr r2, [pc, #0x28] /* data_8a48 */
/*0x8a20*/      b jump_8a30
            jump_8a22:
/*0x8a22*/      ldrb r1, [r2, r0]
/*0x8a24*/      ldrb r1, [r5, r1]
/*0x8a26*/      cmp r1, #0xff
/*0x8a28*/      beq jump_8a30
/*0x8a2a*/      add r1, r3
/*0x8a2c*/      strb.w r6, [r1, #0xf0]
            jump_8a30:
/*0x8a30*/      .short 0x1e40 /* subs r0, r0, #1 */
/*0x8a32*/      uxth r0, r0
/*0x8a34*/      bhs jump_8a22
            jump_8a36:
/*0x8a36*/      pop.w {r4, r5, r6, r7, r8, pc}

/*0x8a3a*/  .byte 0x00
/*0x8a3b*/  .byte 0x00

            data_8a3c:
/*0x8a3c*/  .word 0x200000df
            data_8a40:
/*0x8a40*/  .word 0x00009872 /* possible pointer */
            data_8a44:
/*0x8a44*/  .word 0x20000d34
            data_8a48:
/*0x8a48*/  .word 0x0000960c /* possible pointer */


            .thumb_func
            call_8a4c:
/*0x8a4c*/      push.w {r4, r5, r6, r7, r8, lr}
/*0x8a50*/      ldr r5, [pc, #0x110] /* data_8b64 */
/*0x8a52*/      ldrb.w r0, [r5, #0x2e]
/*0x8a56*/      bl call_532c
/*0x8a5a*/      mov r4, r0
/*0x8a5c*/      uxtb r0, r0
/*0x8a5e*/      ldr r6, [pc, #0x108] /* data_8b68 */
/*0x8a60*/      ldr r7, [pc, #0x108] /* data_8b6c */
/*0x8a62*/      cmp r0, #1
/*0x8a64*/      beq jump_8a76
/*0x8a66*/      cmp r0, #2
/*0x8a68*/      beq jump_8aac
/*0x8a6a*/      cmp r0, #4
/*0x8a6c*/      beq jump_8abc
/*0x8a6e*/      pop.w {r4, r5, r6, r7, r8, lr}
/*0x8a72*/      b.w call_4fe8
            jump_8a76:
/*0x8a76*/      bl call_4fe8
/*0x8a7a*/      ubfx r4, r4, #8, #8
/*0x8a7e*/      add.w r0, r4, r4, lsl #2
/*0x8a82*/      add.w r0, r6, r0, lsl #2
/*0x8a86*/      ldr r0, [r0, #0xc]
/*0x8a88*/      blx r0
/*0x8a8a*/      ldr r0, [r7, #4]
/*0x8a8c*/      cmp r0, #0
/*0x8a8e*/      beq jump_8b5e
/*0x8a90*/      add.w r0, r4, r4, lsl #1
/*0x8a94*/      add.w r0, r0, r4, lsl #3
/*0x8a98*/      add r0, r5
/*0x8a9a*/      ldrb.w r1, [r0, #0x42]
/*0x8a9e*/      pop.w {r4, r5, r6, r7, r8, lr}
/*0x8aa2*/      ubfx r1, r1, #6, #1
/*0x8aa6*/      adds r0, #0x49
/*0x8aa8*/      b.w call_8b94
            jump_8aac:
/*0x8aac*/      bl call_4fe8
/*0x8ab0*/      ubfx r0, r4, #8, #8
/*0x8ab4*/      pop.w {r4, r5, r6, r7, r8, lr}
/*0x8ab8*/      b.w call_5b2c
            jump_8abc:
/*0x8abc*/      movs r1, #0x78
/*0x8abe*/      ldr r0, [pc, #0xb0] /* data_8b70 */
/*0x8ac0*/      movs r4, #0
/*0x8ac2*/      ldr r2, [r7, #8]
/*0x8ac4*/      b jump_8ade
            jump_8ac6:
/*0x8ac6*/      ldrb r3, [r2]
/*0x8ac8*/      cmp r3, #0xd8
/*0x8aca*/      blo jump_8ad0
/*0x8acc*/      cmp r3, #0xfe
/*0x8ace*/      bne jump_8ada
            jump_8ad0:
/*0x8ad0*/      movs r3, #0x78
/*0x8ad2*/      strb r4, [r0]
/*0x8ad4*/      strb r4, [r3, r0]
/*0x8ad6*/      movs r3, #0xf0
/*0x8ad8*/      strb r4, [r3, r0]
            jump_8ada:
/*0x8ada*/      .short 0x1c40 /* adds r0, r0, #1 */
/*0x8adc*/      .short 0x1c52 /* adds r2, r2, #1 */
            jump_8ade:
/*0x8ade*/      .short 0x1e49 /* subs r1, r1, #1 */
/*0x8ae0*/      uxtb r1, r1
/*0x8ae2*/      bhs jump_8ac6
/*0x8ae4*/      movs r4, #1
/*0x8ae6*/      movs r5, #0
            jump_8ae8:
/*0x8ae8*/      ldr r0, [r7]
/*0x8aea*/      tst r0, r4
/*0x8aec*/      beq jump_8b22
/*0x8aee*/      add.w r0, r5, r5, lsl #2
/*0x8af2*/      add.w r0, r6, r0, lsl #2
/*0x8af6*/      ldr r0, [r0, #0xc]
/*0x8af8*/      blx r0
/*0x8afa*/      ldr r0, [r7, #4]
/*0x8afc*/      tst r0, r4
/*0x8afe*/      beq jump_8b1c
/*0x8b00*/      add.w r0, r5, r5, lsl #1
/*0x8b04*/      add.w r0, r0, r5, lsl #3
/*0x8b08*/      ldr r2, [r7, #8]
/*0x8b0a*/      add.w r1, r0, #0x79
/*0x8b0e*/      adds r0, #0x80
/*0x8b10*/      ldrb r1, [r2, r1]
/*0x8b12*/      add r0, r2
/*0x8b14*/      ubfx r1, r1, #6, #1
/*0x8b18*/      bl call_8b94
            jump_8b1c:
/*0x8b1c*/      mov r0, r5
/*0x8b1e*/      bl call_87c0
            jump_8b22:
/*0x8b22*/      .short 0x1c6d /* adds r5, r5, #1 */
/*0x8b24*/      lsls r4, r4, #1
/*0x8b26*/      uxtb r5, r5
/*0x8b28*/      cmp r5, #0xa
/*0x8b2a*/      blo jump_8ae8
/*0x8b2c*/      movs r5, #0
            jump_8b2e:
/*0x8b2e*/      ldr r0, [r7]
/*0x8b30*/      tst r0, r4
/*0x8b32*/      beq jump_8b44
/*0x8b34*/      mov r0, r5
/*0x8b36*/      bl call_5b2c
/*0x8b3a*/      add.w r0, r5, #0xa
/*0x8b3e*/      uxtb r0, r0
/*0x8b40*/      bl call_87c0
            jump_8b44:
/*0x8b44*/      lsls r4, r4, #1
/*0x8b46*/      .short 0x1c6d /* adds r5, r5, #1 */
/*0x8b48*/      ands r5, r5, #0xff
/*0x8b4c*/      beq jump_8b2e
/*0x8b4e*/      pop.w {r4, r5, r6, r7, r8, lr}
/*0x8b52*/      mov.w r2, #0x168
/*0x8b56*/      ldr r1, [pc, #0x18] /* data_8b70 */
/*0x8b58*/      ldr r0, [pc, #0x18] /* data_8b74 */
/*0x8b5a*/      b.w memcpy
            jump_8b5e:
/*0x8b5e*/      pop.w {r4, r5, r6, r7, r8, pc}

/*0x8b62*/  .byte 0x00
/*0x8b63*/  .byte 0x00

            data_8b64:
/*0x8b64*/  .word 0x20000d34
            data_8b68:
/*0x8b68*/  .word 0x00009e8c /* possible pointer */
            data_8b6c:
/*0x8b6c*/  .word 0x20001bec
            data_8b70:
/*0x8b70*/  .word 0x20001a84
            data_8b74:
/*0x8b74*/  .word 0x200000df

            jump_8b78:
/*0x8b78*/      add.w r2, r0, #0x77
/*0x8b7c*/      movs r0, #0x78
/*0x8b7e*/      b jump_8b88
            jump_8b80:
/*0x8b80*/      ldrb r3, [r2], #-1
/*0x8b84*/      cmp r3, r1
/*0x8b86*/      beq jump_8b90
            jump_8b88:
/*0x8b88*/      .short 0x1e40 /* subs r0, r0, #1 */
/*0x8b8a*/      uxtb r0, r0
/*0x8b8c*/      bhs jump_8b80
/*0x8b8e*/      movs r0, #0xff
            jump_8b90:
/*0x8b90*/      bx lr

/*0x8b92*/  .byte 0x00
/*0x8b93*/  .byte 0x00


            .thumb_func
            call_8b94:
/*0x8b94*/      push {r4, r5, lr}
/*0x8b96*/      ldr r2, [pc, #0x5c] /* data_8bf4 */
/*0x8b98*/      cbz r1, jump_8bc4
/*0x8b9a*/      movs r4, #0x78
/*0x8b9c*/      b jump_8bbc
            jump_8b9e:
/*0x8b9e*/      movs r1, #3
/*0x8ba0*/      b jump_8bb0
            jump_8ba2:
/*0x8ba2*/      ldrb r5, [r2]
/*0x8ba4*/      ldrb r3, [r0]
/*0x8ba6*/      cmp r5, r3
/*0x8ba8*/      bhs jump_8bac
/*0x8baa*/      strb r3, [r2]
            jump_8bac:
/*0x8bac*/      .short 0x1c40 /* adds r0, r0, #1 */
/*0x8bae*/      adds r2, #0x78
            jump_8bb0:
/*0x8bb0*/      .short 0x1e49 /* subs r1, r1, #1 */
/*0x8bb2*/      uxtb r1, r1
/*0x8bb4*/      bhs jump_8ba2
/*0x8bb6*/      .short 0x1ec0 /* subs r0, r0, #3 */
/*0x8bb8*/      subw r2, r2, #0x167
            jump_8bbc:
/*0x8bbc*/      .short 0x1e64 /* subs r4, r4, #1 */
/*0x8bbe*/      uxtb r4, r4
/*0x8bc0*/      bhs jump_8b9e
/*0x8bc2*/      pop {r4, r5, pc}
            jump_8bc4:
/*0x8bc4*/      movs r1, #0x78
/*0x8bc6*/      b jump_8bea
            jump_8bc8:
/*0x8bc8*/      ldrb r3, [r2]
/*0x8bca*/      cbnz r3, jump_8be8
/*0x8bcc*/      ldrb.w r3, [r2, #0x78]
/*0x8bd0*/      cbnz r3, jump_8be8
/*0x8bd2*/      ldrb.w r3, [r2, #0xf0]
/*0x8bd6*/      cbnz r3, jump_8be8
/*0x8bd8*/      ldrb r3, [r0]
/*0x8bda*/      strb r3, [r2]
/*0x8bdc*/      ldrb r3, [r0, #1]
/*0x8bde*/      strb.w r3, [r2, #0x78]
/*0x8be2*/      ldrb r3, [r0, #2]
/*0x8be4*/      strb.w r3, [r2, #0xf0]
            jump_8be8:
/*0x8be8*/      .short 0x1c52 /* adds r2, r2, #1 */
            jump_8bea:
/*0x8bea*/      .short 0x1e49 /* subs r1, r1, #1 */
/*0x8bec*/      uxtb r1, r1
/*0x8bee*/      bhs jump_8bc8
/*0x8bf0*/      pop {r4, r5, pc}

/*0x8bf2*/  .byte 0x00
/*0x8bf3*/  .byte 0x00

            data_8bf4:
/*0x8bf4*/  .word 0x200000df


            .thumb_func
            call_8bf8:
/*0x8bf8*/      push {r3, r4, r5, lr}
/*0x8bfa*/      mov r5, r2
/*0x8bfc*/      mov r4, r0
/*0x8bfe*/      cbnz r1, jump_8c08
/*0x8c00*/      mov r0, sp
/*0x8c02*/      bl loc_3d94
/*0x8c06*/      mov r1, sp
            jump_8c08:
/*0x8c08*/      movs r3, #3
/*0x8c0a*/      .short 0x1c6d /* adds r5, r5, #1 */
/*0x8c0c*/      b jump_8c1a
            jump_8c0e:
/*0x8c0e*/      ldrb r0, [r1], #1
/*0x8c12*/      muls r0, r5, r0
/*0x8c14*/      lsrs r0, r0, #4
/*0x8c16*/      strb r0, [r4], #1
            jump_8c1a:
/*0x8c1a*/      .short 0x1e5b /* subs r3, r3, #1 */
/*0x8c1c*/      uxtb r3, r3
/*0x8c1e*/      bhs jump_8c0e
/*0x8c20*/      pop {r3, r4, r5, pc}

/*0x8c22*/  .byte 0x00
/*0x8c23*/  .byte 0x00


            .thumb_func
            call_8c24:
/*0x8c24*/      push.w {r4, r5, r6, r7, r8, lr}
/*0x8c28*/      ldr r6, [pc, #0x8c] /* data_8cb8 */
/*0x8c2a*/      mov r4, r1
/*0x8c2c*/      mov r5, r0
/*0x8c2e*/      ldrb.w r7, [r6, #0x2e]
/*0x8c32*/      cmp r7, #0xd8
/*0x8c34*/      blo jump_8c3e
/*0x8c36*/      ldr r1, [pc, #0x84] /* data_8cbc */
/*0x8c38*/      ldr r1, [r1, #8]
/*0x8c3a*/      cbz r1, jump_8c50
/*0x8c3c*/      ldrb r7, [r1, r5]
            jump_8c3e:
/*0x8c3e*/      mov r0, r7
/*0x8c40*/      bl call_532c
/*0x8c44*/      uxtb r1, r0
/*0x8c46*/      cmp r1, #1
/*0x8c48*/      beq jump_8c7c
/*0x8c4a*/      cmp r1, #2
/*0x8c4c*/      beq jump_8c82
/*0x8c4e*/      movs r1, #0
            jump_8c50:
/*0x8c50*/      cbz r1, jump_8c9c
/*0x8c52*/      cmp r1, #1
/*0x8c54*/      beq jump_8caa
/*0x8c56*/      cmp r1, #3
/*0x8c58*/      bne jump_8cb2
/*0x8c5a*/      ubfx r0, r0, #8, #8
/*0x8c5e*/      rsb r0, r0, r0, lsl #4
/*0x8c62*/      add.w r0, r0, r0, lsl #1
/*0x8c66*/      add.w r0, r6, r0, lsl #3
/*0x8c6a*/      add.w r1, r5, r5, lsl #1
/*0x8c6e*/      add r1, r0
/*0x8c70*/      ldrb.w r0, [r1, #0x447]
/*0x8c74*/      addw r1, r1, #0x447
/*0x8c78*/      cbnz r0, jump_8c8e
/*0x8c7a*/      b jump_8c86
            jump_8c7c:
/*0x8c7c*/      ldr r1, [pc, #0x40] /* data_8cc0 */
/*0x8c7e*/      ldrb r1, [r1, r7]
/*0x8c80*/      b jump_8c50
            jump_8c82:
/*0x8c82*/      movs r1, #3
/*0x8c84*/      b jump_8c50
            jump_8c86:
/*0x8c86*/      ldrb r0, [r1, #1]
/*0x8c88*/      cbnz r0, jump_8c8e
/*0x8c8a*/      ldrb r0, [r1, #2]
/*0x8c8c*/      cbz r0, jump_8c9c
            jump_8c8e:
/*0x8c8e*/      cbnz r4, jump_8c92
/*0x8c90*/      ldr r1, [pc, #0x30] /* data_8cc4 */
            jump_8c92:
/*0x8c92*/      mov r0, r5
/*0x8c94*/      pop.w {r4, r5, r6, r7, r8, lr}
/*0x8c98*/      b.w call_3ef4
            jump_8c9c:
/*0x8c9c*/      cbz r4, jump_8cae
/*0x8c9e*/      movs r1, #0xff
            jump_8ca0:
/*0x8ca0*/      mov r0, r5
/*0x8ca2*/      pop.w {r4, r5, r6, r7, r8, lr}
/*0x8ca6*/      b.w call_3f80
            jump_8caa:
/*0x8caa*/      cmp r4, #0
/*0x8cac*/      bne jump_8cb2
            jump_8cae:
/*0x8cae*/      movs r1, #0
/*0x8cb0*/      b jump_8ca0
            jump_8cb2:
/*0x8cb2*/      pop.w {r4, r5, r6, r7, r8, pc}

/*0x8cb6*/  .byte 0x00
/*0x8cb7*/  .byte 0x00

            data_8cb8:
/*0x8cb8*/  .word 0x20000d34
            data_8cbc:
/*0x8cbc*/  .word 0x20001bec
            data_8cc0:
/*0x8cc0*/  .word 0x00009e70 /* possible pointer */
            data_8cc4:
/*0x8cc4*/  .word 0x00009cc1 /* possible pointer */


            .thumb_func
            call_8cc8:
/*0x8cc8*/      push {r4, r5, r6, lr}
/*0x8cca*/      mov r4, r1
/*0x8ccc*/      rsb r0, r0, r0, lsl #4
/*0x8cd0*/      ldr r1, [pc, #0x44] /* data_8d18 */
/*0x8cd2*/      add.w r0, r0, r0, lsl #1
/*0x8cd6*/      add.w r6, r1, r0, lsl #3
/*0x8cda*/      addw r6, r6, #0x447
/*0x8cde*/      mov r5, r2
/*0x8ce0*/      mov.w r1, #0x168
/*0x8ce4*/      mov r0, r6
/*0x8ce6*/      bl _memzero
/*0x8cea*/      ldr r1, [pc, #0x30] /* data_8d1c */
/*0x8cec*/      b jump_8d10
            jump_8cee:
/*0x8cee*/      ldrb r3, [r4, #4]
/*0x8cf0*/      b jump_8d08
            jump_8cf2:
/*0x8cf2*/      ldr r0, [r4]
/*0x8cf4*/      ldrh.w r2, [r4, #5]
/*0x8cf8*/      ldrb r0, [r0, r3]
/*0x8cfa*/      ldrb r0, [r1, r0]
/*0x8cfc*/      add.w r0, r0, r0, lsl #1
/*0x8d00*/      add r0, r6
/*0x8d02*/      strh r2, [r0]
/*0x8d04*/      ldrb r2, [r4, #7]
/*0x8d06*/      strb r2, [r0, #2]
            jump_8d08:
/*0x8d08*/      .short 0x1e5b /* subs r3, r3, #1 */
/*0x8d0a*/      uxtb r3, r3
/*0x8d0c*/      bhs jump_8cf2
/*0x8d0e*/      adds r4, #8
            jump_8d10:
/*0x8d10*/      .short 0x1e6d /* subs r5, r5, #1 */
/*0x8d12*/      uxtb r5, r5
/*0x8d14*/      bhs jump_8cee
/*0x8d16*/      pop {r4, r5, r6, pc}

            data_8d18:
/*0x8d18*/  .word 0x20000d34
            data_8d1c:
/*0x8d1c*/  .word 0x00009872 /* possible pointer */


            .thumb_func
            call_8d20:
/*0x8d20*/      push {r4, lr}
/*0x8d22*/      bl rand
/*0x8d26*/      asrs r1, r0, #0x1f
/*0x8d28*/      add.w r1, r0, r1, lsr #30
/*0x8d2c*/      bic r1, r1, #3
/*0x8d30*/      subs r0, r0, r1
/*0x8d32*/      .short 0x1c40 /* adds r0, r0, #1 */
/*0x8d34*/      uxtb r0, r0
/*0x8d36*/      pop {r4, pc}

            .thumb_func
            call_8d38:
/*0x8d38*/      push {r4, lr}
/*0x8d3a*/      bl rand
/*0x8d3e*/      ldr r1, [pc, #0x18] /* data_8d58 */
/*0x8d40*/      ldr r1, [r1, #8]
/*0x8d42*/      ldrb.w r1, [r1, #0xc7]
/*0x8d46*/      lsls r2, r1, #2
/*0x8d48*/      sdiv r3, r0, r2
/*0x8d4c*/      mls r0, r2, r3, r0
/*0x8d50*/      add r0, r1
/*0x8d52*/      rsbs r0, r0, #0
/*0x8d54*/      sxth r0, r0
/*0x8d56*/      pop {r4, pc}

            data_8d58:
/*0x8d58*/  .word 0x20001bec


            .thumb_func
            call_8d5c:
/*0x8d5c*/      push.w {r3, r4, r5, r6, r7, r8, sb, lr}
/*0x8d60*/      mov r6, r2
/*0x8d62*/      mov sb, r1
/*0x8d64*/      mov r4, r0
/*0x8d66*/      b jump_8da4
            jump_8d68:
/*0x8d68*/      ldrb r1, [r4, #1]
/*0x8d6a*/      ldrb.w r5, [sb, r1]
/*0x8d6e*/      cbz r5, jump_8da2
/*0x8d70*/      ldrb r0, [r4]
/*0x8d72*/      mov r1, sp
/*0x8d74*/      bl call_3d78
/*0x8d78*/      movs r3, #3
/*0x8d7a*/      mov r7, sp
/*0x8d7c*/      ldr.w r8, [pc, #0x30] /* data_8db0 */
/*0x8d80*/      b jump_8d94
            jump_8d82:
/*0x8d82*/      add.w r0, r8, r3
/*0x8d86*/      ldrb.w r0, [r0, #0x78]
/*0x8d8a*/      muls r0, r5, r0
/*0x8d8c*/      lsrs r1, r0, #8
/*0x8d8e*/      adds r0, r7, r3
/*0x8d90*/      bl call_8db4
            jump_8d94:
/*0x8d94*/      .short 0x1e5b /* subs r3, r3, #1 */
/*0x8d96*/      uxtb r3, r3
/*0x8d98*/      bhs jump_8d82
/*0x8d9a*/      ldrb r0, [r4]
/*0x8d9c*/      mov r1, sp
/*0x8d9e*/      bl call_3ef4
            jump_8da2:
/*0x8da2*/      .short 0x1ca4 /* adds r4, r4, #2 */
            jump_8da4:
/*0x8da4*/      .short 0x1e76 /* subs r6, r6, #1 */
/*0x8da6*/      uxtb r6, r6
/*0x8da8*/      bhs jump_8d68
/*0x8daa*/      pop.w {r3, r4, r5, r6, r7, r8, sb, pc}

/*0x8dae*/  .byte 0x00
/*0x8daf*/  .byte 0x00

            data_8db0:
/*0x8db0*/  .word 0x20001da8


            .thumb_func
            call_8db4:
/*0x8db4*/      ldrb r2, [r0]
/*0x8db6*/      cmp r2, r1
/*0x8db8*/      bhs jump_8dbc
/*0x8dba*/      strb r1, [r0]
            jump_8dbc:
/*0x8dbc*/      bx lr

/*0x8dbe*/  .byte 0x00
/*0x8dbf*/  .byte 0x00

            jump_8dc0:
/*0x8dc0*/      ldr r0, [pc, #8] /* data_8dcc */
/*0x8dc2*/      ldr r2, [pc, #8] /* data_8dcc */
/*0x8dc4*/      movs r1, #0x7f
/*0x8dc6*/      ldrb r0, [r0, #3]
/*0x8dc8*/      b.w loc_3db6

            data_8dcc:
/*0x8dcc*/  .word 0x20000085


            .thumb_func
            call_8dd0:
/*0x8dd0*/      push {lr}
/*0x8dd2*/      bl call_8df8
/*0x8dd6*/      mov r1, r0
/*0x8dd8*/      ldr r2, [pc, #0x18] /* data_8df4 */
/*0x8dda*/      movs r0, #0
            jump_8ddc:
/*0x8ddc*/      add.w r3, r2, r0, lsl #1
/*0x8de0*/      ldrh r3, [r3, #2]
/*0x8de2*/      ubfx r3, r3, #0, #0xa
/*0x8de6*/      cmp r3, r1
/*0x8de8*/      beq jump_8df2
/*0x8dea*/      .short 0x1c40 /* adds r0, r0, #1 */
/*0x8dec*/      uxtb r0, r0
/*0x8dee*/      cmp r0, #0x14
/*0x8df0*/      blo jump_8ddc
            jump_8df2:
/*0x8df2*/      pop {pc}

            data_8df4:
/*0x8df4*/  .word 0x20000d34


            .thumb_func
            call_8df8:
/*0x8df8*/      ldr r0, [pc, #0x10] /* data_8e0c */
/*0x8dfa*/      mov.w r2, #0x100
/*0x8dfe*/      ldrb r1, [r0, #1]
/*0x8e00*/      ldrb r0, [r0, #2]
/*0x8e02*/      and.w r1, r2, r1, lsl #6
/*0x8e06*/      add r0, r1
/*0x8e08*/      bx lr

/*0x8e0a*/  .byte 0x00
/*0x8e0b*/  .byte 0x00

            data_8e0c:
/*0x8e0c*/  .word 0x20000058

            jump_8e10:
/*0x8e10*/      push.w {r4, r5, r6, r7, r8, lr}
/*0x8e14*/      ldr r5, [pc, #0xf0] /* data_8f08 */
/*0x8e16*/      mov.w r7, #-1
/*0x8e1a*/      ldrb r0, [r5]
/*0x8e1c*/      cmp r0, #5
/*0x8e1e*/      beq jump_8e22
/*0x8e20*/      str r7, [r5, #4]
            jump_8e22:
/*0x8e22*/      bl call_5020
/*0x8e26*/      cmp r0, #0
/*0x8e28*/      bne jump_8f04
/*0x8e2a*/      ldr r6, [pc, #0xdc] /* data_8f08 */
/*0x8e2c*/      ldrb r0, [r5]
/*0x8e2e*/      movs r4, #1
/*0x8e30*/      ldr r1, [pc, #0xd8] /* data_8f0c */
/*0x8e32*/      adds r6, #0xc
/*0x8e34*/      cmp r0, #5
/*0x8e36*/      beq jump_8e54
/*0x8e38*/      ldrb r2, [r1, #1]
/*0x8e3a*/      sub.w r8, r6, #4
/*0x8e3e*/      lsls r3, r2, #0x1e
/*0x8e40*/      bpl jump_8ee2
/*0x8e42*/      cmp r0, #1
/*0x8e44*/      beq jump_8f04
/*0x8e46*/      cmp r0, #2
/*0x8e48*/      beq jump_8e6e
/*0x8e4a*/      cmp r0, #3
/*0x8e4c*/      beq jump_8e60
/*0x8e4e*/      cmp r0, #4
/*0x8e50*/      bne jump_8ee6
/*0x8e52*/      b jump_8edc
            jump_8e54:
/*0x8e54*/      ldrb r0, [r1, #1]
/*0x8e56*/      lsls r0, r0, #0x1d
/*0x8e58*/      bmi jump_8f04
/*0x8e5a*/      ldrh r0, [r6]
/*0x8e5c*/      cmp r0, #0xc8
/*0x8e5e*/      blo jump_8e64
            jump_8e60:
/*0x8e60*/      strb r4, [r5]
/*0x8e62*/      b jump_8f04
            jump_8e64:
/*0x8e64*/      bl call_8fc8
/*0x8e68*/      str r7, [r5, #4]
/*0x8e6a*/      strb r4, [r6, #5]
/*0x8e6c*/      b jump_8ee6
            jump_8e6e:
/*0x8e6e*/      lsls r0, r2, #0x1d
/*0x8e70*/      bmi jump_8e60
/*0x8e72*/      movs r0, #0x10
/*0x8e74*/      ldr r3, [pc, #0x98] /* data_8f10 */
/*0x8e76*/      ldrb r1, [r1, #2]
/*0x8e78*/      b jump_8e80
            jump_8e7a:
/*0x8e7a*/      ldrb r2, [r3, r0]
/*0x8e7c*/      cmp r1, r2
/*0x8e7e*/      beq jump_8e60
            jump_8e80:
/*0x8e80*/      .short 0x1e40 /* subs r0, r0, #1 */
/*0x8e82*/      uxtb r0, r0
/*0x8e84*/      bhs jump_8e7a
/*0x8e86*/      bl call_8dd0
/*0x8e8a*/      movs r7, #0
/*0x8e8c*/      strb r0, [r6, #4]
/*0x8e8e*/      cmp r0, #0x14
/*0x8e90*/      bne jump_8eb6
/*0x8e92*/      ldr r1, [pc, #0x80] /* data_8f14 */
/*0x8e94*/      ldr r2, [pc, #0x80] /* data_8f18 */
/*0x8e96*/      strb r7, [r6, #4]
            jump_8e98:
/*0x8e98*/      ldrb r0, [r6, #4]
/*0x8e9a*/      add.w r3, r1, r0, lsl #1
/*0x8e9e*/      ldrh r3, [r3, #2]
/*0x8ea0*/      cmp.w r2, r3, lsl #22
/*0x8ea4*/      beq jump_8eb0
/*0x8ea6*/      .short 0x1c40 /* adds r0, r0, #1 */
/*0x8ea8*/      uxtb r0, r0
/*0x8eaa*/      strb r0, [r6, #4]
/*0x8eac*/      cmp r0, #0x14
/*0x8eae*/      blo jump_8e98
            jump_8eb0:
/*0x8eb0*/      uxtb r0, r0
/*0x8eb2*/      cmp r0, #0x14
/*0x8eb4*/      beq jump_8e60
            jump_8eb6:
/*0x8eb6*/      bl call_8df8
/*0x8eba*/      strh.w r0, [r8]
/*0x8ebe*/      mov.w r1, #0x320
/*0x8ec2*/      ldr r0, [pc, #0x58] /* data_8f1c */
/*0x8ec4*/      bl _memzero
/*0x8ec8*/      strh r7, [r6]
/*0x8eca*/      strh r7, [r6, #2]
/*0x8ecc*/      movs r0, #3
/*0x8ece*/      strb r0, [r5]
/*0x8ed0*/      ldr r0, [pc, #0x4c] /* data_8f20 */
/*0x8ed2*/      ldr r1, [r0]
/*0x8ed4*/      orr r1, r1, #0x8000000
/*0x8ed8*/      str r1, [r0]
/*0x8eda*/      b jump_8f04
            jump_8edc:
/*0x8edc*/      movs r0, #5
/*0x8ede*/      strb r0, [r5]
/*0x8ee0*/      b jump_8e54
            jump_8ee2:
/*0x8ee2*/      cmp r0, #3
/*0x8ee4*/      beq jump_8eec
            jump_8ee6:
/*0x8ee6*/      movs r0, #0
            jump_8ee8:
/*0x8ee8*/      pop.w {r4, r5, r6, r7, r8, pc}
            jump_8eec:
/*0x8eec*/      bl call_8df8
/*0x8ef0*/      ldrh.w r1, [r8]
/*0x8ef4*/      cmp r0, r1
/*0x8ef6*/      bne jump_8e60
/*0x8ef8*/      bl call_4b70
/*0x8efc*/      cmp r0, #1
/*0x8efe*/      bne jump_8f04
/*0x8f00*/      movs r0, #4
/*0x8f02*/      strb r0, [r5]
            jump_8f04:
/*0x8f04*/      movs r0, #1
/*0x8f06*/      b jump_8ee8

            data_8f08:
/*0x8f08*/  .word 0x20000064
            data_8f0c:
/*0x8f0c*/  .word 0x20000058
            data_8f10:
/*0x8f10*/  .word 0x0000960c /* possible pointer */
            data_8f14:
/*0x8f14*/  .word 0x20000d34
            data_8f18:
/*0x8f18*/  .word 0xffc00000
            data_8f1c:
/*0x8f1c*/  .word 0x20001764
            data_8f20:
/*0x8f20*/  .word 0x20000050

            jump_8f24:
/*0x8f24*/      push.w {r4, r5, r6, r7, r8, lr}
/*0x8f28*/      ldr r1, [pc, #0x8c] /* data_8fb8 */
/*0x8f2a*/      ldr r2, [pc, #0x90] /* data_8fbc */
/*0x8f2c*/      movs r4, #0
/*0x8f2e*/      ldrh r0, [r1]
/*0x8f30*/      add.w r5, r2, r0, lsl #2
/*0x8f34*/      .short 0x1c40 /* adds r0, r0, #1 */
/*0x8f36*/      strh r0, [r1]
/*0x8f38*/      ldrb r0, [r5]
/*0x8f3a*/      ldrb r2, [r5, #1]
/*0x8f3c*/      bfi r4, r0, #0x10, #8
/*0x8f40*/      ubfx r1, r4, #8, #8
/*0x8f44*/      bfi r1, r2, #2, #1
/*0x8f48*/      lsrs r2, r2, #5
/*0x8f4a*/      bfi r4, r1, #8, #8
/*0x8f4e*/      cmp r2, #1
/*0x8f50*/      beq jump_8f58
/*0x8f52*/      cmp r2, #2
/*0x8f54*/      bne jump_8f66
/*0x8f56*/      b jump_8f5e
            jump_8f58:
/*0x8f58*/      orr r1, r1, #2
/*0x8f5c*/      b jump_8f62
            jump_8f5e:
/*0x8f5e*/      bic r1, r1, #2
            jump_8f62:
/*0x8f62*/      bfi r4, r1, #8, #8
            jump_8f66:
/*0x8f66*/      ubfx r6, r4, #8, #8
/*0x8f6a*/      ldr r7, [pc, #0x54] /* data_8fc0 */
/*0x8f6c*/      lsls r1, r6, #0x1d
/*0x8f6e*/      bpl jump_8f74
/*0x8f70*/      bl call_463c
            jump_8f74:
/*0x8f74*/      ldrb r1, [r7, r0]
/*0x8f76*/      mov r0, r4
/*0x8f78*/      bfi r0, r1, #0x18, #8
/*0x8f7c*/      orr r1, r6, #9
/*0x8f80*/      bfi r0, r1, #8, #8
/*0x8f84*/      ubfx r2, r1, #1, #1
/*0x8f88*/      mov r4, r0
/*0x8f8a*/      lsrs r1, r0, #0x18
/*0x8f8c*/      ldr r0, [pc, #0x34] /* data_8fc4 */
/*0x8f8e*/      bl call_3d58
/*0x8f92*/      mov r0, r4
/*0x8f94*/      bl call_46c4
/*0x8f98*/      ldrh r0, [r5]
/*0x8f9a*/      lsls r1, r0, #0x13
/*0x8f9c*/      ldr r0, [pc, #0x18] /* data_8fb8 */
/*0x8f9e*/      ldrh r1, [r5, #2]
/*0x8fa0*/      sub.w r0, r0, #0xc
/*0x8fa4*/      bpl jump_8faa
/*0x8fa6*/      lsls r1, r1, #1
/*0x8fa8*/      b jump_8fb0
            jump_8faa:
/*0x8faa*/      mov.w r2, #0x1f4
/*0x8fae*/      muls r1, r2, r1
            jump_8fb0:
/*0x8fb0*/      str r1, [r0, #4]
/*0x8fb2*/      pop.w {r4, r5, r6, r7, r8, pc}

/*0x8fb6*/  .byte 0x00
/*0x8fb7*/  .byte 0x00

            data_8fb8:
/*0x8fb8*/  .word 0x20000070
            data_8fbc:
/*0x8fbc*/  .word 0x20001764
            data_8fc0:
/*0x8fc0*/  .word 0x00009872 /* possible pointer */
            data_8fc4:
/*0x8fc4*/  .word 0x200000a3


            .thumb_func
            call_8fc8:
/*0x8fc8*/      push {r4, lr}
/*0x8fca*/      ldr r4, [pc, #0x48] /* data_9014 */
/*0x8fcc*/      ldr r1, [pc, #0x48] /* data_9018 */
/*0x8fce*/      ldrh r0, [r4]
/*0x8fd0*/      add.w r3, r1, r0, lsl #2
/*0x8fd4*/      .short 0x1c40 /* adds r0, r0, #1 */
/*0x8fd6*/      strh r0, [r4]
/*0x8fd8*/      bl call_8df8
/*0x8fdc*/      ldr r1, [pc, #0x3c] /* data_901c */
/*0x8fde*/      strh r0, [r3]
/*0x8fe0*/      ldrb r1, [r1, #1]
/*0x8fe2*/      lsls r1, r1, #0x1e
/*0x8fe4*/      bpl jump_8fec
/*0x8fe6*/      add.w r0, r0, #0x3c00
/*0x8fea*/      b jump_8ff0
            jump_8fec:
/*0x8fec*/      add.w r0, r0, #0x5c00
            jump_8ff0:
/*0x8ff0*/      strh r0, [r3]
/*0x8ff2*/      ldrh r0, [r4]
/*0x8ff4*/      cmp r0, #1
/*0x8ff6*/      bls jump_9004
/*0x8ff8*/      ldrh r0, [r4, #2]
/*0x8ffa*/      .short 0x1e9b /* subs r3, r3, #2 */
/*0x8ffc*/      cbz r0, jump_9006
/*0x8ffe*/      strh r0, [r3]
/*0x9000*/      movs r0, #0
/*0x9002*/      strh r0, [r4, #2]
            jump_9004:
/*0x9004*/      pop {r4, pc}
            jump_9006:
/*0x9006*/      ldr r0, [pc, #0xc] /* data_9014 */
/*0x9008*/      subs r0, #0xc
/*0x900a*/      ldr r0, [r0, #4]
/*0x900c*/      mvns r0, r0
/*0x900e*/      lsrs r0, r0, #1
/*0x9010*/      strh r0, [r3]
/*0x9012*/      pop {r4, pc}

            data_9014:
/*0x9014*/  .word 0x20000070
            data_9018:
/*0x9018*/  .word 0x20001764
            data_901c:
/*0x901c*/  .word 0x20000058


            .thumb_func
            call_9020:
/*0x9020*/      push {r4, r5, r6, lr}
/*0x9022*/      ldr r4, [pc, #0x4c] /* r4 = 0x200000df */
/*0x9024*/      ldr r5, [pc, #0x4c] /* r5 = key_gpio_map.KEY_B3_9074 */
/*0x9026*/      movs r6, #0xf       ; r6 = 0xf
            jump_9028:
/*0x9028*/      ldr r1, [r5]        ; (gpio_base) r1 = *r5
/*0x902a*/      ldr r0, [r5, #4]    ; (pin) r0 = *(r5+4)
                ; reset B key
/*0x902c*/      str r0, [r1, #0x28] ; *(gpio_base.PxRR) = r0
/*0x902e*/      .short 0x1e76 /* subs r6, r6, #1 */ ; r6 = r6 - 1
/*0x9030*/      uxtb r6, r6
/*0x9032*/      movs r0, #4         ; r0 = 4
/*0x9034*/      .short 0x1ee4 /* subs r4, r4, #3 */ ; r4 = r4 - 3
/*0x9036*/      bl sleep
/*0x903a*/      bl gpio_get_key_A_data ; r0 = A_data
                ; get gpio base from key map
/*0x903e*/      ldr r2, [r5]        ; (gpio_base) r2 = *r5
                ; get pin from key map
/*0x9040*/      ldr r1, [r5, #4]    ; (pin) r1 = *(r5+4)
                ; set B key
/*0x9042*/      str r1, [r2, #0x24] ; *(gpio_base.PxSRR) = r1
/*0x9044*/      ldrb r1, [r4, #1]   ; r1 = *(uint8_t*)(r4+1)
/*0x9046*/      cmp r1, r0
/*0x9048*/      beq jump_9050       ; r1 == r0 ? jump_9050 : continue
/*0x904a*/      strb r0, [r4, #1]   ; *(uint8_t*)(r4+1) = r0
/*0x904c*/      movs r0, #3         ; r0 = 3
/*0x904e*/      b jump_905c
            jump_9050:
/*0x9050*/      ldrb r0, [r4]       ; r0 = *(uint8_t*)r4
/*0x9052*/      cbz r0, jump_905e   ; r0 == 0 ? jump_905e : continue
/*0x9054*/      cmp r0, #1
/*0x9056*/      bne jump_905a       ; r0 == 1 ? jump_905a : continue
/*0x9058*/      strb r1, [r4, #2]   ; *(uint8_t*)(r4+2) = r1
            jump_905a:
/*0x905a*/      .short 0x1e40 /* subs r0, r0, #1 */ ; r0 = r0 - 1
            jump_905c:
/*0x905c*/      strb r0, [r4]       ; *(uint8_t*)r4 = r0
            jump_905e:
/*0x905e*/      cmp r6, #0
                ; reached B5 key ? return
/*0x9060*/      beq jump_906c       ; r6 == 0 ? jump_906c : continue
/*0x9062*/      movs r0, #5         ; r0 = 5
/*0x9064*/      bl sleep
                ; move to next key...
/*0x9068*/      subs r5, #8         ; r5 = 8
/*0x906a*/      b jump_9028
            jump_906c:
/*0x906c*/      pop {r4, r5, r6, pc}

/*0x906e*/  .byte 0x00
/*0x906f*/  .byte 0x00

            data_9070:
/*0x9070*/  .word 0x200000df
            key_gpio_map.KEY_B3_9074:
/*0x9074*/  .word 0x000099e2 /* possible pointer */

            jump_9078:
/*0x9078*/      push {r4, r5, r6, lr}
/*0x907a*/      ldr r0, [pc, #0x48]     /* r0 = 0x20000004 */
/*0x907c*/      sub sp, #0x18
/*0x907e*/      ldr r0, [r0]            ; r0 = *0x20000004
/*0x9080*/      ldr r1, [pc, #0x44]     /* r1 = 0x0036ee80 */
/*0x9082*/      ldr r6, [pc, #0x48]     /* GPTM1_BASE_90cc */
/*0x9084*/      udiv r4, r0, r1         ; r4 = r0 / r1
/*0x9088*/      .short 0x1e64 /* subs r4, r4, #1 */ ; r4 = r4 - 1
/*0x908a*/      strh.w r4, [sp, #0xc]   ; *(uint16_t*)(sp+0xc) = r4
/*0x908e*/      movs r5, #0             ; r5 = 0
/*0x9090*/      strh.w r5, [sp, #0xe]   ; *(uint16_t*)(sp+0xe) = r5
/*0x9094*/      add r1, sp, #0xc        ; r1 = sp + 0xc
/*0x9096*/      mov r0, r6              ; r0 = r6
/*0x9098*/      bl TM_TimeBaseInit
/*0x909c*/      strb.w r5, [sp]
/*0x90a0*/      movs r0, #7
/*0x90a2*/      strh.w r0, [sp, #2]
/*0x90a6*/      movs r0, #1
/*0x90a8*/      strb.w r0, [sp, #4]
/*0x90ac*/      strb.w r5, [sp, #5]
/*0x90b0*/      lsrs r0, r4, #1
/*0x90b2*/      strh.w r0, [sp, #6]
/*0x90b6*/      mov r1, sp
/*0x90b8*/      mov r0, r6
/*0x90ba*/      bl TM_OutputInit
/*0x90be*/      add sp, #0x18
/*0x90c0*/      pop {r4, r5, r6, pc}

/*0x90c2*/  .byte 0x00
/*0x90c3*/  .byte 0x00

            data_90c4:
/*0x90c4*/  .word 0x20000004
            data_90c8:
/*0x90c8*/  .word 0x0036ee80
            GPTM1_BASE_90cc:
/*0x90cc*/  .word 0x4006f000


            .thumb_func
            mbia_send_instruction:
/*0x90d0*/      push {r4, lr}
/*0x90d2*/      ldr r1, [pc, #0x28] /* r1 = GPIOA_BASE_90fc */
/*0x90d4*/      mov.w r4, #0x8000   ; r4 = 0x8000
                ; reset PA15/MBIA_LE
/*0x90d8*/      str r4, [r1, #0x28] ; *(GPIOA.PARR) = 0x8000
/*0x90da*/      nop
/*0x90dc*/      nop
                ; set PA15/MBIA_LE
/*0x90de*/      str r4, [r1, #0x24] ; *(GPIOA.PASRR) = 0x8000
/*0x90e0*/      mov.w r2, #0x4000   ; r2 = 0x4000
/*0x90e4*/      b jump_90f0
            jump_90e6:
                ; reset PA14/MBIA_DCLK
/*0x90e6*/      str r2, [r1, #0x28] ; *(GPIOA.PARR) = 0x4000
/*0x90e8*/      nop
/*0x90ea*/      nop
                ; set PA14/MBIA_DCLK
/*0x90ec*/      str r2, [r1, #0x24] ; *(GPIOA.PASRR) = 0x4000
/*0x90ee*/      nop
            jump_90f0:
/*0x90f0*/      .short 0x1e40 /* subs r0, r0, #1 */
/*0x90f2*/      uxtb r0, r0         ; r0 = r0
/*0x90f4*/      bhs jump_90e6       ; r0 >= 0 ? jump_90e6 : continue
                ; reset PA15/MBIA_LE
/*0x90f6*/      str r4, [r1, #0x28] ; *(GPIOA.PARR) = 0x8000
/*0x90f8*/      pop {r4, pc}

/*0x90fa*/  .byte 0x00
/*0x90fb*/  .byte 0x00

            GPIOA_BASE_90fc:
/*0x90fc*/  .word 0x400b0000


            .thumb_func
            mbia_shift_data:
            ; r0 : value
            ; r1 : len
/*0x9100*/      push {r4, r5, r6, r7, lr}
/*0x9102*/      movs r2, #4         ; r2 = 4
/*0x9104*/      ldr r3, [pc, #0x24] /* r3 = GPIOC_BASE_912c */
/*0x9106*/      lsls r4, r2, #0xc   ; r4 = 0x4000
/*0x9108*/      ldr r5, [pc, #0x24] /* r5 = GPIOA_BASE_9130 */
/*0x910a*/      movw r6, #0xffff    ; r6 = 0xffff
/*0x910e*/      b jump_9124
            jump_9110:
/*0x9110*/      nop
                ; reset PA14/MBIA_DCLK
/*0x9112*/      str r4, [r5, #0x28] ; *(GPIOA.PARR) = 0x4000
/*0x9114*/      lsls r7, r0, #0x10  ; r7 = r0 << 0x10
                ; jump if r0[15] == 1 else continue
                ; write r0[15] to MBIA_SDI
/*0x9116*/      bpl jump_911c       ; r7 >= 0 ? jump_911c : continue
                ; set PC2/MBIA_SDI (write 1)
/*0x9118*/      str r2, [r3, #0x24] ; *(GPIOC.PCSRR) = 4
/*0x911a*/      b jump_911e
            jump_911c:
                ; reset PC2/MBIA_SDI (write 0)
/*0x911c*/      str r2, [r3, #0x28] ; *(GPIOC.PCRR) = 4
            jump_911e:
                ; set PA14/MBIA_DCLK
/*0x911e*/      str r4, [r5, #0x24] ; *(GPIOA.PASRR) = 0x4000
                ; move to next bit in src
/*0x9120*/      and.w r0, r6, r0, lsl #1 ; r0 = 0xffff & (r0<<1)
            jump_9124:
/*0x9124*/      .short 0x1e49 /* subs r1, r1, #1 */ ; r1 = r1 - 1
/*0x9126*/      uxtb r1, r1
/*0x9128*/      bhs jump_9110       ; r1 >= 0 ? jump_9110 : continue
/*0x912a*/      pop {r4, r5, r6, r7, pc}

            GPIOC_BASE_912c:
/*0x912c*/  .word 0x400b4000
            GPIOA_BASE_9130:
/*0x9130*/  .word 0x400b0000


            .thumb_func
            call_9134:
/*0x9134*/      push {r4, lr}
/*0x9136*/      movs r3, #1
/*0x9138*/      movs r2, #8
/*0x913a*/      b jump_914c
            jump_913c:
/*0x913c*/      ands.w r4, r1, r3
/*0x9140*/      beq jump_9144
/*0x9142*/      movs r4, #1
            jump_9144:
/*0x9144*/      lsls r3, r3, #0x19
/*0x9146*/      strb r4, [r0], #1
/*0x914a*/      lsrs r3, r3, #0x18
            jump_914c:
/*0x914c*/      .short 0x1e52 /* subs r2, r2, #1 */
/*0x914e*/      uxtb r2, r2
/*0x9150*/      bhs jump_913c
/*0x9152*/      pop {r4, pc}

            .thumb_func
            call_9154:
/*0x9154*/      push {r4, r5, lr}
/*0x9156*/      movs r3, #1
/*0x9158*/      cbz r2, jump_915e
/*0x915a*/      movs r4, #0
/*0x915c*/      strb r4, [r1]
            jump_915e:
/*0x915e*/      movs r4, #8
/*0x9160*/      b jump_9178
            jump_9162:
/*0x9162*/      ldrb r5, [r0], #1
/*0x9166*/      cbz r5, jump_9174
/*0x9168*/      ldrb r5, [r1]
/*0x916a*/      cbz r2, jump_9170
/*0x916c*/      orrs r5, r3
/*0x916e*/      b jump_9172
            jump_9170:
/*0x9170*/      bics r5, r3
            jump_9172:
/*0x9172*/      strb r5, [r1]
            jump_9174:
/*0x9174*/      lsls r3, r3, #0x19
/*0x9176*/      lsrs r3, r3, #0x18
            jump_9178:
/*0x9178*/      .short 0x1e64 /* subs r4, r4, #1 */
/*0x917a*/      uxtb r4, r4
/*0x917c*/      bhs jump_9162
/*0x917e*/      pop {r4, r5, pc}

            .thumb_func
            call_9180:
/*0x9180*/      push {r4, lr}
/*0x9182*/      ldr r4, [pc, #0x24] /* r4 = 0x20000ad0 */
/*0x9184*/      mov.w r2, #0x20     ; (len) r2 = 0x20
/*0x9188*/      cbz r1, jump_9194   ; arg2 == 1 ? jump_9194 : continue
/*0x918a*/      adds r1, r4, #4     ; (dst) r1 = 0x20000ad4
/*0x918c*/      pop.w {r4, lr}
/*0x9190*/      b.w memcpy          ; memcpy(arg1, 0x20000ad4, 0x20)
            jump_9194:
/*0x9194*/      mov r1, r0          ; r1 = arg1
/*0x9196*/      adds r0, r4, #4     ; r0 = 0x20000ad4
/*0x9198*/      bl memcpy
/*0x919c*/      movs r1, #0x20
/*0x919e*/      adds r0, r4, #4
/*0x91a0*/      pop.w {r4, lr}
/*0x91a4*/      b.w call_6998

            data_91a8:
/*0x91a8*/  .word 0x20000ad0


            .thumb_func
            call_91ac:
/*0x91ac*/      ldr r0, [pc, #0x48] /* data_91f8 */
/*0x91ae*/      push {r4, lr}
/*0x91b0*/      ldrb r0, [r0, #2]
/*0x91b2*/      bl call_532c
/*0x91b6*/      ldr r2, [pc, #0x44] /* data_91fc */
/*0x91b8*/      ands r1, r0, #0xff
/*0x91bc*/      beq jump_91ce
/*0x91be*/      cmp r1, #1
/*0x91c0*/      beq jump_91ce
/*0x91c2*/      cmp r1, #2
/*0x91c4*/      beq jump_91dc
/*0x91c6*/      cmp r1, #4
/*0x91c8*/      beq jump_91ea
/*0x91ca*/      movs r0, #0
/*0x91cc*/      pop {r4, pc}
            jump_91ce:
/*0x91ce*/      ubfx r0, r0, #8, #8
/*0x91d2*/      add.w r0, r2, r0, lsl #5
/*0x91d6*/      addw r0, r0, #0x5af
/*0x91da*/      pop {r4, pc}
            jump_91dc:
/*0x91dc*/      ubfx r0, r0, #8, #8
/*0x91e0*/      add.w r0, r2, r0, lsl #5
/*0x91e4*/      addw r0, r0, #0x70f
/*0x91e8*/      pop {r4, pc}
            jump_91ea:
/*0x91ea*/      ubfx r0, r0, #8, #8
/*0x91ee*/      add.w r0, r2, r0, lsl #5
/*0x91f2*/      addw r0, r0, #0x72f
/*0x91f6*/      pop {r4, pc}

            data_91f8:
/*0x91f8*/  .word 0x20000ad0
            data_91fc:
/*0x91fc*/  .word 0x20000d34


            .thumb_func
            call_9200:
/*0x9200*/      push {r4, r5, r6, lr}
/*0x9202*/      mov r4, r0
/*0x9204*/      movs r0, #0
/*0x9206*/      bl usb_get_ep_len
/*0x920a*/      mov r5, r0
/*0x920c*/      ldr r0, [r4, #0x20]
/*0x920e*/      adds r1, r0, #1
/*0x9210*/      beq jump_9240
/*0x9212*/      ldrb.w r1, [r4, #0x24]
/*0x9216*/      cmp r1, #1
/*0x9218*/      bne jump_9240
/*0x921a*/      cmp r0, r5
/*0x921c*/      blo jump_9224
/*0x921e*/      subs r0, r0, r5
/*0x9220*/      str r0, [r4, #0x20]
/*0x9222*/      b jump_9230
            jump_9224:
/*0x9224*/      mov r5, r0
/*0x9226*/      movs r0, #0
/*0x9228*/      str r0, [r4, #0x20]
/*0x922a*/      movs r0, #2
/*0x922c*/      strb.w r0, [r4, #0x24]
            jump_9230:
/*0x9230*/      mov r2, r5
/*0x9232*/      movs r0, #0
/*0x9234*/      ldr r1, [r4, #0x1c]
/*0x9236*/      bl usb_write_ep_in_buffer
/*0x923a*/      ldr r0, [r4, #0x1c]
/*0x923c*/      add r0, r5
/*0x923e*/      str r0, [r4, #0x1c]
            jump_9240:
/*0x9240*/      pop {r4, r5, r6, pc}
            jump_9242:
/*0x9242*/      push {r4, lr}
/*0x9244*/      mov r4, r0
/*0x9246*/      movs r0, #0
/*0x9248*/      strb r0, [r4, #0x19]
/*0x924a*/      cbz r1, jump_9260
/*0x924c*/      cmp r1, #1
/*0x924e*/      beq jump_9264
/*0x9250*/      cmp r1, #2
/*0x9252*/      bne jump_9276
/*0x9254*/      ldrb r0, [r4, #4]
/*0x9256*/      and r0, r0, #0xf
/*0x925a*/      bl usb_get_ep_stall_status
/*0x925e*/      b jump_9264
            jump_9260:
/*0x9260*/      ldrb.w r0, [r4, #0x34]
            jump_9264:
/*0x9264*/      strb r0, [r4, #0x18]
/*0x9266*/      add.w r0, r4, #0x18
/*0x926a*/      str r0, [r4, #0x1c]
/*0x926c*/      movs r0, #2
/*0x926e*/      str r0, [r4, #0x20]
/*0x9270*/      movs r0, #1
/*0x9272*/      strb.w r0, [r4, #0x24]
            jump_9276:
/*0x9276*/      pop {r4, pc}

            .thumb_func
            call_9278:
/*0x9278*/      push {r4, r5, r6, lr}
/*0x927a*/      mov r4, r0          ; r4 = arg1
/*0x927c*/      ldrh r0, [r0]       ; r0 = *(uint16_t*)arg1
/*0x927e*/      movs r5, #1         ; r5 = 1
/*0x9280*/      cmp.w r0, #0x500
/*0x9284*/      beq jump_9322       ; r0 == 0x500 ? jump_9322
/*0x9286*/      bgt jump_92ca       ; r0 > 0x500 ? jump_93ca
/*0x9288*/      cmp.w r0, #0x100
/*0x928c*/      beq jump_9314       ; r0 == 0x100 ? jump_9314
/*0x928e*/      bgt jump_92a8       ; r0 > 0x100 ? jump_92a8
/*0x9290*/      cmp r0, #0x80
/*0x9292*/      beq jump_930c       ; r0 == 0x80 ? jump_930c
/*0x9294*/      cmp r0, #0x81
/*0x9296*/      beq jump_9310       ; r0 == 0x81 ? jump_9310
/*0x9298*/      cmp r0, #0x82
/*0x929a*/      bne jump_9366       ; r0 != 0x82 ? jump_9366
/*0x929c*/      movs r1, #2         ; r1 = 2
            jump_929e:
/*0x929e*/      mov r0, r4          ; r0 = arg1
/*0x92a0*/      pop.w {r4, r5, r6, lr}
/*0x92a4*/      b.w jump_9242
            jump_92a8:
/*0x92a8*/      cmp.w r0, #0x102
/*0x92ac*/      beq jump_9318       ; r0 == 0x102 ? jump_9318 : continue
/*0x92ae*/      cmp.w r0, #0x300
/*0x92b2*/      beq jump_931c       ; r0 == 0x300 ? jump_931c : continue
/*0x92b4*/      sub.w r0, r0, #0x300 ; r0 = r0 - 0x300
/*0x92b8*/      subs r0, #2         ; r0 = r0 - 2
/*0x92ba*/      bne jump_9366       ; r0 != 0 ? jump_9366 : continue
/*0x92bc*/      movs r2, #1         ; r2 = 1
            jump_92be:
/*0x92be*/      movs r1, #2         ; r1 = 2
            jump_92c0:
/*0x92c0*/      mov r0, r4          ; r0 = arg1
/*0x92c2*/      pop.w {r4, r5, r6, lr}
/*0x92c6*/      b.w jump_9394
            jump_92ca:
/*0x92ca*/      cmp.w r0, #0x900
/*0x92ce*/      beq jump_936c       ; r0 == 0x900 ? jump_936c : continue
/*0x92d0*/      bgt jump_92f2       ; r0 > 0x900 ? jump_92f2 : continue
/*0x92d2*/      cmp.w r0, #0x680
/*0x92d6*/      beq jump_9330       ; r0 == 0x680 ? jump_9330 : continue
/*0x92d8*/      sub.w r0, r0, #0x600 ; r0 = r0 - 0x600
/*0x92dc*/      subs r0, #0x81      ; r0 = r0 - 0x81
/*0x92de*/      beq jump_9368       ; r0 == 0 ? jump_9368 : continue
/*0x92e0*/      sub.w r0, r0, #0x100 ; r0 = r0 - 0x100
/*0x92e4*/      subs r0, #0xff      ; r0 = r0 - 0xff
/*0x92e6*/      bne jump_9366       ; r0 != 0 ? jump_9366 : continue
/*0x92e8*/      add.w r0, r4, #0x30 ; r0 = arg1 + 0x30
/*0x92ec*/      strd r0, r5, [r4, #0x1c] ; *(arg1+0x1c)=r0; *(arg1+0x20)=r5
/*0x92f0*/      b jump_9362
            jump_92f2:
/*0x92f2*/      sub.w r0, r0, #0xa00 ; r0 = r0 - 0xa00
/*0x92f6*/      subs r0, #0x81      ; r0 = r0 - 0x81
/*0x92f8*/      beq jump_9390       ; r0 == 0 ? jump_9390
/*0x92fa*/      cmp r0, #0x80
/*0x92fc*/      bne jump_9366       ; r0 != 0x80 ? jump_9366 : continue
/*0x92fe*/      ldr r1, [r4, #0x58] ; r1 = *(arg1+0x58)
            jump_9300:
/*0x9300*/      cmp r1, #0
/*0x9302*/      beq jump_9366
/*0x9304*/      mov r0, r4
/*0x9306*/      pop.w {r4, r5, r6, lr}
/*0x930a*/      bx r1
            jump_930c:
/*0x930c*/      movs r1, #0
/*0x930e*/      b jump_929e
            jump_9310:
/*0x9310*/      movs r1, #1
/*0x9312*/      b jump_929e
            jump_9314:
/*0x9314*/      movs r2, #0
/*0x9316*/      b jump_931e
            jump_9318:
/*0x9318*/      movs r2, #0
/*0x931a*/      b jump_92be
            jump_931c:
/*0x931c*/      movs r2, #1
            jump_931e:
/*0x931e*/      movs r1, #0
/*0x9320*/      b jump_92c0
            jump_9322:
/*0x9322*/      ldrb r0, [r4, #2]
/*0x9324*/      bl USBD_SetAddress
/*0x9328*/      strb.w r5, [r4, #0x24]
/*0x932c*/      movs r0, #5
/*0x932e*/      b jump_938a
            jump_9330:
/*0x9330*/      ldrb r0, [r4, #3]
/*0x9332*/      cmp r0, #1
/*0x9334*/      beq jump_9356
/*0x9336*/      cmp r0, #2
/*0x9338*/      beq jump_935a
/*0x933a*/      cmp r0, #3
/*0x933c*/      bne jump_9366
/*0x933e*/      ldrb r0, [r4, #2]
/*0x9340*/      ldr r1, [r4, #0x14]
/*0x9342*/      cmp r1, r0
/*0x9344*/      bls jump_9366
/*0x9346*/      ldr r1, [r4, #0x10]
/*0x9348*/      ldr.w r0, [r1, r0, lsl #2]
/*0x934c*/      cmp r0, #0
/*0x934e*/      beq jump_9366
            jump_9350:
/*0x9350*/      str r0, [r4, #0x1c]
/*0x9352*/      ldrb r0, [r0]
/*0x9354*/      b jump_9360
            jump_9356:
/*0x9356*/      ldr r0, [r4, #8]
/*0x9358*/      b jump_9350
            jump_935a:
/*0x935a*/      ldr r0, [r4, #0xc]
/*0x935c*/      str r0, [r4, #0x1c]
/*0x935e*/      ldrh r0, [r0, #2]
            jump_9360:
/*0x9360*/      str r0, [r4, #0x20]
            jump_9362:
/*0x9362*/      strb.w r5, [r4, #0x24]
            jump_9366:
/*0x9366*/      pop {r4, r5, r6, pc}
            jump_9368:
/*0x9368*/      ldr r1, [r4, #0x54]
/*0x936a*/      b jump_9300
            jump_936c:
/*0x936c*/      ldrb r0, [r4, #2]
/*0x936e*/      strb.w r0, [r4, #0x30]
/*0x9372*/      strb.w r5, [r4, #0x24]
/*0x9376*/      movs r5, #1
            jump_9378:
/*0x9378*/      sxtb r0, r5
/*0x937a*/      ldr.w r1, [r4, #0x84]
/*0x937e*/      bl USBD_EPTInit
/*0x9382*/      .short 0x1c6d /* adds r5, r5, #1 */
/*0x9384*/      cmp r5, #8
/*0x9386*/      blo jump_9378
/*0x9388*/      movs r0, #6
            jump_938a:
/*0x938a*/      strb.w r0, [r4, #0x32]
/*0x938e*/      pop {r4, r5, r6, pc}
            jump_9390:
/*0x9390*/      ldr r1, [r4, #0x5c]
/*0x9392*/      b jump_9300
            jump_9394:
/*0x9394*/      push {r4, r5, r6, lr}
/*0x9396*/      mov r4, r0
/*0x9398*/      movs r6, #1
/*0x939a*/      cbz r1, jump_93b6
/*0x939c*/      cmp r1, #2
/*0x939e*/      bne jump_93b4
/*0x93a0*/      ldrb r0, [r4, #4]
/*0x93a2*/      ands r5, r0, #0xf
/*0x93a6*/      beq jump_93b0
/*0x93a8*/      cbz r2, jump_93cc
/*0x93aa*/      mov r0, r5
/*0x93ac*/      bl usb_set_ep_stall_status
            jump_93b0:
/*0x93b0*/      strb.w r6, [r4, #0x24]
            jump_93b4:
/*0x93b4*/      pop {r4, r5, r6, pc}
            jump_93b6:
/*0x93b6*/      ldrb r0, [r4, #2]
/*0x93b8*/      cmp r0, #1
/*0x93ba*/      bne jump_93b4
/*0x93bc*/      ldrb r0, [r4, #0x34]!
/*0x93c0*/      bfi r0, r2, #1, #1
/*0x93c4*/      strb r0, [r4], #-0x10
/*0x93c8*/      strb r6, [r4]
/*0x93ca*/      pop {r4, r5, r6, pc}
            jump_93cc:
/*0x93cc*/      ldr r0, [r4, #0x38]
/*0x93ce*/      cmp r0, #0
/*0x93d0*/      bne jump_93b0
/*0x93d2*/      mov r0, r5
/*0x93d4*/      bl usb_clear_ep_stall_status
/*0x93d8*/      mov r0, r5
/*0x93da*/      bl usb_clear_ep_data_toggle_status
/*0x93de*/      b jump_93b0

            .thumb_func
            copy_words_1:
/*0x93e0*/      .short 0x1e52 /* subs r2, r2, #1 */ ; r2 = arg3 - 1
/*0x93e2*/      bmi jump_93ee               ; r2 < 0 ? jump_93ee : continue
/*0x93e4*/      ldr.w r3, [r0, r2, lsl #2]  ; r3 = *(arg1 + (r2*4))
/*0x93e8*/      str.w r3, [r1, r2, lsl #2]  ; *(arg2 + (r2*4)) = r3
/*0x93ec*/      b copy_words_1
            jump_93ee:
/*0x93ee*/      bx lr

            .thumb_func
            usb_compute_epcsr_addr:
/*0x93f0*/      ldr r1, [pc, #8] /* r1 = USB.USBEP0CSR_93fc */
/*0x93f2*/      add.w r0, r0, r0, lsl #2    ; r0 = arg1*5
/*0x93f6*/      add.w r0, r1, r0, lsl #2    ; r0 = arg2 + arg1*20
/*0x93fa*/      bx lr

            USB.USBEP0CSR_93fc:
/*0x93fc*/  .word 0x400a8014

            .thumb_func
            copy_words_2:
/*0x9400*/      b jump_9408
            jump_9402:
/*0x9402*/      ldm r0!, {r3}   ; r3 = *(r0); r0 += 4
/*0x9404*/      .short 0x1f12 /* subs r2, r2, #4 */ ; r2 = r2 - 4
/*0x9406*/      stm r1!, {r3}   ; *(r1) = r3; r1 += 4
            jump_9408:
/*0x9408*/      cmp r2, #0
/*0x940a*/      bne jump_9402   ; r2 != 0 ? jump_9402 : continue
/*0x940c*/      bx lr

            .thumb_func
            loc_940e:
/*0x940e*/      bx lr

            .thumb_func
            clear_words:
/*0x9410*/      movs r0, #0     ; r0 = 0
/*0x9412*/      b jump_9418
            jump_9414:
/*0x9414*/      stm r1!, {r0}   ; *(r1) = 0; r1 += 4
/*0x9416*/      .short 0x1f12 /* subs r2, r2, #4 */ ; r2 = r2 - 4
            jump_9418:
/*0x9418*/      cmp r2, #0
/*0x941a*/      bne jump_9414   ; r2 != 0 ? jump_9414 : continue
/*0x941c*/      bx lr

/*0x941e*/  .byte 0x00
/*0x941f*/  .byte 0x00

            .thumb_func
            main:
/*0x9420*/      bl setup_intr_priority
/*0x9424*/      bl perip_clock_config
/*0x9428*/      bl call_4568
/*0x942c*/      bl spi_flash_init
/*0x9430*/      movs r0, #0xff
/*0x9432*/      bl call_3c1c
/*0x9436*/      bl gpio_config_key_groups
/*0x943a*/      bl mbia_init
/*0x943e*/      nop.w
/*0x9442*/      bl call_951c
/*0x9446*/      bl bftm0_clk_enable
/*0x944a*/      movs r0, #0         ; r0 = 0
                ; enable
/*0x944c*/      bl call_4af4
/*0x9450*/      movs r0, #0xa       ; r0 = 0xa
/*0x9452*/      bl sleep
/*0x9456*/      movs r0, #1         ; r0 = 1
/*0x9458*/      bl call_6acc
/*0x945c*/      bl call_4da8
/*0x9460*/      ldr r4, [pc, #0xb0] /* r4 = 0x20000044 */
/*0x9462*/      movs r5, #1         ; r5 = 1
/*0x9464*/      cbz r0, jump_9468   ; r0 == 0 ? jump_9468 : continue
/*0x9466*/      strh r5, [r4, #6]   ; *(uint16_t*)0x2000004a = 1
            jump_9468:
/*0x9468*/      ldrh r0, [r4, #6]   ; r0 = *(uint16_t*)0x2000004a
/*0x946a*/      cbz r0, jump_948a   ; r0 == 0 ? jump_948a : continue
/*0x946c*/      movs r0, #0         ; r0 = 0
/*0x946e*/      bl call_6dd4
/*0x9472*/      movs r0, #0         ; r0 = 0
/*0x9474*/      bl call_6acc
            jump_9478:
/*0x9478*/      ldrh r0, [r4, #6]   ; r0 = *(uint16_t*)0x2000004a
/*0x947a*/      .short 0x1c40 /* adds r0, r0, #1 */ ; r0 = r0 + 1
/*0x947c*/      strh r0, [r4, #6]   ; *(uint16_t*)0x2000004a = r0
/*0x947e*/      bl call_9538
/*0x9482*/      movs r0, #1
/*0x9484*/      bl call_674c
/*0x9488*/      b jump_9478
            jump_948a:
/*0x948a*/      movs r0, #1
/*0x948c*/      bl call_4af4
/*0x9490*/      bl call_37ac
/*0x9494*/      bl call_8210
/*0x9498*/      ldr r6, [pc, #0x7c] /* 0x200009fc */
            jump_949a:
/*0x949a*/      ldrb r0, [r4, #3]
/*0x949c*/      cbnz r0, jump_94ae
/*0x949e*/      ldrb.w r0, [r6, #0x32]
/*0x94a2*/      cmp r0, #6
/*0x94a4*/      bne jump_950c
/*0x94a6*/      strb r5, [r4, #3]
/*0x94a8*/      movs r0, #0
/*0x94aa*/      bl call_4af4
            jump_94ae:
/*0x94ae*/      ldrb r0, [r4, #3]
/*0x94b0*/      cmp r0, #1
/*0x94b2*/      bne jump_950c
/*0x94b4*/      ldrb r0, [r4]
/*0x94b6*/      cbz r0, jump_94c4
/*0x94b8*/      movs r0, #0
/*0x94ba*/      strb r0, [r4]
/*0x94bc*/      strb r0, [r4, #1]
/*0x94be*/      movs r0, #1
/*0x94c0*/      bl call_4af4
            jump_94c4:
/*0x94c4*/      ldrb r0, [r4, #1]
/*0x94c6*/      cbnz r0, jump_94e8
/*0x94c8*/      ldrb r0, [r4]
/*0x94ca*/      cbnz r0, jump_950c
/*0x94cc*/      ldrb.w r0, [r6, #0x32]
/*0x94d0*/      cmp r0, #6
/*0x94d2*/      bne jump_950c
/*0x94d4*/      strb r5, [r4, #1]
/*0x94d6*/      movs r0, #0
/*0x94d8*/      bl call_4af4
/*0x94dc*/      movs r0, #0         ; r0 = 0
/*0x94de*/      bl call_6dd4
/*0x94e2*/      movs r0, #0
/*0x94e4*/      bl call_6acc
            jump_94e8:
/*0x94e8*/      ldrb r0, [r4, #1]
/*0x94ea*/      cmp r0, #1
/*0x94ec*/      bne jump_950c
/*0x94ee*/      ldrh r0, [r4, #6]
/*0x94f0*/      .short 0x1c40 /* adds r0, r0, #1 */
/*0x94f2*/      strh r0, [r4, #6]
/*0x94f4*/      bl handle_frame
/*0x94f8*/      bl call_9538
/*0x94fc*/      ldr r0, [pc, #0x14] /* 0x20000044 */
/*0x94fe*/      adds r0, #0xc
/*0x9500*/      ldr r0, [r0]
/*0x9502*/      lsrs r0, r0, #0x1e
/*0x9504*/      bne jump_950c
/*0x9506*/      movs r0, #1
/*0x9508*/      bl call_674c
            jump_950c:
/*0x950c*/      ldr r0, [pc, #8] /* 0x200009fc */
/*0x950e*/      bl call_819c
/*0x9512*/      b jump_949a

            data_9514:
/*0x9514*/  .word 0x20000044
            data_9518:
/*0x9518*/  .word 0x200009fc


            .thumb_func
            call_951c:
/*0x951c*/      ldr r1, [pc, #0x14] /* r1 = 0x20000050 */
/*0x951e*/      push {r4, lr}
/*0x9520*/      movs r0, #0         ; r0 = 0
/*0x9522*/      str r0, [r1]        ; *(0x20000050) = 0
/*0x9524*/      bl call_4d9c
/*0x9528*/      bl call_538c
/*0x952c*/      pop.w {r4, lr}
/*0x9530*/      b.w call_4c28

            data_9534:
/*0x9534*/  .word 0x20000050


            .thumb_func
            call_9538:
/*0x9538*/      push {r4, r5, r6, lr}
/*0x953a*/      ldr r5, [pc, #0xc4] /* data_9600 */
/*0x953c*/      ldr r0, [r5]
/*0x953e*/      lsls r0, r0, #2
/*0x9540*/      bpl jump_9552
/*0x9542*/      movs r0, #1
/*0x9544*/      bl call_459c
/*0x9548*/      cbz r0, jump_9552
/*0x954a*/      bl call_51f4
/*0x954e*/      bl call_951c
            jump_9552:
/*0x9552*/      bl call_5150
/*0x9556*/      cmp r0, #0
/*0x9558*/      beq jump_95fe
/*0x955a*/      ldr r4, [pc, #0xa4] /* data_9600 */
/*0x955c*/      subs r4, #0xc
/*0x955e*/      ldrb r0, [r4, #4]
/*0x9560*/      cmp r0, #4
/*0x9562*/      blo jump_956c
/*0x9564*/      .short 0x1f00 /* subs r0, r0, #4 */
/*0x9566*/      strb r0, [r4, #4]
/*0x9568*/      movs r0, #1
/*0x956a*/      strb r0, [r4, #5]
            jump_956c:
/*0x956c*/      ldrb r0, [r4, #2]
/*0x956e*/      cmp r0, #0xff
/*0x9570*/      beq jump_959a
/*0x9572*/      bl call_4b70
/*0x9576*/      cmp r0, #1
/*0x9578*/      bne jump_959a
/*0x957a*/      ldrb r0, [r4, #2]
/*0x957c*/      bl call_3c1c
/*0x9580*/      movs r0, #0xff
/*0x9582*/      strb r0, [r4, #2]
/*0x9584*/      movs r0, #0
/*0x9586*/      bl call_7310
/*0x958a*/      bl call_4c28
/*0x958e*/      bl call_6590
/*0x9592*/      bl call_538c
/*0x9596*/      bl call_4c64
            jump_959a:
/*0x959a*/      bl call_6a2c
/*0x959e*/      bl call_6318
/*0x95a2*/      ldr r0, [pc, #0x60] /* data_9604 */
/*0x95a4*/      ldrb r0, [r0, #2]
/*0x95a6*/      cmp r0, #1
/*0x95a8*/      beq jump_95b6
/*0x95aa*/      ldr r0, [pc, #0x5c] /* data_9608 */
/*0x95ac*/      ldrb r0, [r0]
/*0x95ae*/      lsls r0, r0, #0x1f
/*0x95b0*/      bne jump_95b6
/*0x95b2*/      bl call_4c74
            jump_95b6:
/*0x95b6*/      bl call_4bc4
/*0x95ba*/      ldrb r0, [r4, #5]
/*0x95bc*/      cbz r0, jump_95c2
/*0x95be*/      bl call_4d24
            jump_95c2:
/*0x95c2*/      ldr r0, [r5]
/*0x95c4*/      lsls r1, r0, #4
/*0x95c6*/      bpl jump_95d2
/*0x95c8*/      bic r0, r0, #0x8000000
/*0x95cc*/      str r0, [r5]
/*0x95ce*/      bl call_55b4
            jump_95d2:
/*0x95d2*/      ldr r0, [r5]
/*0x95d4*/      lsls r1, r0, #3
/*0x95d6*/      bpl jump_95e2
/*0x95d8*/      bic r0, r0, #0x10000000
/*0x95dc*/      str r0, [r5]
/*0x95de*/      bl call_3e30
            jump_95e2:
/*0x95e2*/      ldrb r0, [r4, #5]
/*0x95e4*/      cmp r0, #0
/*0x95e6*/      beq jump_95fe
/*0x95e8*/      ldr r0, [pc, #0x14] /* data_9600 */
/*0x95ea*/      ldrb r2, [r4, #4]
/*0x95ec*/      .short 0x1f00 /* subs r0, r0, #4 */
/*0x95ee*/      ldrb r1, [r0, #1]
/*0x95f0*/      add r1, r2
/*0x95f2*/      strb r1, [r0, #1]
/*0x95f4*/      ldrh r0, [r4, #8]
/*0x95f6*/      lsrs r0, r0, #1
/*0x95f8*/      strh r0, [r4, #8]
/*0x95fa*/      movs r0, #0
/*0x95fc*/      strb r0, [r4, #5]
            jump_95fe:
/*0x95fe*/      pop {r4, r5, r6, pc}

            data_9600:
/*0x9600*/  .word 0x20000050
            data_9604:
/*0x9604*/  .word 0x2000006c
            data_9608:
/*0x9608*/  .word 0x20000076

/*0x960c*/  .byte 0x46
/*0x960d*/  .byte 0x47
/*0x960e*/  .byte 0x48
/*0x960f*/  .byte 0x49
/*0x9610*/  .byte 0x4a
/*0x9611*/  .byte 0x4b
/*0x9612*/  .byte 0x4c
/*0x9613*/  .byte 0x4d
/*0x9614*/  .byte 0x4e
/*0x9615*/  .byte 0xe8
/*0x9616*/  .byte 0x39
/*0x9617*/  .byte 0x53
/*0x9618*/  .byte 0x00
/*0x9619*/  .byte 0x00
/*0x961a*/  .byte 0x00
/*0x961b*/  .byte 0x00
/*0x961c*/  .byte 0xe8
/*0x961d*/  .byte 0xe6
/*0x961e*/  .byte 0x15
/*0x961f*/  .byte 0xe8
/*0x9620*/  .byte 0x08
/*0x9621*/  .byte 0xe8
/*0x9622*/  .byte 0x3e
/*0x9623*/  .byte 0xe6
/*0x9624*/  .byte 0xe8
/*0x9625*/  .byte 0xe8
/*0x9626*/  .byte 0xe0
/*0x9627*/  .byte 0x3d
/*0x9628*/  .byte 0x29
/*0x9629*/  .byte 0x10
/*0x962a*/  .byte 0x01
/*0x962b*/  .byte 0x1e
/*0x962c*/  .byte 0x11
/*0x962d*/  .byte 0x01
/*0x962e*/  .byte 0x1f
/*0x962f*/  .byte 0x12
/*0x9630*/  .byte 0x01
/*0x9631*/  .byte 0x20
/*0x9632*/  .byte 0x13
/*0x9633*/  .byte 0x01
/*0x9634*/  .byte 0x21
/*0x9635*/  .byte 0x14
/*0x9636*/  .byte 0x01
/*0x9637*/  .byte 0x3e
/*0x9638*/  .byte 0x20
/*0x9639*/  .byte 0x01
/*0x963a*/  .byte 0x3f
/*0x963b*/  .byte 0x21
/*0x963c*/  .byte 0x01
/*0x963d*/  .byte 0x40
/*0x963e*/  .byte 0x22
/*0x963f*/  .byte 0x01
/*0x9640*/  .byte 0x41
/*0x9641*/  .byte 0x23
/*0x9642*/  .byte 0x01
/*0x9643*/  .byte 0x42
/*0x9644*/  .byte 0x43
/*0x9645*/  .byte 0x01
/*0x9646*/  .byte 0x44
/*0x9647*/  .byte 0x1c
/*0x9648*/  .byte 0x01
/*0x9649*/  .byte 0x45
/*0x964a*/  .byte 0x1d
/*0x964b*/  .byte 0x01
/*0x964c*/  .byte 0x3a
/*0x964d*/  .byte 0x28
/*0x964e*/  .byte 0x01
/*0x964f*/  .byte 0x3b
/*0x9650*/  .byte 0x29
/*0x9651*/  .byte 0x01
/*0x9652*/  .byte 0x3c
/*0x9653*/  .byte 0x2a
/*0x9654*/  .byte 0x01
/*0x9655*/  .byte 0x3d
/*0x9656*/  .byte 0x2c
/*0x9657*/  .byte 0x01
/*0x9658*/  .byte 0x43
/*0x9659*/  .byte 0x4b
/*0x965a*/  .byte 0x01
/*0x965b*/  .byte 0x49
/*0x965c*/  .byte 0xf0
/*0x965d*/  .byte 0x00
/*0x965e*/  .byte 0x4c
/*0x965f*/  .byte 0xf1
/*0x9660*/  .byte 0x00
/*0x9661*/  .byte 0x4a
/*0x9662*/  .byte 0xf3
/*0x9663*/  .byte 0x00
/*0x9664*/  .byte 0x4d
/*0x9665*/  .byte 0xf2
/*0x9666*/  .byte 0x00
/*0x9667*/  .byte 0x4b
/*0x9668*/  .byte 0xf6
/*0x9669*/  .byte 0x00
/*0x966a*/  .byte 0x4e
/*0x966b*/  .byte 0xf5
/*0x966c*/  .byte 0x00
/*0x966d*/  .byte 0x00
/*0x966e*/  .byte 0x00
/*0x966f*/  .byte 0x01
/*0x9670*/  .byte 0x02
/*0x9671*/  .byte 0x00
/*0x9672*/  .byte 0x00
/*0x9673*/  .byte 0x00
/*0x9674*/  .byte 0x0a
/*0x9675*/  .byte 0x00
/*0x9676*/  .byte 0x14
/*0x9677*/  .byte 0x00
/*0x9678*/  .byte 0x1e
/*0x9679*/  .byte 0x00
/*0x967a*/  .byte 0x28
/*0x967b*/  .byte 0x00
/*0x967c*/  .byte 0x32
/*0x967d*/  .byte 0x00
/*0x967e*/  .byte 0x3d
/*0x967f*/  .byte 0x00
/*0x9680*/  .byte 0x48
/*0x9681*/  .byte 0x00
/*0x9682*/  .byte 0x53
/*0x9683*/  .byte 0x00
/*0x9684*/  .byte 0x5e
/*0x9685*/  .byte 0x00
/*0x9686*/  .byte 0x6a
/*0x9687*/  .byte 0x00
/*0x9688*/  .byte 0x75
/*0x9689*/  .byte 0x00
/*0x968a*/  .byte 0x81
/*0x968b*/  .byte 0x00
/*0x968c*/  .byte 0x8d
/*0x968d*/  .byte 0x00
/*0x968e*/  .byte 0x9a
/*0x968f*/  .byte 0x00
/*0x9690*/  .byte 0xa6
/*0x9691*/  .byte 0x00
/*0x9692*/  .byte 0xb3
/*0x9693*/  .byte 0x00
/*0x9694*/  .byte 0xc0
/*0x9695*/  .byte 0x00
/*0x9696*/  .byte 0xce
/*0x9697*/  .byte 0x00
/*0x9698*/  .byte 0xdb
/*0x9699*/  .byte 0x00
/*0x969a*/  .byte 0xe9
/*0x969b*/  .byte 0x00
/*0x969c*/  .byte 0xf8
/*0x969d*/  .byte 0x00
/*0x969e*/  .byte 0x06
/*0x969f*/  .byte 0x01
/*0x96a0*/  .byte 0x15
/*0x96a1*/  .byte 0x01
/*0x96a2*/  .byte 0x24
/*0x96a3*/  .byte 0x01
/*0x96a4*/  .byte 0x33
/*0x96a5*/  .byte 0x01
/*0x96a6*/  .byte 0x43
/*0x96a7*/  .byte 0x01
/*0x96a8*/  .byte 0x53
/*0x96a9*/  .byte 0x01
/*0x96aa*/  .byte 0x63
/*0x96ab*/  .byte 0x01
/*0x96ac*/  .byte 0x73
/*0x96ad*/  .byte 0x01
/*0x96ae*/  .byte 0x84
/*0x96af*/  .byte 0x01
/*0x96b0*/  .byte 0x95
/*0x96b1*/  .byte 0x01
/*0x96b2*/  .byte 0xa7
/*0x96b3*/  .byte 0x01
/*0x96b4*/  .byte 0xb9
/*0x96b5*/  .byte 0x01
/*0x96b6*/  .byte 0xcb
/*0x96b7*/  .byte 0x01
/*0x96b8*/  .byte 0xdd
/*0x96b9*/  .byte 0x01
/*0x96ba*/  .byte 0xf0
/*0x96bb*/  .byte 0x01
/*0x96bc*/  .byte 0x04
/*0x96bd*/  .byte 0x02
/*0x96be*/  .byte 0x17
/*0x96bf*/  .byte 0x02
/*0x96c0*/  .byte 0x2b
/*0x96c1*/  .byte 0x02
/*0x96c2*/  .byte 0x40
/*0x96c3*/  .byte 0x02
/*0x96c4*/  .byte 0x54
/*0x96c5*/  .byte 0x02
/*0x96c6*/  .byte 0x6a
/*0x96c7*/  .byte 0x02
/*0x96c8*/  .byte 0x7f
/*0x96c9*/  .byte 0x02
/*0x96ca*/  .byte 0x95
/*0x96cb*/  .byte 0x02
/*0x96cc*/  .byte 0xac
/*0x96cd*/  .byte 0x02
/*0x96ce*/  .byte 0xc3
/*0x96cf*/  .byte 0x02
/*0x96d0*/  .byte 0xda
/*0x96d1*/  .byte 0x02
/*0x96d2*/  .byte 0xf2
/*0x96d3*/  .byte 0x02
/*0x96d4*/  .byte 0x0a
/*0x96d5*/  .byte 0x03
/*0x96d6*/  .byte 0x23
/*0x96d7*/  .byte 0x03
/*0x96d8*/  .byte 0x3c
/*0x96d9*/  .byte 0x03
/*0x96da*/  .byte 0x55
/*0x96db*/  .byte 0x03
/*0x96dc*/  .byte 0x70
/*0x96dd*/  .byte 0x03
/*0x96de*/  .byte 0x8a
/*0x96df*/  .byte 0x03
/*0x96e0*/  .byte 0xa6
/*0x96e1*/  .byte 0x03
/*0x96e2*/  .byte 0xc1
/*0x96e3*/  .byte 0x03
/*0x96e4*/  .byte 0xdd
/*0x96e5*/  .byte 0x03
/*0x96e6*/  .byte 0xfa
/*0x96e7*/  .byte 0x03
/*0x96e8*/  .byte 0x18
/*0x96e9*/  .byte 0x04
/*0x96ea*/  .byte 0x36
/*0x96eb*/  .byte 0x04
/*0x96ec*/  .byte 0x54
/*0x96ed*/  .byte 0x04
/*0x96ee*/  .byte 0x73
/*0x96ef*/  .byte 0x04
/*0x96f0*/  .byte 0x93
/*0x96f1*/  .byte 0x04
/*0x96f2*/  .byte 0xb3
/*0x96f3*/  .byte 0x04
/*0x96f4*/  .byte 0xd4
/*0x96f5*/  .byte 0x04
/*0x96f6*/  .byte 0xf6
/*0x96f7*/  .byte 0x04
/*0x96f8*/  .byte 0x18
/*0x96f9*/  .byte 0x05
/*0x96fa*/  .byte 0x3b
/*0x96fb*/  .byte 0x05
/*0x96fc*/  .byte 0x5e
/*0x96fd*/  .byte 0x05
/*0x96fe*/  .byte 0x83
/*0x96ff*/  .byte 0x05
/*0x9700*/  .byte 0xa7
/*0x9701*/  .byte 0x05
/*0x9702*/  .byte 0xcd
/*0x9703*/  .byte 0x05
/*0x9704*/  .byte 0xf3
/*0x9705*/  .byte 0x05
/*0x9706*/  .byte 0x1b
/*0x9707*/  .byte 0x06
/*0x9708*/  .byte 0x42
/*0x9709*/  .byte 0x06
/*0x970a*/  .byte 0x6b
/*0x970b*/  .byte 0x06
/*0x970c*/  .byte 0x95
/*0x970d*/  .byte 0x06
/*0x970e*/  .byte 0xbf
/*0x970f*/  .byte 0x06
/*0x9710*/  .byte 0xea
/*0x9711*/  .byte 0x06
/*0x9712*/  .byte 0x16
/*0x9713*/  .byte 0x07
/*0x9714*/  .byte 0x43
/*0x9715*/  .byte 0x07
/*0x9716*/  .byte 0x70
/*0x9717*/  .byte 0x07
/*0x9718*/  .byte 0x9f
/*0x9719*/  .byte 0x07
/*0x971a*/  .byte 0xce
/*0x971b*/  .byte 0x07
/*0x971c*/  .byte 0xfe
/*0x971d*/  .byte 0x07
/*0x971e*/  .byte 0x30
/*0x971f*/  .byte 0x08
/*0x9720*/  .byte 0x62
/*0x9721*/  .byte 0x08
/*0x9722*/  .byte 0x95
/*0x9723*/  .byte 0x08
/*0x9724*/  .byte 0xc9
/*0x9725*/  .byte 0x08
/*0x9726*/  .byte 0xfe
/*0x9727*/  .byte 0x08
/*0x9728*/  .byte 0x34
/*0x9729*/  .byte 0x09
/*0x972a*/  .byte 0x6c
/*0x972b*/  .byte 0x09
/*0x972c*/  .byte 0xa4
/*0x972d*/  .byte 0x09
/*0x972e*/  .byte 0xdd
/*0x972f*/  .byte 0x09
/*0x9730*/  .byte 0x18
/*0x9731*/  .byte 0x0a
/*0x9732*/  .byte 0x53
/*0x9733*/  .byte 0x0a
/*0x9734*/  .byte 0x90
/*0x9735*/  .byte 0x0a
/*0x9736*/  .byte 0xce
/*0x9737*/  .byte 0x0a
/*0x9738*/  .byte 0x0d
/*0x9739*/  .byte 0x0b
/*0x973a*/  .byte 0x4e
/*0x973b*/  .byte 0x0b
/*0x973c*/  .byte 0x8f
/*0x973d*/  .byte 0x0b
/*0x973e*/  .byte 0xd2
/*0x973f*/  .byte 0x0b
/*0x9740*/  .byte 0x16
/*0x9741*/  .byte 0x0c
/*0x9742*/  .byte 0x5c
/*0x9743*/  .byte 0x0c
/*0x9744*/  .byte 0xa3
/*0x9745*/  .byte 0x0c
/*0x9746*/  .byte 0xeb
/*0x9747*/  .byte 0x0c
/*0x9748*/  .byte 0x34
/*0x9749*/  .byte 0x0d
/*0x974a*/  .byte 0x7f
/*0x974b*/  .byte 0x0d
/*0x974c*/  .byte 0xcc
/*0x974d*/  .byte 0x0d
/*0x974e*/  .byte 0x1a
/*0x974f*/  .byte 0x0e
/*0x9750*/  .byte 0x69
/*0x9751*/  .byte 0x0e
/*0x9752*/  .byte 0xba
/*0x9753*/  .byte 0x0e
/*0x9754*/  .byte 0x0d
/*0x9755*/  .byte 0x0f
/*0x9756*/  .byte 0x61
/*0x9757*/  .byte 0x0f
/*0x9758*/  .byte 0xb7
/*0x9759*/  .byte 0x0f
/*0x975a*/  .byte 0x0e
/*0x975b*/  .byte 0x10
/*0x975c*/  .byte 0x67
/*0x975d*/  .byte 0x10
/*0x975e*/  .byte 0xc2
/*0x975f*/  .byte 0x10
/*0x9760*/  .byte 0x1f
/*0x9761*/  .byte 0x11
/*0x9762*/  .byte 0x7d
/*0x9763*/  .byte 0x11
/*0x9764*/  .byte 0xde
/*0x9765*/  .byte 0x11
/*0x9766*/  .byte 0x40
/*0x9767*/  .byte 0x12
/*0x9768*/  .byte 0xa4
/*0x9769*/  .byte 0x12
/*0x976a*/  .byte 0x0a
/*0x976b*/  .byte 0x13
/*0x976c*/  .byte 0x71
/*0x976d*/  .byte 0x13
/*0x976e*/  .byte 0xdb
/*0x976f*/  .byte 0x13
/*0x9770*/  .byte 0x47
/*0x9771*/  .byte 0x14
/*0x9772*/  .byte 0xb5
/*0x9773*/  .byte 0x14
/*0x9774*/  .byte 0x26
/*0x9775*/  .byte 0x15
/*0x9776*/  .byte 0x98
/*0x9777*/  .byte 0x15
/*0x9778*/  .byte 0x0c
/*0x9779*/  .byte 0x16
/*0x977a*/  .byte 0x83
/*0x977b*/  .byte 0x16
/*0x977c*/  .byte 0xfc
/*0x977d*/  .byte 0x16
/*0x977e*/  .byte 0x78
/*0x977f*/  .byte 0x17
/*0x9780*/  .byte 0xf6
/*0x9781*/  .byte 0x17
/*0x9782*/  .byte 0x76
/*0x9783*/  .byte 0x18
/*0x9784*/  .byte 0xf9
/*0x9785*/  .byte 0x18
/*0x9786*/  .byte 0x7e
/*0x9787*/  .byte 0x19
/*0x9788*/  .byte 0x06
/*0x9789*/  .byte 0x1a
/*0x978a*/  .byte 0x90
/*0x978b*/  .byte 0x1a
/*0x978c*/  .byte 0x1d
/*0x978d*/  .byte 0x1b
/*0x978e*/  .byte 0xad
/*0x978f*/  .byte 0x1b
/*0x9790*/  .byte 0x40
/*0x9791*/  .byte 0x1c
/*0x9792*/  .byte 0xd5
/*0x9793*/  .byte 0x1c
/*0x9794*/  .byte 0x6e
/*0x9795*/  .byte 0x1d
/*0x9796*/  .byte 0x09
/*0x9797*/  .byte 0x1e
/*0x9798*/  .byte 0xa7
/*0x9799*/  .byte 0x1e
/*0x979a*/  .byte 0x49
/*0x979b*/  .byte 0x1f
/*0x979c*/  .byte 0xed
/*0x979d*/  .byte 0x1f
/*0x979e*/  .byte 0x95
/*0x979f*/  .byte 0x20
/*0x97a0*/  .byte 0x40
/*0x97a1*/  .byte 0x21
/*0x97a2*/  .byte 0xee
/*0x97a3*/  .byte 0x21
/*0x97a4*/  .byte 0xa0
/*0x97a5*/  .byte 0x22
/*0x97a6*/  .byte 0x55
/*0x97a7*/  .byte 0x23
/*0x97a8*/  .byte 0x0d
/*0x97a9*/  .byte 0x24
/*0x97aa*/  .byte 0xca
/*0x97ab*/  .byte 0x24
/*0x97ac*/  .byte 0x89
/*0x97ad*/  .byte 0x25
/*0x97ae*/  .byte 0x4d
/*0x97af*/  .byte 0x26
/*0x97b0*/  .byte 0x14
/*0x97b1*/  .byte 0x27
/*0x97b2*/  .byte 0xdf
/*0x97b3*/  .byte 0x27
/*0x97b4*/  .byte 0xae
/*0x97b5*/  .byte 0x28
/*0x97b6*/  .byte 0x81
/*0x97b7*/  .byte 0x29
/*0x97b8*/  .byte 0x58
/*0x97b9*/  .byte 0x2a
/*0x97ba*/  .byte 0x33
/*0x97bb*/  .byte 0x2b
/*0x97bc*/  .byte 0x13
/*0x97bd*/  .byte 0x2c
/*0x97be*/  .byte 0xf7
/*0x97bf*/  .byte 0x2c
/*0x97c0*/  .byte 0xdf
/*0x97c1*/  .byte 0x2d
/*0x97c2*/  .byte 0xcc
/*0x97c3*/  .byte 0x2e
/*0x97c4*/  .byte 0xbd
/*0x97c5*/  .byte 0x2f
/*0x97c6*/  .byte 0xb3
/*0x97c7*/  .byte 0x30
/*0x97c8*/  .byte 0xae
/*0x97c9*/  .byte 0x31
/*0x97ca*/  .byte 0xad
/*0x97cb*/  .byte 0x32
/*0x97cc*/  .byte 0xb2
/*0x97cd*/  .byte 0x33
/*0x97ce*/  .byte 0xbb
/*0x97cf*/  .byte 0x34
/*0x97d0*/  .byte 0xca
/*0x97d1*/  .byte 0x35
/*0x97d2*/  .byte 0xde
/*0x97d3*/  .byte 0x36
/*0x97d4*/  .byte 0xf7
/*0x97d5*/  .byte 0x37
/*0x97d6*/  .byte 0x16
/*0x97d7*/  .byte 0x39
/*0x97d8*/  .byte 0x3a
/*0x97d9*/  .byte 0x3a
/*0x97da*/  .byte 0x64
/*0x97db*/  .byte 0x3b
/*0x97dc*/  .byte 0x94
/*0x97dd*/  .byte 0x3c
/*0x97de*/  .byte 0xc9
/*0x97df*/  .byte 0x3d
/*0x97e0*/  .byte 0x05
/*0x97e1*/  .byte 0x3f
/*0x97e2*/  .byte 0x46
/*0x97e3*/  .byte 0x40
/*0x97e4*/  .byte 0x8e
/*0x97e5*/  .byte 0x41
/*0x97e6*/  .byte 0xdc
/*0x97e7*/  .byte 0x42
/*0x97e8*/  .byte 0x31
/*0x97e9*/  .byte 0x44
/*0x97ea*/  .byte 0x8c
/*0x97eb*/  .byte 0x45
/*0x97ec*/  .byte 0xee
/*0x97ed*/  .byte 0x46
/*0x97ee*/  .byte 0x57
/*0x97ef*/  .byte 0x48
/*0x97f0*/  .byte 0xc6
/*0x97f1*/  .byte 0x49
/*0x97f2*/  .byte 0x3d
/*0x97f3*/  .byte 0x4b
/*0x97f4*/  .byte 0xbb
/*0x97f5*/  .byte 0x4c
/*0x97f6*/  .byte 0x41
/*0x97f7*/  .byte 0x4e
/*0x97f8*/  .byte 0xce
/*0x97f9*/  .byte 0x4f
/*0x97fa*/  .byte 0x62
/*0x97fb*/  .byte 0x51
/*0x97fc*/  .byte 0xff
/*0x97fd*/  .byte 0x52
/*0x97fe*/  .byte 0xa3
/*0x97ff*/  .byte 0x54
/*0x9800*/  .byte 0x50
/*0x9801*/  .byte 0x56
/*0x9802*/  .byte 0x05
/*0x9803*/  .byte 0x58
/*0x9804*/  .byte 0xc2
/*0x9805*/  .byte 0x59
/*0x9806*/  .byte 0x88
/*0x9807*/  .byte 0x5b
/*0x9808*/  .byte 0x57
/*0x9809*/  .byte 0x5d
/*0x980a*/  .byte 0x2e
/*0x980b*/  .byte 0x5f
/*0x980c*/  .byte 0x0f
/*0x980d*/  .byte 0x61
/*0x980e*/  .byte 0xf9
/*0x980f*/  .byte 0x62
/*0x9810*/  .byte 0xed
/*0x9811*/  .byte 0x64
/*0x9812*/  .byte 0xea
/*0x9813*/  .byte 0x66
/*0x9814*/  .byte 0xf1
/*0x9815*/  .byte 0x68
/*0x9816*/  .byte 0x02
/*0x9817*/  .byte 0x6b
/*0x9818*/  .byte 0x1e
/*0x9819*/  .byte 0x6d
/*0x981a*/  .byte 0x43
/*0x981b*/  .byte 0x6f
/*0x981c*/  .byte 0x74
/*0x981d*/  .byte 0x71
/*0x981e*/  .byte 0xaf
/*0x981f*/  .byte 0x73
/*0x9820*/  .byte 0xf5
/*0x9821*/  .byte 0x75
/*0x9822*/  .byte 0x47
/*0x9823*/  .byte 0x78
/*0x9824*/  .byte 0xa4
/*0x9825*/  .byte 0x7a
/*0x9826*/  .byte 0x0c
/*0x9827*/  .byte 0x7d
/*0x9828*/  .byte 0x81
/*0x9829*/  .byte 0x7f
/*0x982a*/  .byte 0x02
/*0x982b*/  .byte 0x82
/*0x982c*/  .byte 0x8f
/*0x982d*/  .byte 0x84
/*0x982e*/  .byte 0x29
/*0x982f*/  .byte 0x87
/*0x9830*/  .byte 0xcf
/*0x9831*/  .byte 0x89
/*0x9832*/  .byte 0x83
/*0x9833*/  .byte 0x8c
/*0x9834*/  .byte 0x44
/*0x9835*/  .byte 0x8f
/*0x9836*/  .byte 0x13
/*0x9837*/  .byte 0x92
/*0x9838*/  .byte 0xf0
/*0x9839*/  .byte 0x94
/*0x983a*/  .byte 0xdb
/*0x983b*/  .byte 0x97
/*0x983c*/  .byte 0xd4
/*0x983d*/  .byte 0x9a
/*0x983e*/  .byte 0xdc
/*0x983f*/  .byte 0x9d
/*0x9840*/  .byte 0xf3
/*0x9841*/  .byte 0xa0
/*0x9842*/  .byte 0x19
/*0x9843*/  .byte 0xa4
/*0x9844*/  .byte 0x4f
/*0x9845*/  .byte 0xa7
/*0x9846*/  .byte 0x95
/*0x9847*/  .byte 0xaa
/*0x9848*/  .byte 0xeb
/*0x9849*/  .byte 0xad
/*0x984a*/  .byte 0x52
/*0x984b*/  .byte 0xb1
/*0x984c*/  .byte 0xc9
/*0x984d*/  .byte 0xb4
/*0x984e*/  .byte 0x52
/*0x984f*/  .byte 0xb8
/*0x9850*/  .byte 0xec
/*0x9851*/  .byte 0xbb
/*0x9852*/  .byte 0x97
/*0x9853*/  .byte 0xbf
/*0x9854*/  .byte 0x55
/*0x9855*/  .byte 0xc3
/*0x9856*/  .byte 0x26
/*0x9857*/  .byte 0xc7
/*0x9858*/  .byte 0x09
/*0x9859*/  .byte 0xcb
/*0x985a*/  .byte 0x00
/*0x985b*/  .byte 0xcf
/*0x985c*/  .byte 0x0a
/*0x985d*/  .byte 0xd3
/*0x985e*/  .byte 0x28
/*0x985f*/  .byte 0xd7
/*0x9860*/  .byte 0x5b
/*0x9861*/  .byte 0xdb
/*0x9862*/  .byte 0xa3
/*0x9863*/  .byte 0xdf
/*0x9864*/  .byte 0xff
/*0x9865*/  .byte 0xe3
/*0x9866*/  .byte 0x71
/*0x9867*/  .byte 0xe8
/*0x9868*/  .byte 0xfa
/*0x9869*/  .byte 0xec
/*0x986a*/  .byte 0x98
/*0x986b*/  .byte 0xf1
/*0x986c*/  .byte 0x4e
/*0x986d*/  .byte 0xf6
/*0x986e*/  .byte 0x1a
/*0x986f*/  .byte 0xfb
/*0x9870*/  .byte 0xff
/*0x9871*/  .byte 0xff
/*0x9872*/  .byte 0xff
/*0x9873*/  .byte 0xff
/*0x9874*/  .byte 0xff
/*0x9875*/  .byte 0xff
/*0x9876*/  .byte 0x05
/*0x9877*/  .byte 0x17
/*0x9878*/  .byte 0x0f
/*0x9879*/  .byte 0x0d
/*0x987a*/  .byte 0x0b
/*0x987b*/  .byte 0x14
/*0x987c*/  .byte 0x15
/*0x987d*/  .byte 0x1c
/*0x987e*/  .byte 0x22
/*0x987f*/  .byte 0x1d
/*0x9880*/  .byte 0x24
/*0x9881*/  .byte 0x25
/*0x9882*/  .byte 0x1f
/*0x9883*/  .byte 0x1e
/*0x9884*/  .byte 0x23
/*0x9885*/  .byte 0x2a
/*0x9886*/  .byte 0x03
/*0x9887*/  .byte 0x12
/*0x9888*/  .byte 0x0c
/*0x9889*/  .byte 0x13
/*0x988a*/  .byte 0x1b
/*0x988b*/  .byte 0x16
/*0x988c*/  .byte 0x0a
/*0x988d*/  .byte 0x0e
/*0x988e*/  .byte 0x1a
/*0x988f*/  .byte 0x07
/*0x9890*/  .byte 0x01
/*0x9891*/  .byte 0x08
/*0x9892*/  .byte 0x09
/*0x9893*/  .byte 0x10
/*0x9894*/  .byte 0x11
/*0x9895*/  .byte 0x18
/*0x9896*/  .byte 0x19
/*0x9897*/  .byte 0x20
/*0x9898*/  .byte 0x21
/*0x9899*/  .byte 0x28
/*0x989a*/  .byte 0x34
/*0x989b*/  .byte 0x60
/*0x989c*/  .byte 0x31
/*0x989d*/  .byte 0x02
/*0x989e*/  .byte 0x5d
/*0x989f*/  .byte 0x29
/*0x98a0*/  .byte 0x30
/*0x98a1*/  .byte 0x2b
/*0x98a2*/  .byte 0x32
/*0x98a3*/  .byte 0x33
/*0x98a4*/  .byte 0x59
/*0x98a5*/  .byte 0x2c
/*0x98a6*/  .byte 0x2d
/*0x98a7*/  .byte 0x00
/*0x98a8*/  .byte 0x26
/*0x98a9*/  .byte 0x27
/*0x98aa*/  .byte 0x2e
/*0x98ab*/  .byte 0x04
/*0x98ac*/  .byte 0x61
/*0x98ad*/  .byte 0x62
/*0x98ae*/  .byte 0x63
/*0x98af*/  .byte 0x68
/*0x98b0*/  .byte 0x69
/*0x98b1*/  .byte 0x6a
/*0x98b2*/  .byte 0x70
/*0x98b3*/  .byte 0x71
/*0x98b4*/  .byte 0x72
/*0x98b5*/  .byte 0x43
/*0x98b6*/  .byte 0x44
/*0x98b7*/  .byte 0x45
/*0x98b8*/  .byte 0x66
/*0x98b9*/  .byte 0x67
/*0x98ba*/  .byte 0x6b
/*0x98bb*/  .byte 0x38
/*0x98bc*/  .byte 0x39
/*0x98bd*/  .byte 0x40
/*0x98be*/  .byte 0x3a
/*0x98bf*/  .byte 0x3b
/*0x98c0*/  .byte 0x42
/*0x98c1*/  .byte 0x46
/*0x98c2*/  .byte 0x3f
/*0x98c3*/  .byte 0x3e
/*0x98c4*/  .byte 0x3d
/*0x98c5*/  .byte 0x48
/*0x98c6*/  .byte 0xff
/*0x98c7*/  .byte 0xff
/*0x98c8*/  .byte 0xff
/*0x98c9*/  .byte 0xff
/*0x98ca*/  .byte 0xff
/*0x98cb*/  .byte 0xff
/*0x98cc*/  .byte 0xff
/*0x98cd*/  .byte 0xff
/*0x98ce*/  .byte 0xff
/*0x98cf*/  .byte 0xff
/*0x98d0*/  .byte 0xff
/*0x98d1*/  .byte 0xff
/*0x98d2*/  .byte 0xff
/*0x98d3*/  .byte 0xff
/*0x98d4*/  .byte 0xff
/*0x98d5*/  .byte 0xff
/*0x98d6*/  .byte 0x64
/*0x98d7*/  .byte 0xff
/*0x98d8*/  .byte 0xff
/*0x98d9*/  .byte 0xff
/*0x98da*/  .byte 0xff
/*0x98db*/  .byte 0xff
/*0x98dc*/  .byte 0xff
/*0x98dd*/  .byte 0xff
/*0x98de*/  .byte 0xff
/*0x98df*/  .byte 0xff
/*0x98e0*/  .byte 0xff
/*0x98e1*/  .byte 0xff
/*0x98e2*/  .byte 0xff
/*0x98e3*/  .byte 0xff
/*0x98e4*/  .byte 0xff
/*0x98e5*/  .byte 0xff
/*0x98e6*/  .byte 0xff
/*0x98e7*/  .byte 0xff
/*0x98e8*/  .byte 0xff
/*0x98e9*/  .byte 0xff
/*0x98ea*/  .byte 0xff
/*0x98eb*/  .byte 0xff
/*0x98ec*/  .byte 0xff
/*0x98ed*/  .byte 0xff
/*0x98ee*/  .byte 0xff
/*0x98ef*/  .byte 0xff
/*0x98f0*/  .byte 0xff
/*0x98f1*/  .byte 0xff
/*0x98f2*/  .byte 0xff
/*0x98f3*/  .byte 0xff
/*0x98f4*/  .byte 0xff
/*0x98f5*/  .byte 0xff
/*0x98f6*/  .byte 0xff
/*0x98f7*/  .byte 0xff
/*0x98f8*/  .byte 0xff
/*0x98f9*/  .byte 0xff
/*0x98fa*/  .byte 0xff
/*0x98fb*/  .byte 0xff
/*0x98fc*/  .byte 0xff
/*0x98fd*/  .byte 0xff
/*0x98fe*/  .byte 0xff
/*0x98ff*/  .byte 0xff
/*0x9900*/  .byte 0xff
/*0x9901*/  .byte 0xff
/*0x9902*/  .byte 0xff
/*0x9903*/  .byte 0xff
/*0x9904*/  .byte 0xff
/*0x9905*/  .byte 0xff
/*0x9906*/  .byte 0xff
/*0x9907*/  .byte 0xff
/*0x9908*/  .byte 0xff
/*0x9909*/  .byte 0xff
/*0x990a*/  .byte 0xff
/*0x990b*/  .byte 0xff
/*0x990c*/  .byte 0xff
/*0x990d*/  .byte 0xff
/*0x990e*/  .byte 0xff
/*0x990f*/  .byte 0xff
/*0x9910*/  .byte 0xff
/*0x9911*/  .byte 0xff
/*0x9912*/  .byte 0xff
/*0x9913*/  .byte 0xff
/*0x9914*/  .byte 0xff
/*0x9915*/  .byte 0xff
/*0x9916*/  .byte 0xff
/*0x9917*/  .byte 0xff
/*0x9918*/  .byte 0xff
/*0x9919*/  .byte 0xff
/*0x991a*/  .byte 0xff
/*0x991b*/  .byte 0xff
/*0x991c*/  .byte 0xff
/*0x991d*/  .byte 0xff
/*0x991e*/  .byte 0xff
/*0x991f*/  .byte 0xff
/*0x9920*/  .byte 0xff
/*0x9921*/  .byte 0xff
/*0x9922*/  .byte 0xff
/*0x9923*/  .byte 0xff
/*0x9924*/  .byte 0xff
/*0x9925*/  .byte 0xff
/*0x9926*/  .byte 0xff
/*0x9927*/  .byte 0xff
/*0x9928*/  .byte 0xff
/*0x9929*/  .byte 0xff
/*0x992a*/  .byte 0xff
/*0x992b*/  .byte 0xff
/*0x992c*/  .byte 0xff
/*0x992d*/  .byte 0xff
/*0x992e*/  .byte 0xff
/*0x992f*/  .byte 0xff
/*0x9930*/  .byte 0xff
/*0x9931*/  .byte 0xff
/*0x9932*/  .byte 0xff
/*0x9933*/  .byte 0xff
/*0x9934*/  .byte 0xff
/*0x9935*/  .byte 0xff
/*0x9936*/  .byte 0xff
/*0x9937*/  .byte 0xff
/*0x9938*/  .byte 0xff
/*0x9939*/  .byte 0xff
/*0x993a*/  .byte 0xff
/*0x993b*/  .byte 0xff
/*0x993c*/  .byte 0xff
/*0x993d*/  .byte 0xff
/*0x993e*/  .byte 0xff
/*0x993f*/  .byte 0xff
/*0x9940*/  .byte 0xff
/*0x9941*/  .byte 0xff
/*0x9942*/  .byte 0xff
/*0x9943*/  .byte 0xff
/*0x9944*/  .byte 0xff
/*0x9945*/  .byte 0xff
/*0x9946*/  .byte 0xff
/*0x9947*/  .byte 0xff
/*0x9948*/  .byte 0xff
/*0x9949*/  .byte 0xff
/*0x994a*/  .byte 0xff
/*0x994b*/  .byte 0xff
/*0x994c*/  .byte 0xff
/*0x994d*/  .byte 0xff
/*0x994e*/  .byte 0xff
/*0x994f*/  .byte 0xff
/*0x9950*/  .byte 0xff
/*0x9951*/  .byte 0xff
/*0x9952*/  .byte 0x5b
/*0x9953*/  .byte 0x06
/*0x9954*/  .byte 0x5c
/*0x9955*/  .byte 0x5a
/*0x9956*/  .byte 0x36
/*0x9957*/  .byte 0x2f
/*0x9958*/  .byte 0x5e
/*0x9959*/  .byte 0x5f
/*0x995a*/  .byte 0x3c
/*0x995b*/  .byte 0xff
/*0x995c*/  .byte 0xff
/*0x995d*/  .byte 0xff
/*0x995e*/  .byte 0xff
/*0x995f*/  .byte 0xff
/*0x9960*/  .byte 0xff
/*0x9961*/  .byte 0xff
/*0x9962*/  .byte 0xff
/*0x9963*/  .byte 0xff
/*0x9964*/  .byte 0xff
/*0x9965*/  .byte 0xff
/*0x9966*/  .byte 0xff
/*0x9967*/  .byte 0xff
/*0x9968*/  .byte 0xff
/*0x9969*/  .byte 0xff
/*0x996a*/  .byte 0xff
/*0x996b*/  .byte 0xff
/*0x996c*/  .byte 0xff
/*0x996d*/  .byte 0xff
/*0x996e*/  .byte 0xff
/*0x996f*/  .byte 0xff
/*0x9970*/  .byte 0xff
/*0x9971*/  .byte 0xff

            key_gpio_map:
/*0x9972*/  .word 0x400b4000 /* GPIO C, pin 4 - KEY_B5 */
/*0x9976*/  .word 0x00000010
/*0x997a*/  .word 0x400b2000 /* GPIO B, pin 6 - KEY_B6 */
/*0x997e*/  .word 0x00000040
/*0x9982*/  .word 0x400b6000 /* GPIO D, pin 0 - KEY_B7 */
/*0x9986*/  .word 0x00000001
/*0x998a*/  .word 0x400b2000 /* GPIO B, pin 11 - KEY_B8 */
/*0x998e*/  .word 0x00000800
/*0x9992*/  .word 0x400b0000 /* GPIO A, pin 11 - KEY_B9 */
/*0x9996*/  .word 0x00000800
/*0x999a*/  .word 0x400b0000 /* GPIO A, pin 0 - KEY_B10 */
/*0x999e*/  .word 0x00000001
/*0x99a2*/  .word 0x400b0000 /* GPIO A, pin 1 - KEY_B11 */
/*0x99a6*/  .word 0x00000002
/*0x99aa*/  .word 0x400b0000 /* GPIO A, pin 2 - KEY_B12 */
/*0x99ae*/  .word 0x00000004
/*0x99b2*/  .word 0x400b0000 /* GPIO A, pin 3 - KEY_B4 */
/*0x99b6*/  .word 0x00000008
/*0x99ba*/  .word 0x400b0000 /* GPIO A, pin 4 - unk1 */
/*0x99be*/  .word 0x00000010
/*0x99c2*/  .word 0x400b4000 /* GPIO C, pin 10 - unk2 */
/*0x99c6*/  .word 0x00000400
/*0x99ca*/  .word 0x400b4000 /* GPIO C, pin 12 - KEY_B13 */
/*0x99ce*/  .word 0x00001000
/*0x99d2*/  .word 0x400b4000 /* GPIO C, pin 3 - KEY_B1 */
/*0x99d6*/  .word 0x00000008
/*0x99da*/  .word 0x400b0000 /* GPIO A, pin 10 - KEY_B2 */
/*0x99de*/  .word 0x00000400
/*0x99e2*/  .word 0x400b2000 /* GPIO B, pin 1 - KEY_B3 */
/*0x99e6*/  .word 0x00000002

/*0x99ea*/  .byte 0x35
/*0x99eb*/  .byte 0x1e
/*0x99ec*/  .byte 0x2b
/*0x99ed*/  .byte 0x14
/*0x99ee*/  .byte 0x39
/*0x99ef*/  .byte 0x04
/*0x99f0*/  .byte 0xe1
/*0x99f1*/  .byte 0x1d
/*0x99f2*/  .byte 0x1f
/*0x99f3*/  .byte 0x20
/*0x99f4*/  .byte 0x1a
/*0x99f5*/  .byte 0x08
/*0x99f6*/  .byte 0x16
/*0x99f7*/  .byte 0x07
/*0x99f8*/  .byte 0x1b
/*0x99f9*/  .byte 0x06
/*0x99fa*/  .byte 0x21
/*0x99fb*/  .byte 0x22
/*0x99fc*/  .byte 0x15
/*0x99fd*/  .byte 0x17
/*0x99fe*/  .byte 0x09
/*0x99ff*/  .byte 0x0a
/*0x9a00*/  .byte 0x19
/*0x9a01*/  .byte 0x05
/*0x9a02*/  .byte 0x23
/*0x9a03*/  .byte 0x24
/*0x9a04*/  .byte 0x1c
/*0x9a05*/  .byte 0x18
/*0x9a06*/  .byte 0x0b
/*0x9a07*/  .byte 0x0d
/*0x9a08*/  .byte 0x11
/*0x9a09*/  .byte 0x10
/*0x9a0a*/  .byte 0x25
/*0x9a0b*/  .byte 0x26
/*0x9a0c*/  .byte 0x0c
/*0x9a0d*/  .byte 0x12
/*0x9a0e*/  .byte 0x0e
/*0x9a0f*/  .byte 0x0f
/*0x9a10*/  .byte 0x36
/*0x9a11*/  .byte 0x37
/*0x9a12*/  .byte 0x27
/*0x9a13*/  .byte 0x2d
/*0x9a14*/  .byte 0x13
/*0x9a15*/  .byte 0x2f
/*0x9a16*/  .byte 0x33
/*0x9a17*/  .byte 0x34
/*0x9a18*/  .byte 0x38
/*0x9a19*/  .byte 0xe5
/*0x9a1a*/  .byte 0x2e
/*0x9a1b*/  .byte 0x2a
/*0x9a1c*/  .byte 0x30
/*0x9a1d*/  .byte 0x31
/*0x9a1e*/  .byte 0x28
/*0x9a1f*/  .byte 0x00
/*0x9a20*/  .byte 0xe4
/*0x9a21*/  .byte 0x00
/*0x9a22*/  .byte 0x49
/*0x9a23*/  .byte 0x4a
/*0x9a24*/  .byte 0x4c
/*0x9a25*/  .byte 0x4d
/*0x9a26*/  .byte 0xe8
/*0x9a27*/  .byte 0x52
/*0x9a28*/  .byte 0x51
/*0x9a29*/  .byte 0x50
/*0x9a2a*/  .byte 0x4b
/*0x9a2b*/  .byte 0x00
/*0x9a2c*/  .byte 0x4e
/*0x9a2d*/  .byte 0x43
/*0x9a2e*/  .byte 0x44
/*0x9a2f*/  .byte 0x45
/*0x9a30*/  .byte 0x4f
/*0x9a31*/  .byte 0x00
/*0x9a32*/  .byte 0x00
/*0x9a33*/  .byte 0x00
/*0x9a34*/  .byte 0x00
/*0x9a35*/  .byte 0x00
/*0x9a36*/  .byte 0x00
/*0x9a37*/  .byte 0x00
/*0x9a38*/  .byte 0x00
/*0x9a39*/  .byte 0x00
/*0x9a3a*/  .byte 0x00
/*0x9a3b*/  .byte 0x00
/*0x9a3c*/  .byte 0x00
/*0x9a3d*/  .byte 0x00
/*0x9a3e*/  .byte 0x00
/*0x9a3f*/  .byte 0x00
/*0x9a40*/  .byte 0x00
/*0x9a41*/  .byte 0x00
/*0x9a42*/  .byte 0x00
/*0x9a43*/  .byte 0x32
/*0x9a44*/  .byte 0xe3
/*0x9a45*/  .byte 0xe0
/*0x9a46*/  .byte 0xe2
/*0x9a47*/  .byte 0x2c
/*0x9a48*/  .byte 0xe6
/*0x9a49*/  .byte 0xe7
/*0x9a4a*/  .byte 0x29
/*0x9a4b*/  .byte 0x3a
/*0x9a4c*/  .byte 0x3b
/*0x9a4d*/  .byte 0x3c
/*0x9a4e*/  .byte 0x64
/*0x9a4f*/  .byte 0x00
/*0x9a50*/  .byte 0x46
/*0x9a51*/  .byte 0x47
/*0x9a52*/  .byte 0x3d
/*0x9a53*/  .byte 0x3e
/*0x9a54*/  .byte 0x3f
/*0x9a55*/  .byte 0x48
/*0x9a56*/  .byte 0x00
/*0x9a57*/  .byte 0x00
/*0x9a58*/  .byte 0x00
/*0x9a59*/  .byte 0x00
/*0x9a5a*/  .byte 0x40
/*0x9a5b*/  .byte 0x41
/*0x9a5c*/  .byte 0x42
/*0x9a5d*/  .byte 0x00
/*0x9a5e*/  .byte 0x00
/*0x9a5f*/  .byte 0x00
/*0x9a60*/  .byte 0x00
/*0x9a61*/  .byte 0x00

            led_gpio_map:
/*0x9a62*/  .word 0x400b4000 /* GPIO C, pin 8 - Q1_ctrl */
/*0x9a66*/  .word 0x00000100
/*0x9a6a*/  .word 0x400b4000 /* GPIO C, pin 7 - Q2_ctrl */
/*0x9a6e*/  .word 0x00000080
/*0x9a72*/  .word 0x400b2000 /* GPIO B, pin 5 - Q3_ctrl */
/*0x9a76*/  .word 0x00000020
/*0x9a7a*/  .word 0x400b2000 /* GPIO B, pin 4 - Q4_ctrl */
/*0x9a7e*/  .word 0x00000010
/*0x9a82*/  .word 0x400b2000 /* GPIO B, pin 3 - Q5_ctrl */
/*0x9a86*/  .word 0x00000008
/*0x9a8a*/  .word 0x400b2000 /* GPIO B, pin 2 - Q6_ctrl */
/*0x9a8e*/  .word 0x00000004
/*0x9a92*/  .word 0x400b4000 /* GPIO C, pin 6 - Q7_ctrl */
/*0x9a96*/  .word 0x00000040
/*0x9a9a*/  .word 0x400b4000 /* GPIO C, pin 5 - Q8_ctrl */
/*0x9a9e*/  .word 0x00000020

/*0x9aa2*/  .byte 0x00
/*0x9aa3*/  .byte 0x00
/*0x9aa4*/  .byte 0xcb
/*0x9aa5*/  .byte 0x85
/*0x9aa6*/  .byte 0x00
/*0x9aa7*/  .byte 0x00
/*0x9aa8*/  .byte 0xa9
/*0x9aa9*/  .byte 0x36
/*0x9aaa*/  .byte 0x00
/*0x9aab*/  .byte 0x00
/*0x9aac*/  .byte 0xcb
/*0x9aad*/  .byte 0x85
/*0x9aae*/  .byte 0x00
/*0x9aaf*/  .byte 0x00
/*0x9ab0*/  .byte 0xcf
/*0x9ab1*/  .byte 0x85
/*0x9ab2*/  .byte 0x00
/*0x9ab3*/  .byte 0x00
/*0x9ab4*/  .byte 0xd5
/*0x9ab5*/  .byte 0x37
/*0x9ab6*/  .byte 0x00
/*0x9ab7*/  .byte 0x00
/*0x9ab8*/  .byte 0xcb
/*0x9ab9*/  .byte 0x85
/*0x9aba*/  .byte 0x00
/*0x9abb*/  .byte 0x00
            usb_report0_desc:
/*0x9abc*/  .byte 0x05 /* Usage Page (Generic Desktop Controls) */
/*0x9abd*/  .byte 0x01
/*0x9abe*/  .byte 0x09 /* Usage (Keyboard) */
/*0x9abf*/  .byte 0x06
/*0x9ac0*/  .byte 0xa1 /* Collection (Application) */
/*0x9ac1*/  .byte 0x01
/*0x9ac2*/  .byte 0x05 /* - Usage Page (Keyboard/Keypad) */
/*0x9ac3*/  .byte 0x07
/*0x9ac4*/  .byte 0x19 /* - Usage Minimum (0xe0) */
/*0x9ac5*/  .byte 0xe0
/*0x9ac6*/  .byte 0x29 /* - Usage Maximum (0xe7) */
/*0x9ac7*/  .byte 0xe7
/*0x9ac8*/  .byte 0x15 /* - Logical Minimum (0) */
/*0x9ac9*/  .byte 0x00
/*0x9aca*/  .byte 0x25 /* - Logical Maximum (1) */
/*0x9acb*/  .byte 0x01
/*0x9acc*/  .byte 0x75 /* - Report Size (1) */
/*0x9acd*/  .byte 0x01
/*0x9ace*/  .byte 0x95 /* - Report Count (8) */
/*0x9acf*/  .byte 0x08
/*0x9ad0*/  .byte 0x81 /* - Input (Data,Var,Abs) */
/*0x9ad1*/  .byte 0x02
/*0x9ad2*/  .byte 0x95 /* - Report Count (1) */
/*0x9ad3*/  .byte 0x01
/*0x9ad4*/  .byte 0x75 /* - Report Size (8) */
/*0x9ad5*/  .byte 0x08
/*0x9ad6*/  .byte 0x81 /* - Input (Const,Var,Abs) */
/*0x9ad7*/  .byte 0x03
/*0x9ad8*/  .byte 0x95 /* - Report Count (3) */
/*0x9ad9*/  .byte 0x03
/*0x9ada*/  .byte 0x75 /* - Report Size (1) */
/*0x9adb*/  .byte 0x01
/*0x9adc*/  .byte 0x05 /* - Usage Page (LED) */
/*0x9add*/  .byte 0x08
/*0x9ade*/  .byte 0x19 /* - Usage Minimum (0x01) */
/*0x9adf*/  .byte 0x01
/*0x9ae0*/  .byte 0x29 /* - Usage Maximum (0x03) */
/*0x9ae1*/  .byte 0x03
/*0x9ae2*/  .byte 0x91 /* - Output (Data,Var,Abs) */
/*0x9ae3*/  .byte 0x02
/*0x9ae4*/  .byte 0x95 /* - Report Count (1) */
/*0x9ae5*/  .byte 0x01
/*0x9ae6*/  .byte 0x75 /* - Report Size (5) */
/*0x9ae7*/  .byte 0x05
/*0x9ae8*/  .byte 0x91 /* - Output (Const,Var,Abs) */
/*0x9ae9*/  .byte 0x03
/*0x9aea*/  .byte 0x95 /* - Report Count (6) */
/*0x9aeb*/  .byte 0x06
/*0x9aec*/  .byte 0x75 /* - Report Size (8) */
/*0x9aed*/  .byte 0x08
/*0x9aee*/  .byte 0x15 /* - Logical Minimum (0) */
/*0x9aef*/  .byte 0x00
/*0x9af0*/  .byte 0x26 /* - Logical Maximum (164) */
/*0x9af1*/  .byte 0xa4
/*0x9af2*/  .byte 0x00
/*0x9af3*/  .byte 0x05 /* - Usage Page (Keyboard/Keypad) */
/*0x9af4*/  .byte 0x07
/*0x9af5*/  .byte 0x19 /* - Usage Minimum (0x00) */
/*0x9af6*/  .byte 0x00
/*0x9af7*/  .byte 0x29 /* - Usage Maximum (0xa4) */
/*0x9af8*/  .byte 0xa4
/*0x9af9*/  .byte 0x81 /* - Input (Data,Array,Abs) */
/*0x9afa*/  .byte 0x00
/*0x9afb*/  .byte 0xc0 /* - End Collection */
            usb_report1_desc:
/*0x9afc*/  .byte 0x06 /* Usage Page (Vendor) */
/*0x9afd*/  .byte 0x00
/*0x9afe*/  .byte 0xff
/*0x9aff*/  .byte 0x09 /* Usage (Vendor) */
/*0x9b00*/  .byte 0x01
/*0x9b01*/  .byte 0xa1 /* Collection (Application) */
/*0x9b02*/  .byte 0x01
/*0x9b03*/  .byte 0x09 /* - Usage (Vendor) */
/*0x9b04*/  .byte 0x02
/*0x9b05*/  .byte 0x15 /* - Logical Minimum (0) */
/*0x9b06*/  .byte 0x00
/*0x9b07*/  .byte 0x26 /* - Logical Maximum (255) */
/*0x9b08*/  .byte 0xff
/*0x9b09*/  .byte 0x00
/*0x9b0a*/  .byte 0x75 /* - Report Size (8) */
/*0x9b0b*/  .byte 0x08
/*0x9b0c*/  .byte 0x95 /* - Report Count (64) */
/*0x9b0d*/  .byte 0x40
/*0x9b0e*/  .byte 0x81 /* - Input (Data,Var,Abs) */
/*0x9b0f*/  .byte 0x02
/*0x9b10*/  .byte 0x09 /* - Usage (Vendor) */
/*0x9b11*/  .byte 0x03
/*0x9b12*/  .byte 0x15 /* - Logical Minimum (0) */
/*0x9b13*/  .byte 0x00
/*0x9b14*/  .byte 0x26 /* - Logical Maximum (255) */
/*0x9b15*/  .byte 0xff
/*0x9b16*/  .byte 0x00
/*0x9b17*/  .byte 0x75 /* - Report Size (8) */
/*0x9b18*/  .byte 0x08
/*0x9b19*/  .byte 0x95 /* - Report Count (64) */
/*0x9b1a*/  .byte 0x40
/*0x9b1b*/  .byte 0x91 /* - Output (Data,Var,Abs) */
/*0x9b1c*/  .byte 0x02
/*0x9b1d*/  .byte 0xc0 /* - End Collection */
/*0x9b1e*/  .byte 0x00
/*0x9b1f*/  .byte 0x00
            usb_report2_desc:
/*0x9b20*/  .byte 0x05 /* Usage Page (Generic Desktop Controls) */
/*0x9b21*/  .byte 0x01
/*0x9b22*/  .byte 0x09 /* Usage (System Control) */
/*0x9b23*/  .byte 0x80
/*0x9b24*/  .byte 0xa1 /* Collection (Application) */
/*0x9b25*/  .byte 0x01
/*0x9b26*/  .byte 0x85 /* - Report ID (0x01) */
/*0x9b27*/  .byte 0x01
/*0x9b28*/  .byte 0x19 /* - Usage Minimum (0x81) */
/*0x9b29*/  .byte 0x81
/*0x9b2a*/  .byte 0x29 /* - Usage Maximum (0x83) */
/*0x9b2b*/  .byte 0x83
/*0x9b2c*/  .byte 0x15 /* - Logical Minimum (0) */
/*0x9b2d*/  .byte 0x00
/*0x9b2e*/  .byte 0x25 /* - Logical Maximum (1) */
/*0x9b2f*/  .byte 0x01
/*0x9b30*/  .byte 0x95 /* - Report Count (3) */
/*0x9b31*/  .byte 0x03
/*0x9b32*/  .byte 0x75 /* - Report Size (1) */
/*0x9b33*/  .byte 0x01
/*0x9b34*/  .byte 0x81 /* - Input (Data,Var,Abs) */
/*0x9b35*/  .byte 0x02
/*0x9b36*/  .byte 0x95 /* - Report Count (1) */
/*0x9b37*/  .byte 0x01
/*0x9b38*/  .byte 0x75 /* - Report Size (5) */
/*0x9b39*/  .byte 0x05
/*0x9b3a*/  .byte 0x81 /* - Input (Const,Array,Abs) */
/*0x9b3b*/  .byte 0x01
/*0x9b3c*/  .byte 0xc0 /* - End Collection */
/*0x9b3d*/  .byte 0x05 /* Usage Page (Consumer) */
/*0x9b3e*/  .byte 0x0c
/*0x9b3f*/  .byte 0x09 /* Usage (Consumer Control) */
/*0x9b40*/  .byte 0x01
/*0x9b41*/  .byte 0xa1 /* Collection (Application) */
/*0x9b42*/  .byte 0x01
/*0x9b43*/  .byte 0x85 /* - Report ID (0x02) */
/*0x9b44*/  .byte 0x02
/*0x9b45*/  .byte 0x15 /* - Logical Minimum (0) */
/*0x9b46*/  .byte 0x00
/*0x9b47*/  .byte 0x25 /* - Logical Maximum (1) */
/*0x9b48*/  .byte 0x01
/*0x9b49*/  .byte 0x95 /* - Report Count (18) */
/*0x9b4a*/  .byte 0x12
/*0x9b4b*/  .byte 0x75 /* - Report Size (1) */
/*0x9b4c*/  .byte 0x01
/*0x9b4d*/  .byte 0x0a /* - Usage (Instance 33537) */
/*0x9b4e*/  .byte 0x83
/*0x9b4f*/  .byte 0x01
/*0x9b50*/  .byte 0x0a /* - Usage (Instance 35329) */
/*0x9b51*/  .byte 0x8a
/*0x9b52*/  .byte 0x01
/*0x9b53*/  .byte 0x0a /* - Usage (Instance 37377) */
/*0x9b54*/  .byte 0x92
/*0x9b55*/  .byte 0x01
/*0x9b56*/  .byte 0x0a /* - Usage (Instance 37889) */
/*0x9b57*/  .byte 0x94
/*0x9b58*/  .byte 0x01
/*0x9b59*/  .byte 0x09 /* - Usage (Play/Pause) */
/*0x9b5a*/  .byte 0xcd
/*0x9b5b*/  .byte 0x09 /* - Usage (Stop) */
/*0x9b5c*/  .byte 0xb7
/*0x9b5d*/  .byte 0x09 /* - Usage (Scan Previous Track) */
/*0x9b5e*/  .byte 0xb6
/*0x9b5f*/  .byte 0x09 /* - Usage (Scan Next Track) */
/*0x9b60*/  .byte 0xb5
/*0x9b61*/  .byte 0x09 /* - Usage (Mute) */
/*0x9b62*/  .byte 0xe2
/*0x9b63*/  .byte 0x09 /* - Usage (Volume Decrement) */
/*0x9b64*/  .byte 0xea
/*0x9b65*/  .byte 0x09 /* - Usage (Volume Increment) */
/*0x9b66*/  .byte 0xe9
/*0x9b67*/  .byte 0x0a /* - Usage (Instance 8450) */
/*0x9b68*/  .byte 0x21
/*0x9b69*/  .byte 0x02
/*0x9b6a*/  .byte 0x0a /* - Usage (Instance 8962) */
/*0x9b6b*/  .byte 0x23
/*0x9b6c*/  .byte 0x02
/*0x9b6d*/  .byte 0x0a /* - Usage (Instance 9218) */
/*0x9b6e*/  .byte 0x24
/*0x9b6f*/  .byte 0x02
/*0x9b70*/  .byte 0x0a /* - Usage (Instance 9474) */
/*0x9b71*/  .byte 0x25
/*0x9b72*/  .byte 0x02
/*0x9b73*/  .byte 0x0a /* - Usage (Instance 9730) */
/*0x9b74*/  .byte 0x26
/*0x9b75*/  .byte 0x02
/*0x9b76*/  .byte 0x0a /* - Usage (Instance 9986) */
/*0x9b77*/  .byte 0x27
/*0x9b78*/  .byte 0x02
/*0x9b79*/  .byte 0x0a /* - Usage (Instance 10754) */
/*0x9b7a*/  .byte 0x2a
/*0x9b7b*/  .byte 0x02
/*0x9b7c*/  .byte 0x81 /* - Input (Data,Var,Abs) */
/*0x9b7d*/  .byte 0x02
/*0x9b7e*/  .byte 0x95 /* - Report Count (1) */
/*0x9b7f*/  .byte 0x01
/*0x9b80*/  .byte 0x75 /* - Report Size (14) */
/*0x9b81*/  .byte 0x0e
/*0x9b82*/  .byte 0x81 /* - Input (Const,Array,Abs) */
/*0x9b83*/  .byte 0x01
/*0x9b84*/  .byte 0xc0 /* - End Collection */
/*0x9b85*/  .byte 0x05 /* Usage Page (Generic Desktop Controls) */
/*0x9b86*/  .byte 0x01
/*0x9b87*/  .byte 0x09 /* Usage (Keyboard) */
/*0x9b88*/  .byte 0x06
/*0x9b89*/  .byte 0xa1 /* Collection (Application) */
/*0x9b8a*/  .byte 0x01
/*0x9b8b*/  .byte 0x85 /* - Report ID (0x04) */
/*0x9b8c*/  .byte 0x04
/*0x9b8d*/  .byte 0x05 /* - Usage Page (Keyboard/Keypad) */
/*0x9b8e*/  .byte 0x07
/*0x9b8f*/  .byte 0x95 /* - Report Count (1) */
/*0x9b90*/  .byte 0x01
/*0x9b91*/  .byte 0x75 /* - Report Size (8) */
/*0x9b92*/  .byte 0x08
/*0x9b93*/  .byte 0x81 /* - Input (Const,Var,Abs) */
/*0x9b94*/  .byte 0x03
/*0x9b95*/  .byte 0x95 /* - Report Count (232) */
/*0x9b96*/  .byte 0xe8
/*0x9b97*/  .byte 0x75 /* - Report Size (1) */
/*0x9b98*/  .byte 0x01
/*0x9b99*/  .byte 0x15 /* - Logical Minimum (0) */
/*0x9b9a*/  .byte 0x00
/*0x9b9b*/  .byte 0x25 /* - Logical Maximum (1) */
/*0x9b9c*/  .byte 0x01
/*0x9b9d*/  .byte 0x05 /* - Usage Page (Keyboard/Keypad) */
/*0x9b9e*/  .byte 0x07
/*0x9b9f*/  .byte 0x19 /* - Usage Minimum (0x00) */
/*0x9ba0*/  .byte 0x00
/*0x9ba1*/  .byte 0x29 /* - Usage Maximum (0xe7) */
/*0x9ba2*/  .byte 0xe7
/*0x9ba3*/  .byte 0x81 /* - Input (Data,Array,Abs) */
/*0x9ba4*/  .byte 0x00
/*0x9ba5*/  .byte 0xc0 /* - End Collection */
/*0x9ba6*/  .byte 0x1e
/*0x9ba7*/  .byte 0x00
/*0x9ba8*/  .byte 0x0f
/*0x9ba9*/  .byte 0x00
/*0x9baa*/  .byte 0x07
/*0x9bab*/  .byte 0x00
/*0x9bac*/  .byte 0x03
/*0x9bad*/  .byte 0x00
/*0x9bae*/  .byte 0xe8
/*0x9baf*/  .byte 0x03
/*0x9bb0*/  .byte 0xf4
/*0x9bb1*/  .byte 0x01
/*0x9bb2*/  .byte 0xfa
/*0x9bb3*/  .byte 0x00
/*0x9bb4*/  .byte 0x7d
/*0x9bb5*/  .byte 0x00
/*0x9bb6*/  .byte 0x00
/*0x9bb7*/  .byte 0x00
            usb_config_desc:
/*0x9bb8*/  .byte 0x09 /* bLength (0x09) */
/*0x9bb9*/  .byte 0x02 /* bDescriptorType 0x02 (CONFIGURATION) */
/*0x9bba*/  .byte 0x5b /* wTotalLength 91 */
/*0x9bbb*/  .byte 0x00
/*0x9bbc*/  .byte 0x03 /* bNumInterfaces 3 */
/*0x9bbd*/  .byte 0x01 /* bConfigurationValue 1 */
/*0x9bbe*/  .byte 0x00 /* iConfiguration 0 */
/*0x9bbf*/  .byte 0xa0 /* Configuration bmAttributes 0xa0  NOT SELF-POWERED  REMOTE-WAKEUP */
/*0x9bc0*/  .byte 0x32 /* bMaxPower 50 (100mA) */
            usb_interface0_desc:
/*0x9bc1*/  .byte 0x09 /* bLength (0x09) */
/*0x9bc2*/  .byte 0x04 /* bDescriptorType 0x04 (INTERFACE) */
/*0x9bc3*/  .byte 0x00 /* bInterfaceNumber 0 */
/*0x9bc4*/  .byte 0x00 /* bAlternateSetting 0 */
/*0x9bc5*/  .byte 0x01 /* bNumEndpoints 1 */
/*0x9bc6*/  .byte 0x03 /* bInterfaceClass HID (0x03) */
/*0x9bc7*/  .byte 0x01 /* bInterfaceSubClass Boot Interface (0x01) */
/*0x9bc8*/  .byte 0x01 /* bInterfaceProtocol Keyboard (0x01) */
/*0x9bc9*/  .byte 0x00 /* iInterface 0 */
            usb_hid0_desc:
/*0x9bca*/  .byte 0x09 /* bLength (0x09) */
/*0x9bcb*/  .byte 0x21 /* bDescriptorType 0x21 (HID) */
/*0x9bcc*/  .byte 0x11 /* bcdHID 0x0111 */
/*0x9bcd*/  .byte 0x01
/*0x9bce*/  .byte 0x00 /* bCountryCode Not Supported (0x00) */
/*0x9bcf*/  .byte 0x01 /* bNumDescriptors 1 */
/*0x9bd0*/  .byte 0x22 /* bDescriptorType HID Report (0x22) */
/*0x9bd1*/  .byte 0x40 /* wDescriptorLength 64 */
/*0x9bd2*/  .byte 0x00
            usb_ep1_desc:
/*0x9bd3*/  .byte 0x07 /* bLength (0x07) */
/*0x9bd4*/  .byte 0x05 /* bDescriptorType 0x05 (ENDPOINT) */
/*0x9bd5*/  .byte 0x81 /* bEndpointAddress 0x81  IN  Endpoint */
/*0x9bd6*/  .byte 0x03 /* bmAttributes 0x03 */
/*0x9bd7*/  .byte 0x08 /* wMaxPacketSize 8 */
/*0x9bd8*/  .byte 0x00
/*0x9bd9*/  .byte 0x01 /* bInterval 1 */
            usb_interface1_desc:
/*0x9bda*/  .byte 0x09 /* bLength (0x09) */
/*0x9bdb*/  .byte 0x04 /* bDescriptorType 0x04 (INTERFACE) */
/*0x9bdc*/  .byte 0x01 /* bInterfaceNumber 1 */
/*0x9bdd*/  .byte 0x00 /* bAlternateSetting 0 */
/*0x9bde*/  .byte 0x02 /* bNumEndpoints 2 */
/*0x9bdf*/  .byte 0x03 /* bInterfaceClass HID (0x03) */
/*0x9be0*/  .byte 0x00 /* bInterfaceSubClass No Subclass (0x00) */
/*0x9be1*/  .byte 0x00 /* bInterfaceProtocol 0x00 */
/*0x9be2*/  .byte 0x00 /* iInterface 0 */
            usb_hid1_desc:
/*0x9be3*/  .byte 0x09 /* bLength (0x09) */
/*0x9be4*/  .byte 0x21 /* bDescriptorType 0x21 (HID) */
/*0x9be5*/  .byte 0x11 /* bcdHID 0x0111 */
/*0x9be6*/  .byte 0x01
/*0x9be7*/  .byte 0x00 /* bCountryCode Not Supported (0x00) */
/*0x9be8*/  .byte 0x01 /* bNumDescriptors 1 */
/*0x9be9*/  .byte 0x22 /* bDescriptorType HID Report (0x22) */
/*0x9bea*/  .byte 0x22 /* wDescriptorLength 34 */
/*0x9beb*/  .byte 0x00
            usb_ep3_desc:
/*0x9bec*/  .byte 0x07 /* bLength (0x07) */
/*0x9bed*/  .byte 0x05 /* bDescriptorType 0x05 (ENDPOINT) */
/*0x9bee*/  .byte 0x83 /* bEndpointAddress 0x83  IN  Endpoint */
/*0x9bef*/  .byte 0x03 /* bmAttributes 0x03 */
/*0x9bf0*/  .byte 0x40 /* wMaxPacketSize 64 */
/*0x9bf1*/  .byte 0x00
/*0x9bf2*/  .byte 0x01 /* bInterval 1 */
            usb_ep4_desc:
/*0x9bf3*/  .byte 0x07 /* bLength (0x07) */
/*0x9bf4*/  .byte 0x05 /* bDescriptorType 0x05 (ENDPOINT) */
/*0x9bf5*/  .byte 0x04 /* bEndpointAddress 0x04  OUT  Endpoint */
/*0x9bf6*/  .byte 0x03 /* bmAttributes 0x03 */
/*0x9bf7*/  .byte 0x40 /* wMaxPacketSize 64 */
/*0x9bf8*/  .byte 0x00
/*0x9bf9*/  .byte 0x01 /* bInterval 1 */
            usb_interface2_desc:
/*0x9bfa*/  .byte 0x09 /* bLength (0x09) */
/*0x9bfb*/  .byte 0x04 /* bDescriptorType 0x04 (INTERFACE) */
/*0x9bfc*/  .byte 0x02 /* bInterfaceNumber 2 */
/*0x9bfd*/  .byte 0x00 /* bAlternateSetting 0 */
/*0x9bfe*/  .byte 0x01 /* bNumEndpoints 1 */
/*0x9bff*/  .byte 0x03 /* bInterfaceClass HID (0x03) */
/*0x9c00*/  .byte 0x00 /* bInterfaceSubClass No Subclass (0x00) */
/*0x9c01*/  .byte 0x00 /* bInterfaceProtocol 0x00 */
/*0x9c02*/  .byte 0x00 /* iInterface 0 */
            usb_hid2_desc:
/*0x9c03*/  .byte 0x09 /* bLength (0x09) */
/*0x9c04*/  .byte 0x21 /* bDescriptorType 0x21 (HID) */
/*0x9c05*/  .byte 0x11 /* bcdHID 0x0111 */
/*0x9c06*/  .byte 0x01
/*0x9c07*/  .byte 0x00 /* bCountryCode Not Supported (0x00) */
/*0x9c08*/  .byte 0x01 /* bNumDescriptors 1 */
/*0x9c09*/  .byte 0x22 /* bDescriptorType HID Report (0x22) */
/*0x9c0a*/  .byte 0x86 /* wDescriptorLength 134 */
/*0x9c0b*/  .byte 0x00
            usb_ep2_desc:
/*0x9c0c*/  .byte 0x07 /* bLength (0x07) */
/*0x9c0d*/  .byte 0x05 /* bDescriptorType 0x05 (ENDPOINT) */
/*0x9c0e*/  .byte 0x82 /* bEndpointAddress 0x82  IN  Endpoint */
/*0x9c0f*/  .byte 0x03 /* bmAttributes 0x03 */
/*0x9c10*/  .byte 0x40 /* wMaxPacketSize 64 */
/*0x9c11*/  .byte 0x00
/*0x9c12*/  .byte 0x01 /* bInterval 1 */
/*0x9c13*/  .byte 0x00
            usb_device_desc:
/*0x9c14*/  .byte 0x12 /* bLength (0x12) */
/*0x9c15*/  .byte 0x01 /* bDescriptorType 0x01 (DEVICE) */
/*0x9c16*/  .byte 0x10 /* bcdUSB 0x0110 */
/*0x9c17*/  .byte 0x01
/*0x9c18*/  .byte 0x00 /* bDeviceClass Device (0x00) */
/*0x9c19*/  .byte 0x00 /* bDeviceSubClass 0 */
/*0x9c1a*/  .byte 0x00 /* bDeviceProtocol 0 */
/*0x9c1b*/  .byte 0x40 /* bMaxPacketSize0 64 */
/*0x9c1c*/  .byte 0x16 /* idVendor (0x2516) */
/*0x9c1d*/  .byte 0x25
/*0x9c1e*/  .byte 0x3c /* idProduct (0x003c) */
/*0x9c1f*/  .byte 0x00
/*0x9c20*/  .byte 0x02 /* bcdDevice 0x2202 */
/*0x9c21*/  .byte 0x22
/*0x9c22*/  .byte 0x01 /* iManufacturer 1 */
/*0x9c23*/  .byte 0x02 /* iProduct 2 */
/*0x9c24*/  .byte 0x00 /* iSerialNumber 0 */
/*0x9c25*/  .byte 0x01 /* bNumConfigurations 1 */
/*0x9c26*/  .byte 0x00
/*0x9c27*/  .byte 0x00
/*0x9c28*/  .word usb_str0_desc
/*0x9c2c*/  .word usb_str2_desc
/*0x9c30*/  .word usb_str1_desc
            usb_str0_desc:
/*0x9c34*/  .byte 0x04 /* bLength (0x04) */
/*0x9c35*/  .byte 0x03 /* bDescriptorType 0x03 (STRING) */
/*0x9c36*/  .byte 0x09 /* wLANGID English (United States) (0x0409) */
/*0x9c37*/  .byte 0x04
            usb_str2_desc:
/*0x9c38*/  .byte 0x3c /* bLength (0x22) */
/*0x9c39*/  .byte 0x03 /* bDescriptorType 0x03 (STRING) */
/*0x9c3a*/  .byte 0x43 /* bString MASTERKEYS PRO S */
/*0x9c3b*/  .byte 0x00
/*0x9c3c*/  .byte 0x6f
/*0x9c3d*/  .byte 0x00
/*0x9c3e*/  .byte 0x6f
/*0x9c3f*/  .byte 0x00
/*0x9c40*/  .byte 0x6c
/*0x9c41*/  .byte 0x00
/*0x9c42*/  .byte 0x65
/*0x9c43*/  .byte 0x00
/*0x9c44*/  .byte 0x72
/*0x9c45*/  .byte 0x00
/*0x9c46*/  .byte 0x20
/*0x9c47*/  .byte 0x00
/*0x9c48*/  .byte 0x4d
/*0x9c49*/  .byte 0x00
/*0x9c4a*/  .byte 0x61
/*0x9c4b*/  .byte 0x00
/*0x9c4c*/  .byte 0x73
/*0x9c4d*/  .byte 0x00
/*0x9c4e*/  .byte 0x74
/*0x9c4f*/  .byte 0x00
/*0x9c50*/  .byte 0x65
/*0x9c51*/  .byte 0x00
/*0x9c52*/  .byte 0x72
/*0x9c53*/  .byte 0x00
/*0x9c54*/  .byte 0x20
/*0x9c55*/  .byte 0x00
/*0x9c56*/  .byte 0x54
/*0x9c57*/  .byte 0x00
/*0x9c58*/  .byte 0x65
/*0x9c59*/  .byte 0x00
/*0x9c5a*/  .byte 0x63
/*0x9c5b*/  .byte 0x00
/*0x9c5c*/  .byte 0x68
/*0x9c5d*/  .byte 0x00
/*0x9c5e*/  .byte 0x6e
/*0x9c5f*/  .byte 0x00
/*0x9c60*/  .byte 0x6f
/*0x9c61*/  .byte 0x00
/*0x9c62*/  .byte 0x6c
/*0x9c63*/  .byte 0x00
/*0x9c64*/  .byte 0x6f
/*0x9c65*/  .byte 0x00
/*0x9c66*/  .byte 0x67
/*0x9c67*/  .byte 0x00
/*0x9c68*/  .byte 0x79
/*0x9c69*/  .byte 0x00
/*0x9c6a*/  .byte 0x20
/*0x9c6b*/  .byte 0x00
/*0x9c6c*/  .byte 0x49
/*0x9c6d*/  .byte 0x00
/*0x9c6e*/  .byte 0x6e
/*0x9c6f*/  .byte 0x00
/*0x9c70*/  .byte 0x63
/*0x9c71*/  .byte 0x00
/*0x9c72*/  .byte 0x2e
/*0x9c73*/  .byte 0x00
/*0x9c74*/  .byte 0x00
/*0x9c75*/  .byte 0x00
/*0x9c76*/  .byte 0x00
/*0x9c77*/  .byte 0x00
            usb_str1_desc:
/*0x9c78*/  .byte 0x22 /* bLength (0x3c) */
/*0x9c79*/  .byte 0x03 /* bDescriptorType 0x03 (STRING) */
/*0x9c7a*/  .byte 0x4d /* bString Cooler Master Technology Inc. */
/*0x9c7b*/  .byte 0x00
/*0x9c7c*/  .byte 0x41
/*0x9c7d*/  .byte 0x00
/*0x9c7e*/  .byte 0x53
/*0x9c7f*/  .byte 0x00
/*0x9c80*/  .byte 0x54
/*0x9c81*/  .byte 0x00
/*0x9c82*/  .byte 0x45
/*0x9c83*/  .byte 0x00
/*0x9c84*/  .byte 0x52
/*0x9c85*/  .byte 0x00
/*0x9c86*/  .byte 0x4b
/*0x9c87*/  .byte 0x00
/*0x9c88*/  .byte 0x45
/*0x9c89*/  .byte 0x00
/*0x9c8a*/  .byte 0x59
/*0x9c8b*/  .byte 0x00
/*0x9c8c*/  .byte 0x53
/*0x9c8d*/  .byte 0x00
/*0x9c8e*/  .byte 0x20
/*0x9c8f*/  .byte 0x00
/*0x9c90*/  .byte 0x50
/*0x9c91*/  .byte 0x00
/*0x9c92*/  .byte 0x52
/*0x9c93*/  .byte 0x00
/*0x9c94*/  .byte 0x4f
/*0x9c95*/  .byte 0x00
/*0x9c96*/  .byte 0x20
/*0x9c97*/  .byte 0x00
/*0x9c98*/  .byte 0x53
/*0x9c99*/  .byte 0x00
/*0x9c9a*/  .byte 0x00
/*0x9c9b*/  .byte 0x00
/*0x9c9c*/  .byte 0x4f
/*0x9c9d*/  .byte 0x66
/*0x9c9e*/  .byte 0x66
/*0x9c9f*/  .byte 0x00
/*0x9ca0*/  .byte 0x05
/*0x9ca1*/  .byte 0x14
/*0x9ca2*/  .byte 0x04
/*0x9ca3*/  .byte 0x0c
/*0x9ca4*/  .byte 0x12
/*0x9ca5*/  .byte 0x01
/*0x9ca6*/  .byte 0x20
/*0x9ca7*/  .byte 0x47
/*0x9ca8*/  .byte 0x72
/*0x9ca9*/  .byte 0x6f
/*0x9caa*/  .byte 0x75
/*0x9cab*/  .byte 0x70
/*0x9cac*/  .byte 0x20
/*0x9cad*/  .byte 0x00
/*0x9cae*/  .byte 0x52
/*0x9caf*/  .byte 0x65
/*0x9cb0*/  .byte 0x63
/*0x9cb1*/  .byte 0x6f
/*0x9cb2*/  .byte 0x72
/*0x9cb3*/  .byte 0x64
/*0x9cb4*/  .byte 0x20
/*0x9cb5*/  .byte 0x00
/*0x9cb6*/  .byte 0x01
/*0x9cb7*/  .byte 0x00
/*0x9cb8*/  .byte 0x31
/*0x9cb9*/  .byte 0x36
/*0x9cba*/  .byte 0x30
/*0x9cbb*/  .byte 0x35
/*0x9cbc*/  .byte 0x32
/*0x9cbd*/  .byte 0x34
/*0x9cbe*/  .byte 0x31
/*0x9cbf*/  .byte 0x36
/*0x9cc0*/  .byte 0xe8
/*0x9cc1*/  .byte 0x00
/*0x9cc2*/  .byte 0x00
/*0x9cc3*/  .byte 0x00
/*0x9cc4*/  .byte 0x48
/*0x9cc5*/  .byte 0x04
/*0x9cc6*/  .byte 0x67
/*0x9cc7*/  .byte 0x29
/*0x9cc8*/  .byte 0x1e
/*0x9cc9*/  .byte 0x1f
/*0x9cca*/  .byte 0x20
/*0x9ccb*/  .byte 0x21
/*0x9ccc*/  .byte 0x2c
/*0x9ccd*/  .byte 0xa0
/*0x9cce*/  .byte 0x00
/*0x9ccf*/  .byte 0x00
/*0x9cd0*/  .byte 0x05
/*0x9cd1*/  .byte 0x00
/*0x9cd2*/  .byte 0x00
/*0x9cd3*/  .byte 0x00
/*0x9cd4*/  .byte 0x01
/*0x9cd5*/  .byte 0x11
/*0x9cd6*/  .byte 0x02
/*0x9cd7*/  .byte 0x12
/*0x9cd8*/  .byte 0x03
/*0x9cd9*/  .byte 0x13
/*0x9cda*/  .byte 0x04
/*0x9cdb*/  .byte 0x14
/*0x9cdc*/  .byte 0x19
/*0x9cdd*/  .byte 0x21
/*0x9cde*/  .byte 0x1a
/*0x9cdf*/  .byte 0x22
/*0x9ce0*/  .byte 0x1b
/*0x9ce1*/  .byte 0x23
/*0x9ce2*/  .byte 0x1c
/*0x9ce3*/  .byte 0x24
/*0x9ce4*/  .byte 0x29
/*0x9ce5*/  .byte 0x31
/*0x9ce6*/  .byte 0x2a
/*0x9ce7*/  .byte 0x32
/*0x9ce8*/  .byte 0x2b
/*0x9ce9*/  .byte 0x33
/*0x9cea*/  .byte 0x2c
/*0x9ceb*/  .byte 0x34
/*0x9cec*/  .byte 0x39
/*0x9ced*/  .byte 0x41
/*0x9cee*/  .byte 0x3a
/*0x9cef*/  .byte 0x42
/*0x9cf0*/  .byte 0x3b
/*0x9cf1*/  .byte 0x43
/*0x9cf2*/  .byte 0x3c
/*0x9cf3*/  .byte 0x44
/*0x9cf4*/  .byte 0x49
/*0x9cf5*/  .byte 0x51
/*0x9cf6*/  .byte 0x4a
/*0x9cf7*/  .byte 0x52
/*0x9cf8*/  .byte 0x4b
/*0x9cf9*/  .byte 0x53
/*0x9cfa*/  .byte 0x4c
/*0x9cfb*/  .byte 0x54
/*0x9cfc*/  .byte 0x59
/*0x9cfd*/  .byte 0x61
/*0x9cfe*/  .byte 0x5a
/*0x9cff*/  .byte 0x62
/*0x9d00*/  .byte 0x5b
/*0x9d01*/  .byte 0x63
/*0x9d02*/  .byte 0x5c
/*0x9d03*/  .byte 0x7c
/*0x9d04*/  .byte 0x69
/*0x9d05*/  .byte 0x79
/*0x9d06*/  .byte 0x6a
/*0x9d07*/  .byte 0x7a
/*0x9d08*/  .byte 0x7b
/*0x9d09*/  .byte 0xff
/*0x9d0a*/  .byte 0x7d
/*0x9d0b*/  .byte 0xff
/*0x9d0c*/  .byte 0x81
/*0x9d0d*/  .byte 0x89
/*0x9d0e*/  .byte 0x82
/*0x9d0f*/  .byte 0x8a
/*0x9d10*/  .byte 0x65
/*0x9d11*/  .byte 0x8c
/*0x9d12*/  .byte 0x8d
/*0x9d13*/  .byte 0x85
/*0x9d14*/  .byte 0x91
/*0x9d15*/  .byte 0xff
/*0x9d16*/  .byte 0x92
/*0x9d17*/  .byte 0x68
/*0x9d18*/  .byte 0x70
/*0x9d19*/  .byte 0x78
/*0x9d1a*/  .byte 0x95
/*0x9d1b*/  .byte 0xff
/*0x9d1c*/  .byte 0xff
/*0x9d1d*/  .byte 0xff
/*0x9d1e*/  .byte 0xff
/*0x9d1f*/  .byte 0xff
/*0x9d20*/  .byte 0xff
/*0x9d21*/  .byte 0xff
/*0x9d22*/  .byte 0xff
/*0x9d23*/  .byte 0xff
/*0x9d24*/  .byte 0xff
/*0x9d25*/  .byte 0xff
/*0x9d26*/  .byte 0xff
/*0x9d27*/  .byte 0xff
/*0x9d28*/  .byte 0xff
/*0x9d29*/  .byte 0xff
/*0x9d2a*/  .byte 0xff
/*0x9d2b*/  .byte 0xff
/*0x9d2c*/  .byte 0xff
/*0x9d2d*/  .byte 0x6b
/*0x9d2e*/  .byte 0x0d
/*0x9d2f*/  .byte 0x05
/*0x9d30*/  .byte 0x15
/*0x9d31*/  .byte 0x35
/*0x9d32*/  .byte 0x55
/*0x9d33*/  .byte 0x5d
/*0x9d34*/  .byte 0x00
/*0x9d35*/  .byte 0x20
/*0x9d36*/  .byte 0x28
/*0x9d37*/  .byte 0x30
/*0x9d38*/  .byte 0x0c
/*0x9d39*/  .byte 0xff
/*0x9d3a*/  .byte 0x80
/*0x9d3b*/  .byte 0x88
/*0x9d3c*/  .byte 0x38
/*0x9d3d*/  .byte 0x40
/*0x9d3e*/  .byte 0x48
/*0x9d3f*/  .byte 0x90
/*0x9d40*/  .byte 0xff
/*0x9d41*/  .byte 0xff
/*0x9d42*/  .byte 0xff
/*0x9d43*/  .byte 0xff
/*0x9d44*/  .byte 0x50
/*0x9d45*/  .byte 0x58
/*0x9d46*/  .byte 0x60
/*0x9d47*/  .byte 0xff
/*0x9d48*/  .byte 0xff
/*0x9d49*/  .byte 0xff
/*0x9d4a*/  .byte 0xff
/*0x9d4b*/  .byte 0xff
/*0x9d4c*/  .byte 0xff
/*0x9d4d*/  .byte 0x20
/*0x9d4e*/  .byte 0xff
/*0x9d4f*/  .byte 0x40
/*0x9d50*/  .byte 0xff
/*0x9d51*/  .byte 0x60
/*0x9d52*/  .byte 0xff
/*0x9d53*/  .byte 0x80
/*0x9d54*/  .byte 0x21
/*0x9d55*/  .byte 0x22
/*0x9d56*/  .byte 0x41
/*0x9d57*/  .byte 0x42
/*0x9d58*/  .byte 0x61
/*0x9d59*/  .byte 0x62
/*0x9d5a*/  .byte 0x81
/*0x9d5b*/  .byte 0x82
/*0x9d5c*/  .byte 0x23
/*0x9d5d*/  .byte 0x24
/*0x9d5e*/  .byte 0x43
/*0x9d5f*/  .byte 0x44
/*0x9d60*/  .byte 0x63
/*0x9d61*/  .byte 0x64
/*0x9d62*/  .byte 0x83
/*0x9d63*/  .byte 0x84
/*0x9d64*/  .byte 0x25
/*0x9d65*/  .byte 0x26
/*0x9d66*/  .byte 0x45
/*0x9d67*/  .byte 0x46
/*0x9d68*/  .byte 0x65
/*0x9d69*/  .byte 0x66
/*0x9d6a*/  .byte 0x85
/*0x9d6b*/  .byte 0x86
/*0x9d6c*/  .byte 0x27
/*0x9d6d*/  .byte 0x28
/*0x9d6e*/  .byte 0x47
/*0x9d6f*/  .byte 0x48
/*0x9d70*/  .byte 0x67
/*0x9d71*/  .byte 0x68
/*0x9d72*/  .byte 0x87
/*0x9d73*/  .byte 0x88
/*0x9d74*/  .byte 0x29
/*0x9d75*/  .byte 0xff
/*0x9d76*/  .byte 0x49
/*0x9d77*/  .byte 0xff
/*0x9d78*/  .byte 0x69
/*0x9d79*/  .byte 0xff
/*0x9d7a*/  .byte 0x89
/*0x9d7b*/  .byte 0xff
/*0x9d7c*/  .byte 0xff
/*0x9d7d*/  .byte 0xff
/*0x9d7e*/  .byte 0xff
/*0x9d7f*/  .byte 0xff
/*0x9d80*/  .byte 0xff
/*0x9d81*/  .byte 0xff
/*0x9d82*/  .byte 0xff
/*0x9d83*/  .byte 0xff
/*0x9d84*/  .byte 0xff
/*0x9d85*/  .byte 0xff
/*0x9d86*/  .byte 0xff
/*0x9d87*/  .byte 0xff
/*0x9d88*/  .byte 0xff
/*0x9d89*/  .byte 0xff
/*0x9d8a*/  .byte 0xff
/*0x9d8b*/  .byte 0xff
/*0x9d8c*/  .byte 0xff
/*0x9d8d*/  .byte 0xff
/*0x9d8e*/  .byte 0xff
/*0x9d8f*/  .byte 0xff
/*0x9d90*/  .byte 0xff
/*0x9d91*/  .byte 0xff
/*0x9d92*/  .byte 0xff
/*0x9d93*/  .byte 0xff
/*0x9d94*/  .byte 0xff
/*0x9d95*/  .byte 0xff
/*0x9d96*/  .byte 0xff
/*0x9d97*/  .byte 0xff
/*0x9d98*/  .byte 0xff
/*0x9d99*/  .byte 0xff
/*0x9d9a*/  .byte 0xff
/*0x9d9b*/  .byte 0xff
/*0x9d9c*/  .byte 0xff
/*0x9d9d*/  .byte 0xff
/*0x9d9e*/  .byte 0xff
/*0x9d9f*/  .byte 0xff
/*0x9da0*/  .byte 0xff
/*0x9da1*/  .byte 0xff
/*0x9da2*/  .byte 0xff
/*0x9da3*/  .byte 0xff
/*0x9da4*/  .byte 0xff
/*0x9da5*/  .byte 0xff
/*0x9da6*/  .byte 0xff
/*0x9da7*/  .byte 0xff
/*0x9da8*/  .byte 0xff
/*0x9da9*/  .byte 0xff
/*0x9daa*/  .byte 0xff
/*0x9dab*/  .byte 0xff
/*0x9dac*/  .byte 0x00
/*0x9dad*/  .byte 0x01
/*0x9dae*/  .byte 0x02
/*0x9daf*/  .byte 0x03
/*0x9db0*/  .byte 0xff
/*0x9db1*/  .byte 0xff
/*0x9db2*/  .byte 0xff
/*0x9db3*/  .byte 0xff
/*0x9db4*/  .byte 0x04
/*0x9db5*/  .byte 0x05
/*0x9db6*/  .byte 0x06
/*0x9db7*/  .byte 0xff
/*0x9db8*/  .byte 0xff
/*0x9db9*/  .byte 0xff
/*0x9dba*/  .byte 0xff
/*0x9dbb*/  .byte 0xff
/*0x9dbc*/  .byte 0x07
/*0x9dbd*/  .byte 0x08
/*0x9dbe*/  .byte 0x09
/*0x9dbf*/  .byte 0xff
/*0x9dc0*/  .byte 0xff
/*0x9dc1*/  .byte 0xff
/*0x9dc2*/  .byte 0xff
/*0x9dc3*/  .byte 0xff
/*0x9dc4*/  .byte 0x10
/*0x9dc5*/  .byte 0x20
/*0x9dc6*/  .byte 0x30
/*0x9dc7*/  .byte 0x40
/*0x9dc8*/  .byte 0x50
/*0x9dc9*/  .byte 0x60
/*0x9dca*/  .byte 0x70
/*0x9dcb*/  .byte 0x80
/*0x9dcc*/  .byte 0x8f
/*0x9dcd*/  .byte 0x9f
/*0x9dce*/  .byte 0xaf
/*0x9dcf*/  .byte 0xbf
/*0x9dd0*/  .byte 0xcf
/*0x9dd1*/  .byte 0xdf
/*0x9dd2*/  .byte 0xef
/*0x9dd3*/  .byte 0xff
/*0x9dd4*/  .byte 0xfc
/*0x9dd5*/  .byte 0xf9
/*0x9dd6*/  .byte 0xf5
/*0x9dd7*/  .byte 0xf2
/*0x9dd8*/  .byte 0xef
/*0x9dd9*/  .byte 0xec
/*0x9dda*/  .byte 0xe9
/*0x9ddb*/  .byte 0xe6
/*0x9ddc*/  .byte 0xe2
/*0x9ddd*/  .byte 0xdf
/*0x9dde*/  .byte 0xdc
/*0x9ddf*/  .byte 0xd9
/*0x9de0*/  .byte 0xd6
/*0x9de1*/  .byte 0xd2
/*0x9de2*/  .byte 0xcf
/*0x9de3*/  .byte 0xcc
/*0x9de4*/  .byte 0xc9
/*0x9de5*/  .byte 0xc6
/*0x9de6*/  .byte 0xc2
/*0x9de7*/  .byte 0xbf
/*0x9de8*/  .byte 0xbc
/*0x9de9*/  .byte 0xb9
/*0x9dea*/  .byte 0xb6
/*0x9deb*/  .byte 0xb3
/*0x9dec*/  .byte 0xaf
/*0x9ded*/  .byte 0xac
/*0x9dee*/  .byte 0xa9
/*0x9def*/  .byte 0xa6
/*0x9df0*/  .byte 0xa3
/*0x9df1*/  .byte 0x9f
/*0x9df2*/  .byte 0x9c
/*0x9df3*/  .byte 0x99
/*0x9df4*/  .byte 0x96
/*0x9df5*/  .byte 0x93
/*0x9df6*/  .byte 0x8f
/*0x9df7*/  .byte 0x8c
/*0x9df8*/  .byte 0x89
/*0x9df9*/  .byte 0x86
/*0x9dfa*/  .byte 0x83
/*0x9dfb*/  .byte 0x80
/*0x9dfc*/  .byte 0x7c
/*0x9dfd*/  .byte 0x79
/*0x9dfe*/  .byte 0x76
/*0x9dff*/  .byte 0x73
/*0x9e00*/  .byte 0x70
/*0x9e01*/  .byte 0x6c
/*0x9e02*/  .byte 0x69
/*0x9e03*/  .byte 0x66
/*0x9e04*/  .byte 0x63
/*0x9e05*/  .byte 0x60
/*0x9e06*/  .byte 0x5c
/*0x9e07*/  .byte 0x59
/*0x9e08*/  .byte 0x56
/*0x9e09*/  .byte 0x53
/*0x9e0a*/  .byte 0x50
/*0x9e0b*/  .byte 0x4d
/*0x9e0c*/  .byte 0x49
/*0x9e0d*/  .byte 0x46
/*0x9e0e*/  .byte 0x43
/*0x9e0f*/  .byte 0x40
/*0x9e10*/  .byte 0x3d
/*0x9e11*/  .byte 0x39
/*0x9e12*/  .byte 0x36
/*0x9e13*/  .byte 0x33
/*0x9e14*/  .byte 0x30
/*0x9e15*/  .byte 0x2d
/*0x9e16*/  .byte 0x29
/*0x9e17*/  .byte 0x26
/*0x9e18*/  .byte 0x23
/*0x9e19*/  .byte 0x20
/*0x9e1a*/  .byte 0x1d
/*0x9e1b*/  .byte 0x1a
/*0x9e1c*/  .byte 0x16
/*0x9e1d*/  .byte 0x13
/*0x9e1e*/  .byte 0x10
/*0x9e1f*/  .byte 0x0d
/*0x9e20*/  .byte 0x0a
/*0x9e21*/  .byte 0x06
/*0x9e22*/  .byte 0x03
/*0x9e23*/  .byte 0x00
/*0x9e24*/  .byte 0x00
/*0x9e25*/  .byte 0x00
/*0x9e26*/  .byte 0x00
/*0x9e27*/  .byte 0xff
/*0x9e28*/  .byte 0x00
/*0x9e29*/  .byte 0x00
/*0x9e2a*/  .byte 0x00
/*0x9e2b*/  .byte 0x00
/*0x9e2c*/  .byte 0xff
/*0x9e2d*/  .byte 0x00
/*0x9e2e*/  .byte 0xff
/*0x9e2f*/  .byte 0x00
/*0x9e30*/  .byte 0xff
/*0x9e31*/  .byte 0xff
/*0x9e32*/  .byte 0x00
/*0x9e33*/  .byte 0x00
/*0x9e34*/  .byte 0xff
/*0x9e35*/  .byte 0x31
/*0x9e36*/  .byte 0xff
/*0x9e37*/  .byte 0x80
/*0x9e38*/  .byte 0xff
/*0x9e39*/  .byte 0x38
/*0x9e3a*/  .byte 0xff
/*0x9e3b*/  .byte 0x3c
/*0x9e3c*/  .byte 0xff
/*0x9e3d*/  .byte 0x6c
/*0x9e3e*/  .byte 0xff
/*0x9e3f*/  .byte 0x32
/*0x9e40*/  .byte 0xff
/*0x9e41*/  .byte 0x67
/*0x9e42*/  .byte 0x30
/*0x9e43*/  .byte 0x3c
/*0x9e44*/  .byte 0x10
/*0x9e45*/  .byte 0x6c
/*0x9e46*/  .byte 0xff
/*0x9e47*/  .byte 0x00
/*0x9e48*/  .byte 0x00
/*0x9e49*/  .byte 0xff
/*0x9e4a*/  .byte 0xff
/*0x9e4b*/  .byte 0xff
/*0x9e4c*/  .byte 0xff
/*0x9e4d*/  .byte 0xff
/*0x9e4e*/  .byte 0xff
/*0x9e4f*/  .byte 0x00
/*0x9e50*/  .byte 0x00
/*0x9e51*/  .byte 0x00
/*0x9e52*/  .byte 0x60
/*0x9e53*/  .byte 0x01
/*0x9e54*/  .byte 0x06
/*0x9e55*/  .byte 0x01
/*0x9e56*/  .byte 0x04
/*0x9e57*/  .byte 0x01
/*0x9e58*/  .byte 0x02
/*0x9e59*/  .byte 0x01
/*0x9e5a*/  .byte 0x00
/*0x9e5b*/  .byte 0x01
/*0x9e5c*/  .byte 0x60
/*0x9e5d*/  .byte 0x02
/*0x9e5e*/  .byte 0x31
/*0x9e5f*/  .byte 0x0e
/*0x9e60*/  .byte 0x33
/*0x9e61*/  .byte 0x0e
/*0x9e62*/  .byte 0x34
/*0x9e63*/  .byte 0x0e
/*0x9e64*/  .byte 0x2f
/*0x9e65*/  .byte 0x0e
/*0x9e66*/  .byte 0x36
/*0x9e67*/  .byte 0x0e
/*0x9e68*/  .byte 0x34
/*0x9e69*/  .byte 0x0d
/*0x9e6a*/  .byte 0x36
/*0x9e6b*/  .byte 0x0d
/*0x9e6c*/  .byte 0x2f
/*0x9e6d*/  .byte 0x0d
/*0x9e6e*/  .byte 0x2f
/*0x9e6f*/  .byte 0x0c
/*0x9e70*/  .byte 0x01
/*0x9e71*/  .byte 0x01
/*0x9e72*/  .byte 0x01
/*0x9e73*/  .byte 0x00
/*0x9e74*/  .byte 0x01
/*0x9e75*/  .byte 0x00
/*0x9e76*/  .byte 0x00
/*0x9e77*/  .byte 0x00
/*0x9e78*/  .byte 0x00
/*0x9e79*/  .byte 0x02
/*0x9e7a*/  .byte 0xfe
/*0x9e7b*/  .byte 0x00
/*0x9e7c*/  .byte 0x04
/*0x9e7d*/  .byte 0x06
/*0x9e7e*/  .byte 0x03
/*0x9e7f*/  .byte 0x0a
/*0x9e80*/  .byte 0x08
/*0x9e81*/  .byte 0x07
/*0x9e82*/  .byte 0x02
/*0x9e83*/  .byte 0x01
/*0x9e84*/  .byte 0x05
/*0x9e85*/  .byte 0x09
/*0x9e86*/  .byte 0xff
/*0x9e87*/  .byte 0xff
/*0x9e88*/  .byte 0xff
/*0x9e89*/  .byte 0xff
/*0x9e8a*/  .byte 0xff
/*0x9e8b*/  .byte 0xff
/*0x9e8c*/  .byte 0x00
/*0x9e8d*/  .byte 0x00
/*0x9e8e*/  .byte 0x00
/*0x9e8f*/  .byte 0x00
/*0x9e90*/  .byte 0xed
/*0x9e91*/  .byte 0x5c
/*0x9e92*/  .byte 0x00
/*0x9e93*/  .byte 0x00
/*0x9e94*/  .byte 0x00
/*0x9e95*/  .byte 0x00
/*0x9e96*/  .byte 0x00
/*0x9e97*/  .byte 0x00
/*0x9e98*/  .byte 0xfd
/*0x9e99*/  .byte 0x59
/*0x9e9a*/  .byte 0x00
/*0x9e9b*/  .byte 0x00
/*0x9e9c*/  .byte 0x00
/*0x9e9d*/  .byte 0x00
/*0x9e9e*/  .byte 0x00
/*0x9e9f*/  .byte 0x00
/*0x9ea0*/  .byte 0x00
/*0x9ea1*/  .byte 0x00
/*0x9ea2*/  .byte 0x00
/*0x9ea3*/  .byte 0x00
/*0x9ea4*/  .byte 0x09
/*0x9ea5*/  .byte 0x5d
/*0x9ea6*/  .byte 0x00
/*0x9ea7*/  .byte 0x00
/*0x9ea8*/  .byte 0xc5
/*0x9ea9*/  .byte 0x5e
/*0x9eaa*/  .byte 0x00
/*0x9eab*/  .byte 0x00
/*0x9eac*/  .byte 0x09
/*0x9ead*/  .byte 0x5a
/*0x9eae*/  .byte 0x00
/*0x9eaf*/  .byte 0x00
/*0x9eb0*/  .byte 0x00
/*0x9eb1*/  .byte 0x00
/*0x9eb2*/  .byte 0x00
/*0x9eb3*/  .byte 0x00
/*0x9eb4*/  .byte 0x00
/*0x9eb5*/  .byte 0x00
/*0x9eb6*/  .byte 0x00
/*0x9eb7*/  .byte 0x00
/*0x9eb8*/  .byte 0x31
/*0x9eb9*/  .byte 0x5d
/*0x9eba*/  .byte 0x00
/*0x9ebb*/  .byte 0x00
/*0x9ebc*/  .byte 0xfd
/*0x9ebd*/  .byte 0x5e
/*0x9ebe*/  .byte 0x00
/*0x9ebf*/  .byte 0x00
/*0x9ec0*/  .byte 0x19
/*0x9ec1*/  .byte 0x5a
/*0x9ec2*/  .byte 0x00
/*0x9ec3*/  .byte 0x00
/*0x9ec4*/  .byte 0x00
/*0x9ec5*/  .byte 0x00
/*0x9ec6*/  .byte 0x00
/*0x9ec7*/  .byte 0x00
/*0x9ec8*/  .byte 0x00
/*0x9ec9*/  .byte 0x00
/*0x9eca*/  .byte 0x00
/*0x9ecb*/  .byte 0x00
/*0x9ecc*/  .byte 0x45
/*0x9ecd*/  .byte 0x5e
/*0x9ece*/  .byte 0x00
/*0x9ecf*/  .byte 0x00
/*0x9ed0*/  .byte 0xe5
/*0x9ed1*/  .byte 0x60
/*0x9ed2*/  .byte 0x00
/*0x9ed3*/  .byte 0x00
/*0x9ed4*/  .byte 0xd1
/*0x9ed5*/  .byte 0x5b
/*0x9ed6*/  .byte 0x00
/*0x9ed7*/  .byte 0x00
/*0x9ed8*/  .byte 0xed
/*0x9ed9*/  .byte 0x59
/*0x9eda*/  .byte 0x00
/*0x9edb*/  .byte 0x00
/*0x9edc*/  .byte 0x00
/*0x9edd*/  .byte 0x00
/*0x9ede*/  .byte 0x00
/*0x9edf*/  .byte 0x00
/*0x9ee0*/  .byte 0x79
/*0x9ee1*/  .byte 0x5e
/*0x9ee2*/  .byte 0x00
/*0x9ee3*/  .byte 0x00
/*0x9ee4*/  .byte 0xb9
/*0x9ee5*/  .byte 0x61
/*0x9ee6*/  .byte 0x00
/*0x9ee7*/  .byte 0x00
/*0x9ee8*/  .byte 0x21
/*0x9ee9*/  .byte 0x5c
/*0x9eea*/  .byte 0x00
/*0x9eeb*/  .byte 0x00
/*0x9eec*/  .byte 0x00
/*0x9eed*/  .byte 0x00
/*0x9eee*/  .byte 0x00
/*0x9eef*/  .byte 0x00
/*0x9ef0*/  .byte 0x00
/*0x9ef1*/  .byte 0x00
/*0x9ef2*/  .byte 0x00
/*0x9ef3*/  .byte 0x00
/*0x9ef4*/  .byte 0x1d
/*0x9ef5*/  .byte 0x5e
/*0x9ef6*/  .byte 0x00
/*0x9ef7*/  .byte 0x00
/*0x9ef8*/  .byte 0x7d
/*0x9ef9*/  .byte 0x60
/*0x9efa*/  .byte 0x00
/*0x9efb*/  .byte 0x00
/*0x9efc*/  .byte 0x5d
/*0x9efd*/  .byte 0x5b
/*0x9efe*/  .byte 0x00
/*0x9eff*/  .byte 0x00
/*0x9f00*/  .byte 0x95
/*0x9f01*/  .byte 0x59
/*0x9f02*/  .byte 0x00
/*0x9f03*/  .byte 0x00
/*0x9f04*/  .byte 0x00
/*0x9f05*/  .byte 0x00
/*0x9f06*/  .byte 0x00
/*0x9f07*/  .byte 0x00
/*0x9f08*/  .byte 0x41
/*0x9f09*/  .byte 0x5d
/*0x9f0a*/  .byte 0x00
/*0x9f0b*/  .byte 0x00
/*0x9f0c*/  .byte 0x35
/*0x9f0d*/  .byte 0x5f
/*0x9f0e*/  .byte 0x00
/*0x9f0f*/  .byte 0x00
/*0x9f10*/  .byte 0x25
/*0x9f11*/  .byte 0x5a
/*0x9f12*/  .byte 0x00
/*0x9f13*/  .byte 0x00
/*0x9f14*/  .byte 0xd1
/*0x9f15*/  .byte 0x58
/*0x9f16*/  .byte 0x00
/*0x9f17*/  .byte 0x00
/*0x9f18*/  .byte 0x00
/*0x9f19*/  .byte 0x00
/*0x9f1a*/  .byte 0x00
/*0x9f1b*/  .byte 0x00
/*0x9f1c*/  .byte 0xe1
/*0x9f1d*/  .byte 0x5d
/*0x9f1e*/  .byte 0x00
/*0x9f1f*/  .byte 0x00
/*0x9f20*/  .byte 0x29
/*0x9f21*/  .byte 0x60
/*0x9f22*/  .byte 0x00
/*0x9f23*/  .byte 0x00
/*0x9f24*/  .byte 0xdd
/*0x9f25*/  .byte 0x5a
/*0x9f26*/  .byte 0x00
/*0x9f27*/  .byte 0x00
/*0x9f28*/  .byte 0x00
/*0x9f29*/  .byte 0x00
/*0x9f2a*/  .byte 0x00
/*0x9f2b*/  .byte 0x00
/*0x9f2c*/  .byte 0x00
/*0x9f2d*/  .byte 0x00
/*0x9f2e*/  .byte 0x00
/*0x9f2f*/  .byte 0x00
/*0x9f30*/  .byte 0x51
/*0x9f31*/  .byte 0x5e
/*0x9f32*/  .byte 0x00
/*0x9f33*/  .byte 0x00
/*0x9f34*/  .byte 0x31
/*0x9f35*/  .byte 0x61
/*0x9f36*/  .byte 0x00
/*0x9f37*/  .byte 0x00
/*0x9f38*/  .byte 0xe5
/*0x9f39*/  .byte 0x5b
/*0x9f3a*/  .byte 0x00
/*0x9f3b*/  .byte 0x00
/*0x9f3c*/  .byte 0x00
/*0x9f3d*/  .byte 0x00
/*0x9f3e*/  .byte 0x00
/*0x9f3f*/  .byte 0x00
/*0x9f40*/  .byte 0x00
/*0x9f41*/  .byte 0x00
/*0x9f42*/  .byte 0x00
/*0x9f43*/  .byte 0x00
/*0x9f44*/  .byte 0x69
/*0x9f45*/  .byte 0x5d
/*0x9f46*/  .byte 0x00
/*0x9f47*/  .byte 0x00
/*0x9f48*/  .byte 0x81
/*0x9f49*/  .byte 0x5f
/*0x9f4a*/  .byte 0x00
/*0x9f4b*/  .byte 0x00
/*0x9f4c*/  .byte 0xb9
/*0x9f4d*/  .byte 0x5a
/*0x9f4e*/  .byte 0x00
/*0x9f4f*/  .byte 0x00
/*0x9f50*/  .byte 0xe1
/*0x9f51*/  .byte 0x58
/*0x9f52*/  .byte 0x00
/*0x9f53*/  .byte 0x00
/*0x9f54*/  .byte 0x07
/*0x9f55*/  .byte 0xff
/*0x9f56*/  .byte 0x07
/*0x9f57*/  .byte 0xf4
/*0x9f58*/  .byte 0x07
/*0x9f59*/  .byte 0xdd
/*0x9f5a*/  .byte 0x07
/*0x9f5b*/  .byte 0xc9
/*0x9f5c*/  .byte 0x07
/*0x9f5d*/  .byte 0xb7
/*0x9f5e*/  .byte 0x07
/*0x9f5f*/  .byte 0xa6
/*0x9f60*/  .byte 0x07
/*0x9f61*/  .byte 0x97
/*0x9f62*/  .byte 0x07
/*0x9f63*/  .byte 0x89
/*0x9f64*/  .byte 0x07
/*0x9f65*/  .byte 0x7d
/*0x9f66*/  .byte 0x07
/*0x9f67*/  .byte 0x72
/*0x9f68*/  .byte 0x07
/*0x9f69*/  .byte 0x67
/*0x9f6a*/  .byte 0x07
/*0x9f6b*/  .byte 0x5e
/*0x9f6c*/  .byte 0x07
/*0x9f6d*/  .byte 0x55
/*0x9f6e*/  .byte 0x07
/*0x9f6f*/  .byte 0x4e
/*0x9f70*/  .byte 0x07
/*0x9f71*/  .byte 0x47
/*0x9f72*/  .byte 0x07
/*0x9f73*/  .byte 0x40
/*0x9f74*/  .byte 0x07
/*0x9f75*/  .byte 0x3a
/*0x9f76*/  .byte 0x07
/*0x9f77*/  .byte 0x35
/*0x9f78*/  .byte 0x07
/*0x9f79*/  .byte 0x30
/*0x9f7a*/  .byte 0x07
/*0x9f7b*/  .byte 0x2c
/*0x9f7c*/  .byte 0x07
/*0x9f7d*/  .byte 0x28
/*0x9f7e*/  .byte 0x07
/*0x9f7f*/  .byte 0x24
/*0x9f80*/  .byte 0x07
/*0x9f81*/  .byte 0x21
/*0x9f82*/  .byte 0x07
/*0x9f83*/  .byte 0x1e
/*0x9f84*/  .byte 0x07
/*0x9f85*/  .byte 0x1b
/*0x9f86*/  .byte 0x07
/*0x9f87*/  .byte 0x19
/*0x9f88*/  .byte 0x08
/*0x9f89*/  .byte 0x19
/*0x9f8a*/  .byte 0x08
/*0x9f8b*/  .byte 0x17
/*0x9f8c*/  .byte 0x08
/*0x9f8d*/  .byte 0x15
/*0x9f8e*/  .byte 0x08
/*0x9f8f*/  .byte 0x13
/*0x9f90*/  .byte 0x08
/*0x9f91*/  .byte 0x11
/*0x9f92*/  .byte 0x08
/*0x9f93*/  .byte 0x10
/*0x9f94*/  .byte 0x08
/*0x9f95*/  .byte 0x0e
/*0x9f96*/  .byte 0x08
/*0x9f97*/  .byte 0x0d
/*0x9f98*/  .byte 0x08
/*0x9f99*/  .byte 0x0c
/*0x9f9a*/  .byte 0x09
/*0x9f9b*/  .byte 0x0c
/*0x9f9c*/  .byte 0x09
/*0x9f9d*/  .byte 0x0b
/*0x9f9e*/  .byte 0x09
/*0x9f9f*/  .byte 0x0a
/*0x9fa0*/  .byte 0x09
/*0x9fa1*/  .byte 0x09
/*0x9fa2*/  .byte 0x04
/*0x9fa3*/  .byte 0x04
/*0x9fa4*/  .byte 0x07
/*0x9fa5*/  .byte 0x06
/*0x9fa6*/  .byte 0x05
/*0x9fa7*/  .byte 0x04
/*0x9fa8*/  .byte 0x04
/*0x9fa9*/  .byte 0x03
/*0x9faa*/  .byte 0x08
/*0x9fab*/  .byte 0x05
/*0x9fac*/  .byte 0x07
/*0x9fad*/  .byte 0x04
/*0x9fae*/  .byte 0x0a
/*0x9faf*/  .byte 0x05
/*0x9fb0*/  .byte 0x0b
/*0x9fb1*/  .byte 0x05
/*0x9fb2*/  .byte 0x07
/*0x9fb3*/  .byte 0x03
/*0x9fb4*/  .byte 0x13
/*0x9fb5*/  .byte 0x07
/*0x9fb6*/  .byte 0x0c
/*0x9fb7*/  .byte 0x04
/*0x9fb8*/  .byte 0x0d
/*0x9fb9*/  .byte 0x04
/*0x9fba*/  .byte 0x0e
/*0x9fbb*/  .byte 0x04
/*0x9fbc*/  .byte 0x10
/*0x9fbd*/  .byte 0x04
/*0x9fbe*/  .byte 0x0d
/*0x9fbf*/  .byte 0x03
/*0x9fc0*/  .byte 0x09
/*0x9fc1*/  .byte 0x02
/*0x9fc2*/  .byte 0x0a
/*0x9fc3*/  .byte 0x02
/*0x9fc4*/  .byte 0x0b
/*0x9fc5*/  .byte 0x02
/*0x9fc6*/  .byte 0x0d
/*0x9fc7*/  .byte 0x02
/*0x9fc8*/  .byte 0x0e
/*0x9fc9*/  .byte 0x02
/*0x9fca*/  .byte 0x07
/*0x9fcb*/  .byte 0x01
/*0x9fcc*/  .byte 0x08
/*0x9fcd*/  .byte 0x01
/*0x9fce*/  .byte 0x09
/*0x9fcf*/  .byte 0x01
/*0x9fd0*/  .byte 0x0a
/*0x9fd1*/  .byte 0x01
/*0x9fd2*/  .byte 0x0b
/*0x9fd3*/  .byte 0x01
/*0x9fd4*/  .byte 0x0c
/*0x9fd5*/  .byte 0x01
/*0x9fd6*/  .byte 0x0e
/*0x9fd7*/  .byte 0x01
/*0x9fd8*/  .byte 0x0f
/*0x9fd9*/  .byte 0x01
/*0x9fda*/  .byte 0x11
/*0x9fdb*/  .byte 0x01
/*0x9fdc*/  .byte 0x12
/*0x9fdd*/  .byte 0x01
/*0x9fde*/  .byte 0x14
/*0x9fdf*/  .byte 0x01
/*0x9fe0*/  .byte 0x17
/*0x9fe1*/  .byte 0x01
/*0x9fe2*/  .byte 0x19
/*0x9fe3*/  .byte 0x01
/*0x9fe4*/  .byte 0x1c
/*0x9fe5*/  .byte 0x01
/*0x9fe6*/  .byte 0x1e
/*0x9fe7*/  .byte 0x01
/*0x9fe8*/  .byte 0x22
/*0x9fe9*/  .byte 0x01
/*0x9fea*/  .byte 0x25
/*0x9feb*/  .byte 0x01
/*0x9fec*/  .byte 0x29
/*0x9fed*/  .byte 0x01
/*0x9fee*/  .byte 0x2d
/*0x9fef*/  .byte 0x01
/*0x9ff0*/  .byte 0x32
/*0x9ff1*/  .byte 0x01
/*0x9ff2*/  .byte 0x37
/*0x9ff3*/  .byte 0x01
/*0x9ff4*/  .byte 0x3c
/*0x9ff5*/  .byte 0x01
/*0x9ff6*/  .byte 0x42
/*0x9ff7*/  .byte 0x01
/*0x9ff8*/  .byte 0x49
/*0x9ff9*/  .byte 0x01
/*0x9ffa*/  .byte 0x50
/*0x9ffb*/  .byte 0x01
/*0x9ffc*/  .byte 0x59
/*0x9ffd*/  .byte 0x01
/*0x9ffe*/  .byte 0x62
/*0x9fff*/  .byte 0x01
/*0xa000*/  .byte 0x6b
/*0xa001*/  .byte 0x01
/*0xa002*/  .byte 0x76
/*0xa003*/  .byte 0x01
/*0xa004*/  .byte 0x82
/*0xa005*/  .byte 0x01
/*0xa006*/  .byte 0x8f
/*0xa007*/  .byte 0x01
/*0xa008*/  .byte 0x9e
/*0xa009*/  .byte 0x01
/*0xa00a*/  .byte 0xae
/*0xa00b*/  .byte 0x01
/*0xa00c*/  .byte 0xbf
/*0xa00d*/  .byte 0x01
/*0xa00e*/  .byte 0xd2
/*0xa00f*/  .byte 0x01
/*0xa010*/  .byte 0xe7
/*0xa011*/  .byte 0x01
/*0xa012*/  .byte 0xfe
/*0xa013*/  .byte 0x01
/*0xa014*/  .byte 0xe0
/*0xa015*/  .byte 0x2c
/*0xa016*/  .byte 0xe1
/*0xa017*/  .byte 0x04
/*0xa018*/  .byte 0x16
/*0xa019*/  .byte 0x07
/*0xa01a*/  .byte 0x1a
/*0xa01b*/  .byte 0x35
/*0xa01c*/  .byte 0x2b
/*0xa01d*/  .byte 0x09
/*0xa01e*/  .byte 0x05
/*0xa01f*/  .byte 0x14
/*0xa020*/  .byte 0x08
/*0xa021*/  .byte 0x15
/*0xa022*/  .byte 0x11
/*0xa023*/  .byte 0x1e
/*0xa024*/  .byte 0x1f
/*0xa025*/  .byte 0x20
/*0xa026*/  .byte 0x21
/*0xa027*/  .byte 0x22
/*0xa028*/  .byte 0x23
/*0xa029*/  .byte 0x00
/*0xa02a*/  .byte 0x00
/*0xa02b*/  .byte 0x00
/*0xa02c*/  .byte 0x14
/*0xa02d*/  .byte 0xa0
/*0xa02e*/  .byte 0x00
/*0xa02f*/  .byte 0x00
/*0xa030*/  .byte 0x07
/*0xa031*/  .byte 0xff
/*0xa032*/  .byte 0x00
/*0xa033*/  .byte 0x00
/*0xa034*/  .byte 0x1b
/*0xa035*/  .byte 0xa0
/*0xa036*/  .byte 0x00
/*0xa037*/  .byte 0x00
/*0xa038*/  .byte 0x03
/*0xa039*/  .byte 0x00
/*0xa03a*/  .byte 0xff
/*0xa03b*/  .byte 0x00
/*0xa03c*/  .byte 0x1e
/*0xa03d*/  .byte 0xa0
/*0xa03e*/  .byte 0x00
/*0xa03f*/  .byte 0x00
/*0xa040*/  .byte 0x01
/*0xa041*/  .byte 0x00
/*0xa042*/  .byte 0x00
/*0xa043*/  .byte 0xff
/*0xa044*/  .byte 0x1f
/*0xa045*/  .byte 0xa0
/*0xa046*/  .byte 0x00
/*0xa047*/  .byte 0x00
/*0xa048*/  .byte 0x04
/*0xa049*/  .byte 0xff
/*0xa04a*/  .byte 0xff
/*0xa04b*/  .byte 0x00
/*0xa04c*/  .byte 0x23
/*0xa04d*/  .byte 0xa0
/*0xa04e*/  .byte 0x00
/*0xa04f*/  .byte 0x00
/*0xa050*/  .byte 0x06
/*0xa051*/  .byte 0xff
/*0xa052*/  .byte 0x00
/*0xa053*/  .byte 0xff
/*0xa054*/  .byte 0x46
/*0xa055*/  .byte 0x75
/*0xa056*/  .byte 0x6c
/*0xa057*/  .byte 0x6c
/*0xa058*/  .byte 0x20
/*0xa059*/  .byte 0x4f
/*0xa05a*/  .byte 0x6e
/*0xa05b*/  .byte 0x00
/*0xa05c*/  .byte 0x00
/*0xa05d*/  .byte 0x00
/*0xa05e*/  .byte 0x00
/*0xa05f*/  .byte 0x00
/*0xa060*/  .byte 0x00
/*0xa061*/  .byte 0x00
/*0xa062*/  .byte 0x00
/*0xa063*/  .byte 0x00
/*0xa064*/  .byte 0x00
/*0xa065*/  .byte 0x00
/*0xa066*/  .byte 0x00
/*0xa067*/  .byte 0x00
/*0xa068*/  .byte 0x00
/*0xa069*/  .byte 0x00
/*0xa06a*/  .byte 0x00
/*0xa06b*/  .byte 0x00
/*0xa06c*/  .byte 0x00
/*0xa06d*/  .byte 0x00
/*0xa06e*/  .byte 0x00
/*0xa06f*/  .byte 0x00
/*0xa070*/  .byte 0x00
/*0xa071*/  .byte 0x00
/*0xa072*/  .byte 0x00
/*0xa073*/  .byte 0x00
/*0xa074*/  .byte 0x42
/*0xa075*/  .byte 0x72
/*0xa076*/  .byte 0x65
/*0xa077*/  .byte 0x61
/*0xa078*/  .byte 0x74
/*0xa079*/  .byte 0x68
/*0xa07a*/  .byte 0x00
/*0xa07b*/  .byte 0x00
/*0xa07c*/  .byte 0x00
/*0xa07d*/  .byte 0x00
/*0xa07e*/  .byte 0x00
/*0xa07f*/  .byte 0x00
/*0xa080*/  .byte 0x00
/*0xa081*/  .byte 0x00
/*0xa082*/  .byte 0x00
/*0xa083*/  .byte 0x00
/*0xa084*/  .byte 0x00
/*0xa085*/  .byte 0x00
/*0xa086*/  .byte 0x00
/*0xa087*/  .byte 0x00
/*0xa088*/  .byte 0x00
/*0xa089*/  .byte 0x00
/*0xa08a*/  .byte 0x00
/*0xa08b*/  .byte 0x00
/*0xa08c*/  .byte 0x00
/*0xa08d*/  .byte 0x00
/*0xa08e*/  .byte 0x00
/*0xa08f*/  .byte 0x00
/*0xa090*/  .byte 0x00
/*0xa091*/  .byte 0x00
/*0xa092*/  .byte 0x00
/*0xa093*/  .byte 0x00
/*0xa094*/  .byte 0x42
/*0xa095*/  .byte 0x72
/*0xa096*/  .byte 0x65
/*0xa097*/  .byte 0x61
/*0xa098*/  .byte 0x74
/*0xa099*/  .byte 0x68
/*0xa09a*/  .byte 0x20
/*0xa09b*/  .byte 0x48
/*0xa09c*/  .byte 0x75
/*0xa09d*/  .byte 0x65
/*0xa09e*/  .byte 0x00
/*0xa09f*/  .byte 0x00
/*0xa0a0*/  .byte 0x00
/*0xa0a1*/  .byte 0x00
/*0xa0a2*/  .byte 0x00
/*0xa0a3*/  .byte 0x00
/*0xa0a4*/  .byte 0x00
/*0xa0a5*/  .byte 0x00
/*0xa0a6*/  .byte 0x00
/*0xa0a7*/  .byte 0x00
/*0xa0a8*/  .byte 0x00
/*0xa0a9*/  .byte 0x00
/*0xa0aa*/  .byte 0x00
/*0xa0ab*/  .byte 0x00
/*0xa0ac*/  .byte 0x00
/*0xa0ad*/  .byte 0x00
/*0xa0ae*/  .byte 0x00
/*0xa0af*/  .byte 0x00
/*0xa0b0*/  .byte 0x00
/*0xa0b1*/  .byte 0x00
/*0xa0b2*/  .byte 0x00
/*0xa0b3*/  .byte 0x00
/*0xa0b4*/  .byte 0x53
/*0xa0b5*/  .byte 0x69
/*0xa0b6*/  .byte 0x6e
/*0xa0b7*/  .byte 0x67
/*0xa0b8*/  .byte 0x6c
/*0xa0b9*/  .byte 0x65
/*0xa0ba*/  .byte 0x00
/*0xa0bb*/  .byte 0x00
/*0xa0bc*/  .byte 0x00
/*0xa0bd*/  .byte 0x00
/*0xa0be*/  .byte 0x00
/*0xa0bf*/  .byte 0x00
/*0xa0c0*/  .byte 0x00
/*0xa0c1*/  .byte 0x00
/*0xa0c2*/  .byte 0x00
/*0xa0c3*/  .byte 0x00
/*0xa0c4*/  .byte 0x00
/*0xa0c5*/  .byte 0x00
/*0xa0c6*/  .byte 0x00
/*0xa0c7*/  .byte 0x00
/*0xa0c8*/  .byte 0x00
/*0xa0c9*/  .byte 0x00
/*0xa0ca*/  .byte 0x00
/*0xa0cb*/  .byte 0x00
/*0xa0cc*/  .byte 0x00
/*0xa0cd*/  .byte 0x00
/*0xa0ce*/  .byte 0x00
/*0xa0cf*/  .byte 0x00
/*0xa0d0*/  .byte 0x00
/*0xa0d1*/  .byte 0x00
/*0xa0d2*/  .byte 0x00
/*0xa0d3*/  .byte 0x00
/*0xa0d4*/  .byte 0x57
/*0xa0d5*/  .byte 0x61
/*0xa0d6*/  .byte 0x76
/*0xa0d7*/  .byte 0x65
/*0xa0d8*/  .byte 0x00
/*0xa0d9*/  .byte 0x00
/*0xa0da*/  .byte 0x00
/*0xa0db*/  .byte 0x00
/*0xa0dc*/  .byte 0x00
/*0xa0dd*/  .byte 0x00
/*0xa0de*/  .byte 0x00
/*0xa0df*/  .byte 0x00
/*0xa0e0*/  .byte 0x00
/*0xa0e1*/  .byte 0x00
/*0xa0e2*/  .byte 0x00
/*0xa0e3*/  .byte 0x00
/*0xa0e4*/  .byte 0x00
/*0xa0e5*/  .byte 0x00
/*0xa0e6*/  .byte 0x00
/*0xa0e7*/  .byte 0x00
/*0xa0e8*/  .byte 0x00
/*0xa0e9*/  .byte 0x00
/*0xa0ea*/  .byte 0x00
/*0xa0eb*/  .byte 0x00
/*0xa0ec*/  .byte 0x00
/*0xa0ed*/  .byte 0x00
/*0xa0ee*/  .byte 0x00
/*0xa0ef*/  .byte 0x00
/*0xa0f0*/  .byte 0x00
/*0xa0f1*/  .byte 0x00
/*0xa0f2*/  .byte 0x00
/*0xa0f3*/  .byte 0x00
/*0xa0f4*/  .byte 0x52
/*0xa0f5*/  .byte 0x69
/*0xa0f6*/  .byte 0x70
/*0xa0f7*/  .byte 0x70
/*0xa0f8*/  .byte 0x6c
/*0xa0f9*/  .byte 0x65
/*0xa0fa*/  .byte 0x00
/*0xa0fb*/  .byte 0x00
/*0xa0fc*/  .byte 0x00
/*0xa0fd*/  .byte 0x00
/*0xa0fe*/  .byte 0x00
/*0xa0ff*/  .byte 0x00
/*0xa100*/  .byte 0x00
/*0xa101*/  .byte 0x00
/*0xa102*/  .byte 0x00
/*0xa103*/  .byte 0x00
/*0xa104*/  .byte 0x00
/*0xa105*/  .byte 0x00
/*0xa106*/  .byte 0x00
/*0xa107*/  .byte 0x00
/*0xa108*/  .byte 0x00
/*0xa109*/  .byte 0x00
/*0xa10a*/  .byte 0x00
/*0xa10b*/  .byte 0x00
/*0xa10c*/  .byte 0x00
/*0xa10d*/  .byte 0x00
/*0xa10e*/  .byte 0x00
/*0xa10f*/  .byte 0x00
/*0xa110*/  .byte 0x00
/*0xa111*/  .byte 0x00
/*0xa112*/  .byte 0x00
/*0xa113*/  .byte 0x00
/*0xa114*/  .byte 0x43
/*0xa115*/  .byte 0x72
/*0xa116*/  .byte 0x6f
/*0xa117*/  .byte 0x73
/*0xa118*/  .byte 0x73
/*0xa119*/  .byte 0x00
/*0xa11a*/  .byte 0x00
/*0xa11b*/  .byte 0x00
/*0xa11c*/  .byte 0x00
/*0xa11d*/  .byte 0x00
/*0xa11e*/  .byte 0x00
/*0xa11f*/  .byte 0x00
/*0xa120*/  .byte 0x00
/*0xa121*/  .byte 0x00
/*0xa122*/  .byte 0x00
/*0xa123*/  .byte 0x00
/*0xa124*/  .byte 0x00
/*0xa125*/  .byte 0x00
/*0xa126*/  .byte 0x00
/*0xa127*/  .byte 0x00
/*0xa128*/  .byte 0x00
/*0xa129*/  .byte 0x00
/*0xa12a*/  .byte 0x00
/*0xa12b*/  .byte 0x00
/*0xa12c*/  .byte 0x00
/*0xa12d*/  .byte 0x00
/*0xa12e*/  .byte 0x00
/*0xa12f*/  .byte 0x00
/*0xa130*/  .byte 0x00
/*0xa131*/  .byte 0x00
/*0xa132*/  .byte 0x00
/*0xa133*/  .byte 0x00
/*0xa134*/  .byte 0x52
/*0xa135*/  .byte 0x61
/*0xa136*/  .byte 0x69
/*0xa137*/  .byte 0x6e
/*0xa138*/  .byte 0x20
/*0xa139*/  .byte 0x44
/*0xa13a*/  .byte 0x6f
/*0xa13b*/  .byte 0x77
/*0xa13c*/  .byte 0x6e
/*0xa13d*/  .byte 0x00
/*0xa13e*/  .byte 0x00
/*0xa13f*/  .byte 0x00
/*0xa140*/  .byte 0x00
/*0xa141*/  .byte 0x00
/*0xa142*/  .byte 0x00
/*0xa143*/  .byte 0x00
/*0xa144*/  .byte 0x00
/*0xa145*/  .byte 0x00
/*0xa146*/  .byte 0x00
/*0xa147*/  .byte 0x00
/*0xa148*/  .byte 0x00
/*0xa149*/  .byte 0x00
/*0xa14a*/  .byte 0x00
/*0xa14b*/  .byte 0x00
/*0xa14c*/  .byte 0x00
/*0xa14d*/  .byte 0x00
/*0xa14e*/  .byte 0x00
/*0xa14f*/  .byte 0x00
/*0xa150*/  .byte 0x00
/*0xa151*/  .byte 0x00
/*0xa152*/  .byte 0x00
/*0xa153*/  .byte 0x00
/*0xa154*/  .byte 0x53
/*0xa155*/  .byte 0x74
/*0xa156*/  .byte 0x61
/*0xa157*/  .byte 0x72
/*0xa158*/  .byte 0x00
/*0xa159*/  .byte 0x00
/*0xa15a*/  .byte 0x00
/*0xa15b*/  .byte 0x00
/*0xa15c*/  .byte 0x00
/*0xa15d*/  .byte 0x00
/*0xa15e*/  .byte 0x00
/*0xa15f*/  .byte 0x00
/*0xa160*/  .byte 0x00
/*0xa161*/  .byte 0x00
/*0xa162*/  .byte 0x00
/*0xa163*/  .byte 0x00
/*0xa164*/  .byte 0x00
/*0xa165*/  .byte 0x00
/*0xa166*/  .byte 0x00
/*0xa167*/  .byte 0x00
/*0xa168*/  .byte 0x00
/*0xa169*/  .byte 0x00
/*0xa16a*/  .byte 0x00
/*0xa16b*/  .byte 0x00
/*0xa16c*/  .byte 0x00
/*0xa16d*/  .byte 0x00
/*0xa16e*/  .byte 0x00
/*0xa16f*/  .byte 0x00
/*0xa170*/  .byte 0x00
/*0xa171*/  .byte 0x00
/*0xa172*/  .byte 0x00
/*0xa173*/  .byte 0x00
/*0xa174*/  .byte 0x47
/*0xa175*/  .byte 0x61
/*0xa176*/  .byte 0x6d
/*0xa177*/  .byte 0x65
/*0xa178*/  .byte 0x20
/*0xa179*/  .byte 0x53
/*0xa17a*/  .byte 0x6e
/*0xa17b*/  .byte 0x61
/*0xa17c*/  .byte 0x6b
/*0xa17d*/  .byte 0x65
/*0xa17e*/  .byte 0x00
/*0xa17f*/  .byte 0x00
/*0xa180*/  .byte 0x00
/*0xa181*/  .byte 0x00
/*0xa182*/  .byte 0x00
/*0xa183*/  .byte 0x00
/*0xa184*/  .byte 0x00
/*0xa185*/  .byte 0x00
/*0xa186*/  .byte 0x00
/*0xa187*/  .byte 0x00
/*0xa188*/  .byte 0x00
/*0xa189*/  .byte 0x00
/*0xa18a*/  .byte 0x00
/*0xa18b*/  .byte 0x00
/*0xa18c*/  .byte 0x00
/*0xa18d*/  .byte 0x00
/*0xa18e*/  .byte 0x00
/*0xa18f*/  .byte 0x00
/*0xa190*/  .byte 0x00
/*0xa191*/  .byte 0x00
/*0xa192*/  .byte 0x00
/*0xa193*/  .byte 0x00

            sram_init_1.copy_words_2.src:
/*0xa194*/  .word 0x0000a1b4 /* possible pointer */
            sram_init_1.copy_words_2.dst:
/*0xa198*/  .word 0x20000000
            sram_init_1.copy_words_2.len:
/*0xa19c*/  .word 0x00000094
            sram_init_1.copy_words_2:
/*0xa1a0*/  .word 0x00009400 /* possible pointer */
            sram_init_2.clear_words.unused_src:
/*0xa1a4*/  .word 0x0000a248
            sram_init_2.clear_words.dst:
/*0xa1a8*/  .word 0x20000094
            sram_init_2.clear_words.len:
/*0xa1ac*/  .word 0x000026b4
            sram_init_2.clear_words:
/*0xa1b0*/  .word 0x00009410 /* possible pointer */

/*0xa1b4*/  .byte 0x00
/*0xa1b5*/  .byte 0x00
/*0xa1b6*/  .byte 0x00
/*0xa1b7*/  .byte 0x00
/*0xa1b8*/  .byte 0x00
/*0xa1b9*/  .byte 0xa2
/*0xa1ba*/  .byte 0x4a
/*0xa1bb*/  .byte 0x04
/*0xa1bc*/  .byte 0x00
/*0xa1bd*/  .byte 0x00
/*0xa1be*/  .byte 0x00
/*0xa1bf*/  .byte 0x00
/*0xa1c0*/  .byte 0x01
/*0xa1c1*/  .byte 0x00
/*0xa1c2*/  .byte 0x00
/*0xa1c3*/  .byte 0x00
/*0xa1c4*/  .byte 0x00
/*0xa1c5*/  .byte 0x00
/*0xa1c6*/  .byte 0x00
/*0xa1c7*/  .byte 0x00
/*0xa1c8*/  .byte 0x00
/*0xa1c9*/  .byte 0x00
/*0xa1ca*/  .byte 0xff
/*0xa1cb*/  .byte 0x00
/*0xa1cc*/  .byte 0x00
/*0xa1cd*/  .byte 0x00
/*0xa1ce*/  .byte 0x00
/*0xa1cf*/  .byte 0x00
/*0xa1d0*/  .byte 0x00
/*0xa1d1*/  .byte 0x00
/*0xa1d2*/  .byte 0x00
/*0xa1d3*/  .byte 0x00
/*0xa1d4*/  .byte 0x01
/*0xa1d5*/  .byte 0x00
/*0xa1d6*/  .byte 0x00
/*0xa1d7*/  .byte 0x00
/*0xa1d8*/  .byte 0x01
/*0xa1d9*/  .byte 0x00
/*0xa1da*/  .byte 0x00
/*0xa1db*/  .byte 0x00
/*0xa1dc*/  .byte 0x01
/*0xa1dd*/  .byte 0x00
/*0xa1de*/  .byte 0x00
/*0xa1df*/  .byte 0x00
/*0xa1e0*/  .byte 0x00
/*0xa1e1*/  .byte 0x00
/*0xa1e2*/  .byte 0x00
/*0xa1e3*/  .byte 0x00
/*0xa1e4*/  .byte 0x00
/*0xa1e5*/  .byte 0x00
/*0xa1e6*/  .byte 0x00
/*0xa1e7*/  .byte 0x00
/*0xa1e8*/  .byte 0x00
/*0xa1e9*/  .byte 0x00
/*0xa1ea*/  .byte 0x00
/*0xa1eb*/  .byte 0x00
/*0xa1ec*/  .byte 0x00
/*0xa1ed*/  .byte 0x00
/*0xa1ee*/  .byte 0x00
/*0xa1ef*/  .byte 0x00
/*0xa1f0*/  .byte 0x00
/*0xa1f1*/  .byte 0x00
/*0xa1f2*/  .byte 0x00
/*0xa1f3*/  .byte 0x00
/*0xa1f4*/  .byte 0x00
/*0xa1f5*/  .byte 0x00
/*0xa1f6*/  .byte 0x00
/*0xa1f7*/  .byte 0x00
/*0xa1f8*/  .byte 0x00
/*0xa1f9*/  .byte 0x00
/*0xa1fa*/  .byte 0xff
/*0xa1fb*/  .byte 0x00
/*0xa1fc*/  .byte 0x00
/*0xa1fd*/  .byte 0x00
/*0xa1fe*/  .byte 0x00
/*0xa1ff*/  .byte 0x00
/*0xa200*/  .byte 0x00
/*0xa201*/  .byte 0x00
/*0xa202*/  .byte 0x00
/*0xa203*/  .byte 0x00
/*0xa204*/  .byte 0x00
/*0xa205*/  .byte 0x00
/*0xa206*/  .byte 0x00
/*0xa207*/  .byte 0x00
/*0xa208*/  .byte 0x00
/*0xa209*/  .byte 0x00
/*0xa20a*/  .byte 0x00
/*0xa20b*/  .byte 0x00
/*0xa20c*/  .byte 0x00
/*0xa20d*/  .byte 0x00
/*0xa20e*/  .byte 0x00
/*0xa20f*/  .byte 0x00
/*0xa210*/  .byte 0x00
/*0xa211*/  .byte 0x00
/*0xa212*/  .byte 0x00
/*0xa213*/  .byte 0x00
/*0xa214*/  .byte 0x00
/*0xa215*/  .byte 0x00
/*0xa216*/  .byte 0x00
/*0xa217*/  .byte 0x00
/*0xa218*/  .byte 0x00
/*0xa219*/  .byte 0x00
/*0xa21a*/  .byte 0x00
/*0xa21b*/  .byte 0x00
/*0xa21c*/  .byte 0x00
/*0xa21d*/  .byte 0x00
/*0xa21e*/  .byte 0x00
/*0xa21f*/  .byte 0x00
/*0xa220*/  .byte 0x00
/*0xa221*/  .byte 0x00
/*0xa222*/  .byte 0x00
/*0xa223*/  .byte 0x00
/*0xa224*/  .byte 0x00
/*0xa225*/  .byte 0x00
/*0xa226*/  .byte 0x00
/*0xa227*/  .byte 0x00
/*0xa228*/  .byte 0x00
/*0xa229*/  .byte 0x00
/*0xa22a*/  .byte 0x00
/*0xa22b*/  .byte 0x00
/*0xa22c*/  .byte 0x00
/*0xa22d*/  .byte 0x00
/*0xa22e*/  .byte 0x00
/*0xa22f*/  .byte 0x00
/*0xa230*/  .byte 0x00
/*0xa231*/  .byte 0x00
/*0xa232*/  .byte 0x00
/*0xa233*/  .byte 0x00
/*0xa234*/  .byte 0x00
/*0xa235*/  .byte 0x00
/*0xa236*/  .byte 0x00
/*0xa237*/  .byte 0x00
/*0xa238*/  .byte 0x00
/*0xa239*/  .byte 0x00
/*0xa23a*/  .byte 0x00
/*0xa23b*/  .byte 0x00
/*0xa23c*/  .byte 0x00
/*0xa23d*/  .byte 0x00
/*0xa23e*/  .byte 0x00
/*0xa23f*/  .byte 0x00
/*0xa240*/  .byte 0x00
/*0xa241*/  .byte 0x00
/*0xa242*/  .byte 0x00
/*0xa243*/  .byte 0x00
/*0xa244*/  .byte 0x00
/*0xa245*/  .byte 0x00
/*0xa246*/  .byte 0x00
/*0xa247*/  .byte 0x00
