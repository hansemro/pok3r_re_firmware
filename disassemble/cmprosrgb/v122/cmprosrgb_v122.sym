# Cooler Master MasterKeys Pro S RGB FW 1.2.2

[data]

3400 : vectors .word

[code]

*   +4 : reset
*   +4 : nmi
*   +4 : hard_fault
*   +4 : mpu_fault
*   +4 : bus_fault
*   +4 : usage_fault
*  +14 : svccall_intr
*   +4 : debug_intr
*   +8 : pendsv_intr
*   +4 : systick_intr
*   +4
*   +4
*   +4
*   +4
*   +4
*   +4
*   +4
*   +4
*   +4
*   +4
*   +4
*   +4
*   +4
*   +4
*   +4
*   +4
*   +4
*   +4
*   +4
*   +4
*   +4
*   +4
*   +4
*   +4
*   +4
*   +4
*   +8
*   +4
*   +4
*   +4
*   +4
*   +4
*   +4
*   +4
*   +4
*   +4
*  +14 : bftm0_intr
*   +4 : bftm1_intr
*   +4
*   +4
*   +4
*   +4
*   +4
*   +4
*   +4
*   +4
*   +4
*   +4
*   +4 : usb_intr
*   +8
*   +4
*   +4
*   +4
*   +4
*   +4
*   +4
*   +4
*  +18
*  +24
*   +4
*   +4

3572: generic_intr

3594: rand
35a8: srand
# void memcpy(void *src, void *dst, size_t len)
35b8: memcpy
# void _memset(void *ptr, size_t len, uint8_t value)
35dc: _memset
# void _memzero(void *ptr, size_t len)
35ea: _memzero
# void * memset(void *ptr, uint8_t value, size_t len)
35ee: memset
# void afio_set_pin_mux(int EXTIn, uint8_t port)
367c: afio_set_pin_mux
36a8
36d4
37d4
# void bftm_clear_compare_match_interrupt(uint32_t bftm_base)
38f0: bftm_clear_compare_match_interrupt
# void bftm_enable_counter(uint32_t bftm_base, int enable)
38fe: bftm_enable_counter
# void bftm_enable_compare_match(uint32_t bftm_base, int enable)
3912: bftm_enable_compare_match
# void bftm_set_compare_value(uint32_t bftm_base, uint32_t value)
3926: bftm_set_compare_value
# void bftm_set_counter(uint32_t bftm_base, uint32_t value)
392a: bftm_set_counter
# void AFIO_GPxConfig(uint32_t port, uint32_t CFGn, int AFn)
3930: AFIO_GPxConfig
# void sleep(int n)
3958: sleep
# int perip_clock_config(void)
3964: perip_clock_config
3a9e
# void ckcu_set_APBCCR0(uint32_t bits, uint32_t enable)
3ac8: ckcu_set_APBCCR0
# void ckcu_set_APBCCR1(uint32_t bits, uint32_t enable)
3ae0: ckcu_set_APBCCR1
# void ckcu_set_AHBCCR(uint32_t bits, uint32_t enable)
3ab0: ckcu_set_AHBCCR
# void ckcu_set_usb_clk_prescaler(uint8_t prescaler)
#   prescaler:
#       1 : CK_USB = CK_PLL
#       2 : CK_USB = CK_PLL/2
#       3 : CK_USB = CK_PLL/3
3b20: ckcu_set_usb_clk_prescaler
3d94
3db6
3ec0
3f14
3f60
3f9c
# uint8_t spi_flash_cmd_read_status_register(void)
3fe8: spi_flash_cmd_read_status_register
# int spi_flash_config(void)
4010: spi_flash_config
# uint8_t spi_flash_read_wip(void)
4084: spi_flash_read_wip
# int spi_flash_gpio_config(void)
4090: spi_flash_gpio_config
# void spi_flash_afio_config(void)
40ec: spi_flash_afio_config
# void spi_flash_deep_power_down(void)
4130: spi_flash_deep_power_down
# void spi_flash_cmd_page_program(uint8_t *src, uint32_t pageAddr, size_t len)
4178: spi_flash_cmd_page_program
# void spi_flash_cmd_sector_erase(uint32_t sectorAddr)
41c4: spi_flash_cmd_sector_erase
# void spi_flash_cmd_write_status_register(uint8_t value)
41fc: spi_flash_cmd_write_status_register
# int spi_flash_program_page(uint8_t *src, uint32_t pageAddr, size_t len)
4228: spi_flash_program_page
# void spi_flash_cmd_deep_power_down(void)
424c: spi_flash_cmd_deep_power_down
# void spi_flash_cmd_read_data(uint8_t *dst, uint32_t addr, size_t len)
4274: spi_flash_cmd_read_data
# void spi1_xfer(uint8_t *src, uint8_t *dst, size_t len)
42b4: spi1_xfer
# int spi_flash_erase_sector(uint32_t sectorAddr)
4324: spi_flash_erase_sector
# void spi_flash_cmd_write_enable(void)
43ec: spi_flash_cmd_write_enable
# void gpio_set_pin_direction(uint32_t gpio_base, uint32_t pin, int out)
4438: gpio_set_pin_direction
# void gpio_set_pin_output_drive_current(uint32_t gpio_base, uint32_t pin, int eight_mA)
4448: gpio_set_pin_output_drive_current
# void gpio_set_pin_input_enable(uint32_t gpio_base, uint32_t pin, int enable)
4458: gpio_set_pin_input_enable
# void gpio_set_pin_open_drain(uint32_t gpio_base, uint32_t pin, int open_drain)
4468: gpio_set_pin_open_drain
# void gpio_set_pin_pull_up_down_disable(uint32_t gpio_base, uint32_t pin, int pull_setting)
#   pull_setting can be one of the following:
#    0 - pull up
#    1 - pull down
#    2 - (tristate) disable
4478: gpio_set_pin_pull_up_down_disable
# void _gpio_set_reset_pin(uint32_t gpio_base, uint32_t value)
#   Set GPIO.PxSRR register to value
44a0: _gpio_set_reset_pin
# void gpio_set_reset_pin(uint32_t gpio_base, uint16_t pin, int set)
#   Set GPIO.PxRR to pin if set == 0;
#   Set GPIO.PxSRR to pin otherwise
44a4: gpio_set_reset_pin
# void TM_Cmd(HT_TM_TypeDef* TMx, int enable)
44ae: TM_Cmd
# void do_nothing(void)
4598: do_nothing
58d0
58e0
5994
59ec
59fc
5a08
5a18
5a24
5ab8
5adc
5b5c
5bd0
5be4
5c20
5cec
5d08
5d30
5d40
5de0
5e1c
5e44
5e50
5e78
5ec4
5efc
5f34
5f80
6028
607c
60e4
6130
61b8
# void setup_intr_priority(void)
61c8: setup_intr_priority
# uint32_t NVIC_EncodePriority(uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
6266: NVIC_EncodePriority
# void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
6298: NVIC_SetPriority
# void NVIC_SetVectorTable(u32 NVIC_VectTable, u32 NVIC_Offset)
62b8: NVIC_SetVectorTable
# int spi_flash_init_gpio(void)
62fc: spi_flash_init_gpio
65c8
6764
# void handle_frame(void)
67a0: handle_frame
# void gpio_config_key_groups(void)
6b1c: gpio_config_key_groups
# void gpio_set_reset_key_groups(int reset)
6cbc: gpio_set_reset_key_groups
# void spi_enable(uint32_t spi_base, int enable)
7084: spi_enable
# void spi_config(uint32_t spi_base, SPI_InitTypeDef *config)
#   from HT32_STD_1xxxx_FWLib_V1.1.1_2647.zip/library/HT32F1xxxx_Driver/inc/ht32f1xxxx_spi.h:
#   typedef struct {
#       uint32_t SPI_Mode; // either 0 for slave or 0x4000 for master
#       uint32_t SPI_FIFO; // either 0x400 to enable fifo and 0 to disable
#       uint32_t SPI_DataLength; // 4-bit value
#       uint32_t SPI_SELMode; // either 0 for SW or 0x2000 for HW
#       uint32_t SPI_SELPolarity; // either 0 for low and 0x800 for high
#       uint32_t SPI_CPOL; // either 0 for low or 0x400 for high
#       uint32_t SPI_CPHA; // either 0 for first or 1 for second
#       uint32_t SPI_FirstBit; // either 0 for MSB or 0x1000 for LSB
#       uint32_t SPI_RxFIFOTriggerLevel; // 4-bit value
#       uint32_t SPI_TxFIFOTriggerLevel; // 4-bit value
#       uint32_t SPI_ClockPrescaler; // PRESCALER = f_pclk/(2*f_sck)
#   } SPI_InitTypeDef;
7098: spi_config
# void spi_set_slave_select_output_enable(uint32_t spi_base, int enable)
70e2: spi_set_slave_select_output_enable
7154
# void main(void)
9420: main

[data]

# Force data on "code" that isn't code

361c!
3620!

36a4: AFIO_BASE_36a4
3864: BFTM0_BASE_3864
* 38e0
38e8: BFTM1_BASE_38e8
38ec: GPIOA_BASE_38ec
3954: AFIO.GPACFGR0_3954
3a10: GPIOA_BASE_3a10
3a14: CKCU_RSTCU_BASE_3a14
3ac4: CKCU_RSTCU_BASE_3ac4
3adc: CKCU_RSTCU_BASE_3adc
3af4: CKCU_RSTCU_BASE_3af4
3b08: CKCU_RSTCU_BASE_3b08
3b1c: CKCU_RSTCU_BASE_3b1c
3b30: CKCU_RSTCU_BASE_3b30
400c: GPIOB_BASE_400c
407c: SPI1_BASE_407c
4080: GPIOB_BASE_4080
40dc: GPIOB_BASE_40dc
412c: GPIOB_BASE_412c
4174: GPIOB_BASE_4174
41c0: GPIOB_BASE_41c0
41f8: GPIOB_BASE_41f8
4224: GPIOB_BASE_4224
4270: GPIOB_BASE_4270
42b0: GPIOB_BASE_42b0
4320: SPI1_BASE_4320
4370: GPIOB_BASE_4370
440c: GPIOB_BASE_440c
4b68: BFTM0_BASE_4b68
4b6c: NVIC.ICTR_4b6c
4bc0: BFTM0_BASE_4bc0
6248: NVIC.AIRCR_6248
62c8: NVIC.VTOR_62c8
6650: GPTM1_BASE_6650
6698: GPIOC_BASE_6698
66b8: GPIOC_BASE_66b8
66fc: NVIC.SCR_66fc
6748: NVIC.SCR_6748
6760: NVIC.SCR_6760
679c: FMC_BASE_679c
68d4: USB_BASE_68d4
68dc: FMC_BASE_68dc
68e0: EP_SRAM.off_0d0_68e0
6984: FMC_BASE_6984
698c: GPIOA_BASE_698c
6990: NVIC.AIRCR_6990
6a00: CKCU_RSTCU_BASE_6a00
6a28: CKCU_RSTCU_BASE_6a28
6c7c: GPIOC_BASE_6c7c
6c80: GPIOA_BASE_6c80
* 6c84
* 6cf4
6dc4: BFTM1_BASE_6dc4
6dc8: GPIOC_BASE_6dc8
6dcc: GPIOA_BASE_6dcc
6dd0: GPIOB_BASE_6dd0
6ee0: BFTM1_BASE_6ee0
6ee4: NVIC.ICTR_6ee4
6ee8: GPIOC_BASE_6ee8
6eec: GPIOA_BASE_6eec
6ef0: GPTM1_BASE_6ef0
6f48: GPIOA_BASE_6f48
6f4c: GPIOC_BASE_6f4c
6fe0: GPIOC_BASE_6fe0
6fe4: GPIOA_BASE_6fe4
7040: GPIOC_BASE_7040
7044: GPIOA_BASE_7044
* 7080
7254: CKCU_RSTCU_BASE_7254
725c: FMC_BASE_725c
730c: NVIC.ICTR_730c
* 8200
820c: USB_BASE_820c
8268: NVIC.ICTR_8268
8284: USB_BASE_8284
82a0: USB_BASE_82a0
82f0: EP_SRAM_BASE_82f0
8314: EP_SRAM_BASE_8314
8474: USB_BASE_8474
84a4: USB_BASE_84a4
84b8: USB_BASE_84b8
84c8: USB_BASE_84c8
8540: USB_BASE_8540
8594: EP_SRAM_BASE_8594
85b8: USB_BASE_85b8
90cc: GPTM1_BASE_90cc
90fc: GPIOA_BASE_90fc
912c: GPIOC_BASE_912c
9130: GPIOA_BASE_9130
93fc: USB.USBEP0CSR_93fc
9972: key_gpio_map .word 30
9a62: led_gpio_map .word 16
9abc: usb_report0_desc
9afc: usb_report1_desc
9b20: usb_report2_desc
9bb8: usb_config_desc
  +9: usb_interface0_desc
  +9: usb_hid0_desc
  +9: usb_ep1_desc
  +7: usb_interface1_desc
  +9: usb_hid1_desc
  +9: usb_ep3_desc
  +7: usb_ep4_desc
  +7: usb_interface2_desc
  +9: usb_hid2_desc
  +9: usb_ep2_desc
9c14: usb_device_desc
* 9c28
* 9c2c
* 9c30
9c34: usb_str0_desc
9c38: usb_str2_desc
9c78: usb_str1_desc

[annote]

9972: GPIO C, pin 4 - KEY_B5
  +8: GPIO B, pin 6 - KEY_B6
  +8: GPIO D, pin 0 - KEY_B7
  +8: GPIO B, pin 11 - KEY_B8
  +8: GPIO A, pin 11 - KEY_B9
  +8: GPIO A, pin 0 - KEY_B10
  +8: GPIO A, pin 1 - KEY_B11
  +8: GPIO A, pin 2 - KEY_B12
  +8: GPIO A, pin 3 - KEY_B4
  +8: GPIO A, pin 4 - unk1
  +8: GPIO C, pin 10 - unk2
  +8: GPIO C, pin 12 - KEY_B13
  +8: GPIO C, pin 3 - KEY_B1
  +8: GPIO A, pin 10 - KEY_B2
  +8: GPIO B, pin 1 - KEY_B3

9a62: GPIO C, pin 8 - Q1_ctrl
  +8: GPIO C, pin 7 - Q2_ctrl
  +8: GPIO B, pin 5 - Q3_ctrl
  +8: GPIO B, pin 4 - Q4_ctrl
  +8: GPIO B, pin 3 - Q5_ctrl
  +8: GPIO B, pin 2 - Q6_ctrl
  +8: GPIO C, pin 6 - Q7_ctrl
  +8: GPIO C, pin 5 - Q8_ctrl

9abc: Usage Page (Generic Desktop Controls)
  +2: Usage (Keyboard)
  +2: Collection (Application)
  +2: - Usage Page (Keyboard/Keypad)
  +2: - Usage Minimum (0xe0)
  +2: - Usage Maximum (0xe7)
  +2: - Logical Minimum (0)
  +2: - Logical Maximum (1)
  +2: - Report Size (1)
  +2: - Report Count (8)
  +2: - Input (Data,Var,Abs)
  +2: - Report Count (1)
  +2: - Report Size (8)
  +2: - Input (Const,Var,Abs)
  +2: - Report Count (3)
  +2: - Report Size (1)
  +2: - Usage Page (LED)
  +2: - Usage Minimum (0x01)
  +2: - Usage Maximum (0x03)
  +2: - Output (Data,Var,Abs)
  +2: - Report Count (1)
  +2: - Report Size (5)
  +2: - Output (Const,Var,Abs)
  +2: - Report Count (6)
  +2: - Report Size (8)
  +2: - Logical Minimum (0)
  +2: - Logical Maximum (164)
  +3: - Usage Page (Keyboard/Keypad)
  +2: - Usage Minimum (0x00)
  +2: - Usage Maximum (0xa4)
  +2: - Input (Data,Array,Abs)
  +2: - End Collection
9afc: Usage Page (Vendor)
  +3: Usage (Vendor)
  +2: Collection (Application)
  +2: - Usage (Vendor)
  +2: - Logical Minimum (0)
  +2: - Logical Maximum (255)
  +3: - Report Size (8)
  +2: - Report Count (64)
  +2: - Input (Data,Var,Abs)
  +2: - Usage (Vendor)
  +2: - Logical Minimum (0)
  +2: - Logical Maximum (255)
  +3: - Report Size (8)
  +2: - Report Count (64)
  +2: - Output (Data,Var,Abs)
  +2: - End Collection

9b20: Usage Page (Generic Desktop Controls)
  +2: Usage (System Control)
  +2: Collection (Application)
  +2: - Report ID (0x01)
  +2: - Usage Minimum (0x81)
  +2: - Usage Maximum (0x83)
  +2: - Logical Minimum (0)
  +2: - Logical Maximum (1)
  +2: - Report Count (3)
  +2: - Report Size (1)
  +2: - Input (Data,Var,Abs)
  +2: - Report Count (1)
  +2: - Report Size (5)
  +2: - Input (Const,Array,Abs)
  +2: - End Collection
  +1: Usage Page (Consumer)
  +2: Usage (Consumer Control)
  +2: Collection (Application)
  +2: - Report ID (0x02)
  +2: - Logical Minimum (0)
  +2: - Logical Maximum (1)
  +2: - Report Count (18)
  +2: - Report Size (1)
  +2: - Usage (Instance 33537)
  +3: - Usage (Instance 35329)
  +3: - Usage (Instance 37377)
  +3: - Usage (Instance 37889)
  +3: - Usage (Play/Pause)
  +2: - Usage (Stop)
  +2: - Usage (Scan Previous Track)
  +2: - Usage (Scan Next Track)
  +2: - Usage (Mute)
  +2: - Usage (Volume Decrement)
  +2: - Usage (Volume Increment)
  +2: - Usage (Instance 8450)
  +3: - Usage (Instance 8962)
  +3: - Usage (Instance 9218)
  +3: - Usage (Instance 9474)
  +3: - Usage (Instance 9730)
  +3: - Usage (Instance 9986)
  +3: - Usage (Instance 10754)
  +3: - Input (Data,Var,Abs)
  +2: - Report Count (1)
  +2: - Report Size (14)
  +2: - Input (Const,Array,Abs)
  +2: - End Collection
  +1: Usage Page (Generic Desktop Controls)
  +2: Usage (Keyboard)
  +2: Collection (Application)
  +2: - Report ID (0x04)
  +2: - Usage Page (Keyboard/Keypad)
  +2: - Report Count (1)
  +2: - Report Size (8)
  +2: - Input (Const,Var,Abs)
  +2: - Report Count (232)
  +2: - Report Size (1)
  +2: - Logical Minimum (0)
  +2: - Logical Maximum (1)
  +2: - Usage Page (Keyboard/Keypad)
  +2: - Usage Minimum (0x00)
  +2: - Usage Maximum (0xe7)
  +2: - Input (Data,Array,Abs)
  +2: - End Collection

9bb8: bLength (0x09)
  +1: bDescriptorType 0x02 (CONFIGURATION)
  +1: wTotalLength 91
  +2: bNumInterfaces 3
  +1: bConfigurationValue 1
  +1: iConfiguration 0
  +1: Configuration bmAttributes 0xa0  NOT SELF-POWERED  REMOTE-WAKEUP
  +1: bMaxPower 50 (100mA)
9bc1: bLength (0x09)
  +1: bDescriptorType 0x04 (INTERFACE)
  +1: bInterfaceNumber 0
  +1: bAlternateSetting 0
  +1: bNumEndpoints 1
  +1: bInterfaceClass HID (0x03)
  +1: bInterfaceSubClass Boot Interface (0x01)
  +1: bInterfaceProtocol Keyboard (0x01)
  +1: iInterface 0
9bca: bLength (0x09)
  +1: bDescriptorType 0x21 (HID)
  +1: bcdHID 0x0111
  +2: bCountryCode Not Supported (0x00)
  +1: bNumDescriptors 1
  +1: bDescriptorType HID Report (0x22)
  +1: wDescriptorLength 64
9bd3: bLength (0x07)
  +1: bDescriptorType 0x05 (ENDPOINT)
  +1: bEndpointAddress 0x81  IN  Endpoint:1
  +1: bmAttributes 0x03
  +1: wMaxPacketSize 8
  +2: bInterval 1
9bda: bLength (0x09)
  +1: bDescriptorType 0x04 (INTERFACE)
  +1: bInterfaceNumber 1
  +1: bAlternateSetting 0
  +1: bNumEndpoints 2
  +1: bInterfaceClass HID (0x03)
  +1: bInterfaceSubClass No Subclass (0x00)
  +1: bInterfaceProtocol 0x00
  +1: iInterface 0
9be3: bLength (0x09)
  +1: bDescriptorType 0x21 (HID)
  +1: bcdHID 0x0111
  +2: bCountryCode Not Supported (0x00)
  +1: bNumDescriptors 1
  +1: bDescriptorType HID Report (0x22)
  +1: wDescriptorLength 34
9bec: bLength (0x07)
  +1: bDescriptorType 0x05 (ENDPOINT)
  +1: bEndpointAddress 0x83  IN  Endpoint:3
  +1: bmAttributes 0x03
  +1: wMaxPacketSize 64
  +2: bInterval 1
9bf3: bLength (0x07)
  +1: bDescriptorType 0x05 (ENDPOINT)
  +1: bEndpointAddress 0x04  OUT  Endpoint:4
  +1: bmAttributes 0x03
  +1: wMaxPacketSize 64
  +2: bInterval 1
9bfa: bLength (0x09)
  +1: bDescriptorType 0x04 (INTERFACE)
  +1: bInterfaceNumber 2
  +1: bAlternateSetting 0
  +1: bNumEndpoints 1
  +1: bInterfaceClass HID (0x03)
  +1: bInterfaceSubClass No Subclass (0x00)
  +1: bInterfaceProtocol 0x00
  +1: iInterface 0
9c03: bLength (0x09)
  +1: bDescriptorType 0x21 (HID)
  +1: bcdHID 0x0111
  +2: bCountryCode Not Supported (0x00)
  +1: bNumDescriptors 1
  +1: bDescriptorType HID Report (0x22)
  +1: wDescriptorLength 134
9c0c: bLength (0x07)
  +1: bDescriptorType 0x05 (ENDPOINT)
  +1: bEndpointAddress 0x82  IN  Endpoint:2
  +1: bmAttributes 0x03
  +1: wMaxPacketSize 64
  +2: bInterval 1
9c14: bLength (0x12)
  +1: bDescriptorType 0x01 (DEVICE)
  +1: bcdUSB 0x0110
  +2: bDeviceClass Device (0x00)
  +1: bDeviceSubClass 0
  +1: bDeviceProtocol 0
  +1: bMaxPacketSize0 64
  +1: idVendor (0x2516)
  +2: idProduct (0x003c)
  +2: bcdDevice 0x2202
  +2: iManufacturer 1
  +1: iProduct 2
  +1: iSerialNumber 0
  +1: bNumConfigurations 1
9c34: bLength (0x04)
  +1: bDescriptorType 0x03 (STRING)
  +1: wLANGID English (United States) (0x0409)
9c38: bLength (0x22)
  +1: bDescriptorType 0x03 (STRING)
  +1: bString MASTERKEYS PRO S
9c78: bLength (0x3c)
  +1: bDescriptorType 0x03 (STRING)
  +1: bString Cooler Master Technology Inc.
